{"version":3,"file":"static/js/823.c0c846b8.chunk.js","mappings":"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","sources":["../../src/Layout.ts","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","../node_modules/@noble/hashes/esm/_assert.js","../node_modules/@noble/hashes/esm/utils.js","../node_modules/@noble/hashes/esm/cryptoBrowser.js","../node_modules/@noble/hashes/esm/_sha2.js","../node_modules/@noble/hashes/esm/_u64.js","../node_modules/@noble/hashes/esm/sha512.js","../node_modules/@noble/ed25519/lib/esm/index.js","../node_modules/@noble/hashes/esm/sha256.js","../node_modules/superstruct/src/utils.ts","../node_modules/superstruct/src/error.ts","../node_modules/superstruct/src/struct.ts","../node_modules/superstruct/src/structs/utilities.ts","../node_modules/superstruct/src/structs/types.ts","../node_modules/@babel/runtime/helpers/esm/toArray.js","../node_modules/superstruct/src/structs/coercions.ts","../node_modules/@noble/hashes/esm/sha3.js","../node_modules/@noble/hashes/esm/hmac.js","../node_modules/@noble/secp256k1/lib/esm/index.js","../node_modules/@solana/web3.js/src/utils/ed25519.ts","../node_modules/@solana/web3.js/src/utils/to-buffer.ts","../node_modules/@solana/web3.js/src/utils/borsh-schema.ts","../node_modules/@solana/web3.js/src/publickey.ts","../node_modules/@solana/web3.js/src/bpf-loader-deprecated.ts","../node_modules/@solana/web3.js/src/transaction/constants.ts","../node_modules/@solana/web3.js/src/transaction/expiry-custom-errors.ts","../node_modules/@solana/web3.js/src/message/account-keys.ts","../node_modules/@solana/web3.js/src/layout.ts","../node_modules/@solana/web3.js/src/utils/shortvec-encoding.ts","../node_modules/@solana/web3.js/src/utils/assert.ts","../node_modules/@solana/web3.js/src/transaction/legacy.ts","../node_modules/@solana/web3.js/src/message/compiled-keys.ts","../node_modules/@solana/web3.js/src/message/legacy.ts","../node_modules/@solana/web3.js/src/message/v0.ts","../node_modules/@solana/web3.js/src/sysvar.ts","../node_modules/@solana/web3.js/src/utils/send-and-confirm-transaction.ts","../node_modules/@solana/web3.js/src/utils/sleep.ts","../node_modules/@solana/web3.js/src/instruction.ts","../node_modules/@solana/web3.js/src/fee-calculator.ts","../node_modules/@solana/web3.js/src/utils/bigint.ts","../node_modules/@solana/web3.js/src/nonce-account.ts","../node_modules/@solana/web3.js/src/programs/system.ts","../node_modules/@solana/web3.js/src/loader.ts","../node_modules/@solana/web3.js/src/bpf-loader.ts","../node_modules/@solana/web3.js/node_modules/fast-stable-stringify/index.js","../node_modules/@solana/web3.js/src/epoch-schedule.ts","../node_modules/@solana/web3.js/src/errors.ts","../node_modules/@solana/web3.js/src/__forks__/browser/fetch-impl.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/state.ts","../node_modules/@solana/web3.js/src/account-data.ts","../node_modules/@solana/web3.js/src/utils/makeWebsocketUrl.ts","../node_modules/@solana/web3.js/src/connection.ts","../node_modules/@solana/web3.js/src/keypair.ts","../node_modules/@solana/web3.js/src/programs/address-lookup-table/index.ts","../node_modules/@solana/web3.js/src/programs/compute-budget.ts","../node_modules/@solana/web3.js/src/programs/ed25519.ts","../node_modules/@solana/web3.js/src/utils/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/secp256k1.ts","../node_modules/@solana/web3.js/src/programs/stake.ts","../node_modules/@solana/web3.js/src/programs/vote.ts","../node_modules/@solana/web3.js/src/validator-info.ts","../node_modules/@solana/web3.js/src/vote-account.ts","../node_modules/@solana/web3.js/node_modules/base-x/src/index.js","../node_modules/@solana/web3.js/node_modules/bs58/index.js","../node_modules/@solana/web3.js/node_modules/buffer/index.js","../node_modules/@web3auth/solana-provider/src/rpc/JrpcClient.ts","../node_modules/@web3auth/solana-provider/src/rpc/solanaRpcMiddlewares.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/baseInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/base/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/injectedProviderProxy.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/phantom/phantomInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/slopeInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/slope/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/solflareInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/solflare/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/solletInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/sollet/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/providerHandlers.ts","../node_modules/@web3auth/solana-provider/src/providers/injectedProviders/torus/torusInjectedProvider.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyUtils.ts","../node_modules/@web3auth/solana-provider/src/providers/privateKeyProvider/solanaPrivateKeyProvider.ts","../node_modules/@web3auth/solana-provider/src/solanaWallet.ts","../node_modules/@web3auth/solana-provider/node_modules/base-x/src/index.js","../node_modules/@web3auth/solana-provider/node_modules/bs58/index.js","../node_modules/bigint-buffer/dist/browser.js","../node_modules/borsh/lib/index.js","../node_modules/borsh/node_modules/base-x/src/index.js","../node_modules/borsh/node_modules/bs58/index.js","../node_modules/eventemitter3/index.js","../node_modules/jayson/lib/client/browser/index.js","../node_modules/jayson/lib/generateRequest.js","../node_modules/rpc-websockets/dist/index.browser.js","../node_modules/rpc-websockets/dist/lib/client.js","../node_modules/rpc-websockets/dist/lib/client/websocket.browser.js","../node_modules/uuid/dist/esm-browser/rng.js","../node_modules/uuid/dist/esm-browser/regex.js","../node_modules/uuid/dist/esm-browser/stringify.js","../node_modules/uuid/dist/esm-browser/validate.js","../node_modules/uuid/dist/esm-browser/v4.js","../node_modules/@babel/runtime/helpers/asyncToGenerator.js","../node_modules/@babel/runtime/helpers/defineProperty.js","../node_modules/@babel/runtime/helpers/get.js","../node_modules/@babel/runtime/helpers/interopRequireDefault.js","../node_modules/@babel/runtime/helpers/superPropBase.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/text-encoding-utf-8/lib/encoding.lib.mjs"],"sourcesContent":[null,"import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","export function number(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error(`Wrong positive integer: ${n}`);\n}\nexport function bool(b) {\n    if (typeof b !== 'boolean')\n        throw new Error(`Expected boolean, not ${b}`);\n}\nexport function bytes(b, ...lengths) {\n    if (!(b instanceof Uint8Array))\n        throw new TypeError('Expected Uint8Array');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new TypeError(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\nexport function hash(hash) {\n    if (typeof hash !== 'function' || typeof hash.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.wrapConstructor');\n    number(hash.outputLen);\n    number(hash.blockLen);\n}\nexport function exists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\nexport function output(out, instance) {\n    bytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n    }\n}\nconst assert = {\n    number,\n    bool,\n    bytes,\n    hash,\n    exists,\n    output,\n};\nexport default assert;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// The import here is via the package name. This is to ensure\n// that exports mapping/resolution does fall into place.\nimport { crypto } from '@noble/hashes/crypto';\n// Cast array to different type\nexport const u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n// Cast array to view\nexport const createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\n// There is almost no big endian hardware, but js typed arrays uses platform specific endianness.\n// So, just to be sure not to corrupt anything.\nif (!isLE)\n    throw new Error('Non little-endian hardware is not supported');\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\n/**\n * @example bytesToHex(Uint8Array.from([0xde, 0xad, 0xbe, 0xef]))\n */\nexport function bytesToHex(uint8a) {\n    // pre-caching improves the speed 6x\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\n/**\n * @example hexToBytes('deadbeef')\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\n// There is no setImmediate in browser and setTimeout is slow. However, call to async function will return Promise\n// which will be fullfiled only on next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => { };\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string') {\n        throw new TypeError(`utf8ToBytes expected string, got ${typeof str}`);\n    }\n    return new TextEncoder().encode(str);\n}\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    if (!(data instanceof Uint8Array))\n        throw new TypeError(`Expected input type is Uint8Array (got ${typeof data})`);\n    return data;\n}\n/**\n * Concats Uint8Array-s into one; like `Buffer.concat([buf1, buf2])`\n * @example concatBytes(buf1, buf2)\n */\nexport function concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\n// For runtime check if class implements interface\nexport class Hash {\n    // Safe version that clones internal state\n    clone() {\n        return this._cloneInto();\n    }\n}\n// Check if object doens't have custom constructor (like Uint8Array/Array)\nconst isPlainObject = (obj) => Object.prototype.toString.call(obj) === '[object Object]' && obj.constructor === Object;\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && (typeof opts !== 'object' || !isPlainObject(opts)))\n        throw new TypeError('Options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\nexport function wrapConstructor(hashConstructor) {\n    const hashC = (message) => hashConstructor().update(toBytes(message)).digest();\n    const tmp = hashConstructor();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashConstructor();\n    return hashC;\n}\nexport function wrapConstructorWithOpts(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\n/**\n * Secure PRNG\n */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto.web) {\n        return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n    }\n    else if (crypto.node) {\n        return new Uint8Array(crypto.node.randomBytes(bytesLength).buffer);\n    }\n    else {\n        throw new Error(\"The environment doesn't have randomBytes function\");\n    }\n}\n","export const crypto = {\n    node: undefined,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\n","import assert from './_assert.js';\nimport { Hash, createView, toBytes } from './utils.js';\n// Polyfill for Safari 14\nfunction setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n// Base SHA2 class (RFC 6234)\nexport class SHA2 extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        assert.exists(this);\n        const { view, buffer, blockLen } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.output(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        this.buffer.subarray(pos).fill(0);\n        // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        this.get().forEach((v, i) => oview.setUint32(4 * i, v, isLE));\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.length = length;\n        to.pos = pos;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n}\n","const U32_MASK64 = BigInt(2 ** 32 - 1);\nconst _32n = BigInt(32);\n// We are not using BigUint64Array, because they are extremely slow as per 2022\nexport function fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nexport function split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nexport const toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (h, l) => l;\nconst rotr32L = (h, l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\n// Removing \"export\" has 5% perf penalty -_-\nexport function add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n","import { SHA2 } from './_sha2.js';\nimport u64 from './_u64.js';\nimport { wrapConstructor } from './utils.js';\n// Round contants (first 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409):\n// prettier-ignore\nconst [SHA512_Kh, SHA512_Kl] = u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n)));\n// Temporary buffer, not used to store anything between runs\nconst SHA512_W_H = new Uint32Array(80);\nconst SHA512_W_L = new Uint32Array(80);\nexport class SHA512 extends SHA2 {\n    constructor() {\n        super(128, 64, 16, false);\n        // We cannot use array here since array allows indexing by variable which means optimizer/compiler cannot use registers.\n        // Also looks cleaner and easier to verify with spec.\n        // Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x6a09e667 | 0;\n        this.Al = 0xf3bcc908 | 0;\n        this.Bh = 0xbb67ae85 | 0;\n        this.Bl = 0x84caa73b | 0;\n        this.Ch = 0x3c6ef372 | 0;\n        this.Cl = 0xfe94f82b | 0;\n        this.Dh = 0xa54ff53a | 0;\n        this.Dl = 0x5f1d36f1 | 0;\n        this.Eh = 0x510e527f | 0;\n        this.El = 0xade682d1 | 0;\n        this.Fh = 0x9b05688c | 0;\n        this.Fl = 0x2b3e6c1f | 0;\n        this.Gh = 0x1f83d9ab | 0;\n        this.Gl = 0xfb41bd6b | 0;\n        this.Hh = 0x5be0cd19 | 0;\n        this.Hl = 0x137e2179 | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        SHA512_W_H.fill(0);\n        SHA512_W_L.fill(0);\n    }\n    destroy() {\n        this.buffer.fill(0);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nclass SHA512_256 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0x22312194 | 0;\n        this.Al = 0xfc2bf72c | 0;\n        this.Bh = 0x9f555fa3 | 0;\n        this.Bl = 0xc84c64c2 | 0;\n        this.Ch = 0x2393b86b | 0;\n        this.Cl = 0x6f53b151 | 0;\n        this.Dh = 0x96387719 | 0;\n        this.Dl = 0x5940eabd | 0;\n        this.Eh = 0x96283ee2 | 0;\n        this.El = 0xa88effe3 | 0;\n        this.Fh = 0xbe5e1e25 | 0;\n        this.Fl = 0x53863992 | 0;\n        this.Gh = 0x2b0199fc | 0;\n        this.Gl = 0x2c85b8aa | 0;\n        this.Hh = 0x0eb72ddc | 0;\n        this.Hl = 0x81c52ca2 | 0;\n        this.outputLen = 32;\n    }\n}\nclass SHA384 extends SHA512 {\n    constructor() {\n        super();\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = 0xcbbb9d5d | 0;\n        this.Al = 0xc1059ed8 | 0;\n        this.Bh = 0x629a292a | 0;\n        this.Bl = 0x367cd507 | 0;\n        this.Ch = 0x9159015a | 0;\n        this.Cl = 0x3070dd17 | 0;\n        this.Dh = 0x152fecd8 | 0;\n        this.Dl = 0xf70e5939 | 0;\n        this.Eh = 0x67332667 | 0;\n        this.El = 0xffc00b31 | 0;\n        this.Fh = 0x8eb44a87 | 0;\n        this.Fl = 0x68581511 | 0;\n        this.Gh = 0xdb0c2e0d | 0;\n        this.Gl = 0x64f98fa7 | 0;\n        this.Hh = 0x47b5481d | 0;\n        this.Hl = 0xbefa4fa4 | 0;\n        this.outputLen = 48;\n    }\n}\nexport const sha512 = wrapConstructor(() => new SHA512());\nexport const sha512_256 = wrapConstructor(() => new SHA512_256());\nexport const sha384 = wrapConstructor(() => new SHA384());\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst CU_O = BigInt('7237005577332262213973186563042994240857116359379907606001950938285454250989');\nconst CURVE = Object.freeze({\n    a: BigInt(-1),\n    d: BigInt('37095705934669439343138083508754565189542113879843219016388785533085940283555'),\n    P: BigInt('57896044618658097711785492504343953926634992332820282019728792003956564819949'),\n    l: CU_O,\n    n: CU_O,\n    h: BigInt(8),\n    Gx: BigInt('15112221349535400772501151409588531511454012693041857206046113283949847762202'),\n    Gy: BigInt('46316835694926478169428394003475163141307993866256225615783033603165251855960'),\n});\nexport { CURVE };\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nconst SQRT_M1 = BigInt('19681161376707505956807079304988542015446066515923890162744021073123829784752');\nconst SQRT_D = BigInt('6853475219497561581579357271197624642482790079785650197046958215289687604742');\nconst SQRT_AD_MINUS_ONE = BigInt('25063068953384623474111414158702152701244531502492656460079210482610430750235');\nconst INVSQRT_A_MINUS_D = BigInt('54469307008909316920995813868745141605393597292927456921205312896311721017578');\nconst ONE_MINUS_D_SQ = BigInt('1159843021668779879193775521855586647937357759715417654439879720876111806838');\nconst D_MINUS_ONE_SQ = BigInt('40440834346308536858101042469323190826248399146238708352240133220865137265952');\nclass ExtendedPoint {\n    constructor(x, y, z, t) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.t = t;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('ExtendedPoint#fromAffine: expected Point');\n        }\n        if (p.equals(Point.ZERO))\n            return ExtendedPoint.ZERO;\n        return new ExtendedPoint(p.x, p.y, _1n, mod(p.x * p.y));\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return this.toAffineBatch(points).map(this.fromAffine);\n    }\n    equals(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const X1Z2 = mod(X1 * Z2);\n        const X2Z1 = mod(X2 * Z1);\n        const Y1Z2 = mod(Y1 * Z2);\n        const Y2Z1 = mod(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    negate() {\n        return new ExtendedPoint(mod(-this.x), this.y, this.z, mod(-this.t));\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { a } = CURVE;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(_2n * mod(Z1 * Z1));\n        const D = mod(a * A);\n        const x1y1 = X1 + Y1;\n        const E = mod(mod(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    add(other) {\n        assertExtPoint(other);\n        const { x: X1, y: Y1, z: Z1, t: T1 } = this;\n        const { x: X2, y: Y2, z: Z2, t: T2 } = other;\n        const A = mod((Y1 - X1) * (Y2 + X2));\n        const B = mod((Y1 + X1) * (Y2 - X2));\n        const F = mod(B - A);\n        if (F === _0n)\n            return this.double();\n        const C = mod(Z1 * _2n * T2);\n        const D = mod(T1 * _2n * Z2);\n        const E = D + C;\n        const G = B + A;\n        const H = D - C;\n        const X3 = mod(E * F);\n        const Y3 = mod(G * H);\n        const T3 = mod(E * H);\n        const Z3 = mod(F * G);\n        return new ExtendedPoint(X3, Y3, Z3, T3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    precomputeWindow(W) {\n        const windows = 1 + 256 / W;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(ExtendedPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = ExtendedPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = ExtendedPoint.ZERO;\n        let f = ExtendedPoint.ZERO;\n        const windows = 1 + 256 / W;\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return ExtendedPoint.normalizeZ([p, f])[0];\n    }\n    multiply(scalar, affinePoint) {\n        return this.wNAF(normalizeScalar(scalar, CURVE.l), affinePoint);\n    }\n    multiplyUnsafe(scalar) {\n        let n = normalizeScalar(scalar, CURVE.l, false);\n        const G = ExtendedPoint.BASE;\n        const P0 = ExtendedPoint.ZERO;\n        if (n === _0n)\n            return P0;\n        if (this.equals(P0) || n === _1n)\n            return this;\n        if (this.equals(G))\n            return this.wNAF(n);\n        let p = P0;\n        let d = this;\n        while (n > _0n) {\n            if (n & _1n)\n                p = p.add(d);\n            d = d.double();\n            n >>= _1n;\n        }\n        return p;\n    }\n    isSmallOrder() {\n        return this.multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n    }\n    isTorsionFree() {\n        return this.multiplyUnsafe(CURVE.l).equals(ExtendedPoint.ZERO);\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const ax = mod(x * invZ);\n        const ay = mod(y * invZ);\n        const zz = mod(z * invZ);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n    fromRistrettoBytes() {\n        legacyRist();\n    }\n    toRistrettoBytes() {\n        legacyRist();\n    }\n    fromRistrettoHash() {\n        legacyRist();\n    }\n}\nExtendedPoint.BASE = new ExtendedPoint(CURVE.Gx, CURVE.Gy, _1n, mod(CURVE.Gx * CURVE.Gy));\nExtendedPoint.ZERO = new ExtendedPoint(_0n, _1n, _1n, _0n);\nfunction assertExtPoint(other) {\n    if (!(other instanceof ExtendedPoint))\n        throw new TypeError('ExtendedPoint expected');\n}\nfunction assertRstPoint(other) {\n    if (!(other instanceof RistrettoPoint))\n        throw new TypeError('RistrettoPoint expected');\n}\nfunction legacyRist() {\n    throw new Error('Legacy method: switch to RistrettoPoint');\n}\nclass RistrettoPoint {\n    constructor(ep) {\n        this.ep = ep;\n    }\n    static calcElligatorRistrettoMap(r0) {\n        const { d } = CURVE;\n        const r = mod(SQRT_M1 * r0 * r0);\n        const Ns = mod((r + _1n) * ONE_MINUS_D_SQ);\n        let c = BigInt(-1);\n        const D = mod((c - d * r) * mod(r + d));\n        let { isValid: Ns_D_is_sq, value: s } = uvRatio(Ns, D);\n        let s_ = mod(s * r0);\n        if (!edIsNegative(s_))\n            s_ = mod(-s_);\n        if (!Ns_D_is_sq)\n            s = s_;\n        if (!Ns_D_is_sq)\n            c = r;\n        const Nt = mod(c * (r - _1n) * D_MINUS_ONE_SQ - D);\n        const s2 = s * s;\n        const W0 = mod((s + s) * D);\n        const W1 = mod(Nt * SQRT_AD_MINUS_ONE);\n        const W2 = mod(_1n - s2);\n        const W3 = mod(_1n + s2);\n        return new ExtendedPoint(mod(W0 * W3), mod(W2 * W1), mod(W1 * W3), mod(W0 * W2));\n    }\n    static hashToCurve(hex) {\n        hex = ensureBytes(hex, 64);\n        const r1 = bytes255ToNumberLE(hex.slice(0, 32));\n        const R1 = this.calcElligatorRistrettoMap(r1);\n        const r2 = bytes255ToNumberLE(hex.slice(32, 64));\n        const R2 = this.calcElligatorRistrettoMap(r2);\n        return new RistrettoPoint(R1.add(R2));\n    }\n    static fromHex(hex) {\n        hex = ensureBytes(hex, 32);\n        const { a, d } = CURVE;\n        const emsg = 'RistrettoPoint.fromHex: the hex is not valid encoding of RistrettoPoint';\n        const s = bytes255ToNumberLE(hex);\n        if (!equalBytes(numberTo32BytesLE(s), hex) || edIsNegative(s))\n            throw new Error(emsg);\n        const s2 = mod(s * s);\n        const u1 = mod(_1n + a * s2);\n        const u2 = mod(_1n - a * s2);\n        const u1_2 = mod(u1 * u1);\n        const u2_2 = mod(u2 * u2);\n        const v = mod(a * d * u1_2 - u2_2);\n        const { isValid, value: I } = invertSqrt(mod(v * u2_2));\n        const Dx = mod(I * u2);\n        const Dy = mod(I * Dx * v);\n        let x = mod((s + s) * Dx);\n        if (edIsNegative(x))\n            x = mod(-x);\n        const y = mod(u1 * Dy);\n        const t = mod(x * y);\n        if (!isValid || edIsNegative(t) || y === _0n)\n            throw new Error(emsg);\n        return new RistrettoPoint(new ExtendedPoint(x, y, _1n, t));\n    }\n    toRawBytes() {\n        let { x, y, z, t } = this.ep;\n        const u1 = mod(mod(z + y) * mod(z - y));\n        const u2 = mod(x * y);\n        const u2sq = mod(u2 * u2);\n        const { value: invsqrt } = invertSqrt(mod(u1 * u2sq));\n        const D1 = mod(invsqrt * u1);\n        const D2 = mod(invsqrt * u2);\n        const zInv = mod(D1 * D2 * t);\n        let D;\n        if (edIsNegative(t * zInv)) {\n            let _x = mod(y * SQRT_M1);\n            let _y = mod(x * SQRT_M1);\n            x = _x;\n            y = _y;\n            D = mod(D1 * INVSQRT_A_MINUS_D);\n        }\n        else {\n            D = D2;\n        }\n        if (edIsNegative(x * zInv))\n            y = mod(-y);\n        let s = mod((z - y) * D);\n        if (edIsNegative(s))\n            s = mod(-s);\n        return numberTo32BytesLE(s);\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toString() {\n        return this.toHex();\n    }\n    equals(other) {\n        assertRstPoint(other);\n        const a = this.ep;\n        const b = other.ep;\n        const one = mod(a.x * b.y) === mod(a.y * b.x);\n        const two = mod(a.y * b.y) === mod(a.x * b.x);\n        return one || two;\n    }\n    add(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.add(other.ep));\n    }\n    subtract(other) {\n        assertRstPoint(other);\n        return new RistrettoPoint(this.ep.subtract(other.ep));\n    }\n    multiply(scalar) {\n        return new RistrettoPoint(this.ep.multiply(scalar));\n    }\n    multiplyUnsafe(scalar) {\n        return new RistrettoPoint(this.ep.multiplyUnsafe(scalar));\n    }\n}\nRistrettoPoint.BASE = new RistrettoPoint(ExtendedPoint.BASE);\nRistrettoPoint.ZERO = new RistrettoPoint(ExtendedPoint.ZERO);\nconst pointPrecomputes = new WeakMap();\nclass Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    static fromHex(hex, strict = true) {\n        const { d, P } = CURVE;\n        hex = ensureBytes(hex, 32);\n        const normed = hex.slice();\n        normed[31] = hex[31] & ~0x80;\n        const y = bytesToNumberLE(normed);\n        if (strict && y >= P)\n            throw new Error('Expected 0 < hex < P');\n        if (!strict && y >= POW_2_256)\n            throw new Error('Expected 0 < hex < 2**256');\n        const y2 = mod(y * y);\n        const u = mod(y2 - _1n);\n        const v = mod(d * y2 + _1n);\n        let { isValid, value: x } = uvRatio(u, v);\n        if (!isValid)\n            throw new Error('Point.fromHex: invalid y coordinate');\n        const isXOdd = (x & _1n) === _1n;\n        const isLastByteOdd = (hex[31] & 0x80) !== 0;\n        if (isLastByteOdd !== isXOdd) {\n            x = mod(-x);\n        }\n        return new Point(x, y);\n    }\n    static async fromPrivateKey(privateKey) {\n        return (await getExtendedPublicKey(privateKey)).point;\n    }\n    toRawBytes() {\n        const bytes = numberTo32BytesLE(this.y);\n        bytes[31] |= this.x & _1n ? 0x80 : 0;\n        return bytes;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n    toX25519() {\n        const { y } = this;\n        const u = mod((_1n + y) * invert(_1n - y));\n        return numberTo32BytesLE(u);\n    }\n    isTorsionFree() {\n        return ExtendedPoint.fromAffine(this).isTorsionFree();\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(mod(-this.x), this.y);\n    }\n    add(other) {\n        return ExtendedPoint.fromAffine(this).add(ExtendedPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return ExtendedPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _1n);\nclass Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex, 64);\n        const r = Point.fromHex(bytes.slice(0, 32), false);\n        const s = bytesToNumberLE(bytes.slice(32, 64));\n        return new Signature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!(r instanceof Point))\n            throw new Error('Expected Point instance');\n        normalizeScalar(s, CURVE.l, false);\n        return this;\n    }\n    toRawBytes() {\n        const u8 = new Uint8Array(64);\n        u8.set(this.r.toRawBytes());\n        u8.set(numberTo32BytesLE(this.s), 32);\n        return u8;\n    }\n    toHex() {\n        return bytesToHex(this.toRawBytes());\n    }\n}\nexport { ExtendedPoint, RistrettoPoint, Point, Signature };\nfunction concatBytes(...arrays) {\n    if (!arrays.every((a) => a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array list');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Uint8Array expected');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex');\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction numberTo32BytesBE(num) {\n    const length = 32;\n    const hex = num.toString(16).padStart(length * 2, '0');\n    return hexToBytes(hex);\n}\nfunction numberTo32BytesLE(num) {\n    return numberTo32BytesBE(num).reverse();\n}\nfunction edIsNegative(num) {\n    return (mod(num) & _1n) === _1n;\n}\nfunction bytesToNumberLE(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    return BigInt('0x' + bytesToHex(Uint8Array.from(uint8a).reverse()));\n}\nconst MAX_255B = BigInt('0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');\nfunction bytes255ToNumberLE(bytes) {\n    return mod(bytesToNumberLE(bytes) & MAX_255B);\n}\nfunction mod(a, b = CURVE.P) {\n    const res = a % b;\n    return res >= _0n ? res : b + res;\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const tmp = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        tmp[i] = mod(acc * tmp[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return tmp;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction pow_2_252_3(x) {\n    const { P } = CURVE;\n    const _5n = BigInt(5);\n    const _10n = BigInt(10);\n    const _20n = BigInt(20);\n    const _40n = BigInt(40);\n    const _80n = BigInt(80);\n    const x2 = (x * x) % P;\n    const b2 = (x2 * x) % P;\n    const b4 = (pow2(b2, _2n) * b2) % P;\n    const b5 = (pow2(b4, _1n) * x) % P;\n    const b10 = (pow2(b5, _5n) * b5) % P;\n    const b20 = (pow2(b10, _10n) * b10) % P;\n    const b40 = (pow2(b20, _20n) * b20) % P;\n    const b80 = (pow2(b40, _40n) * b40) % P;\n    const b160 = (pow2(b80, _80n) * b80) % P;\n    const b240 = (pow2(b160, _80n) * b80) % P;\n    const b250 = (pow2(b240, _10n) * b10) % P;\n    const pow_p_5_8 = (pow2(b250, _2n) * x) % P;\n    return { pow_p_5_8, b2 };\n}\nfunction uvRatio(u, v) {\n    const v3 = mod(v * v * v);\n    const v7 = mod(v3 * v3 * v);\n    const pow = pow_2_252_3(u * v7).pow_p_5_8;\n    let x = mod(u * v3 * pow);\n    const vx2 = mod(v * x * x);\n    const root1 = x;\n    const root2 = mod(x * SQRT_M1);\n    const useRoot1 = vx2 === u;\n    const useRoot2 = vx2 === mod(-u);\n    const noRoot = vx2 === mod(-u * SQRT_M1);\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2;\n    if (edIsNegative(x))\n        x = mod(-x);\n    return { isValid: useRoot1 || useRoot2, value: x };\n}\nfunction invertSqrt(number) {\n    return uvRatio(_1n, number);\n}\nfunction modlLE(hash) {\n    return mod(bytesToNumberLE(hash), CURVE.l);\n}\nfunction equalBytes(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    for (let i = 0; i < b1.length; i++) {\n        if (b1[i] !== b2[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction ensureBytes(hex, expectedLength) {\n    const bytes = hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n    if (typeof expectedLength === 'number' && bytes.length !== expectedLength)\n        throw new Error(`Expected ${expectedLength} bytes`);\n    return bytes;\n}\nfunction normalizeScalar(num, max, strict = true) {\n    if (!max)\n        throw new TypeError('Specify max value');\n    if (typeof num === 'number' && Number.isSafeInteger(num))\n        num = BigInt(num);\n    if (typeof num === 'bigint' && num < max) {\n        if (strict) {\n            if (_0n < num)\n                return num;\n        }\n        else {\n            if (_0n <= num)\n                return num;\n        }\n    }\n    throw new TypeError('Expected valid scalar: 0 < scalar < max');\n}\nfunction adjustBytes25519(bytes) {\n    bytes[0] &= 248;\n    bytes[31] &= 127;\n    bytes[31] |= 64;\n    return bytes;\n}\nfunction decodeScalar25519(n) {\n    return bytesToNumberLE(adjustBytes25519(ensureBytes(n, 32)));\n}\nfunction checkPrivateKey(key) {\n    key =\n        typeof key === 'bigint' || typeof key === 'number'\n            ? numberTo32BytesBE(normalizeScalar(key, POW_2_256))\n            : ensureBytes(key);\n    if (key.length !== 32)\n        throw new Error(`Expected 32 bytes`);\n    return key;\n}\nfunction getKeyFromHash(hashed) {\n    const head = adjustBytes25519(hashed.slice(0, 32));\n    const prefix = hashed.slice(32, 64);\n    const scalar = modlLE(head);\n    const point = Point.BASE.multiply(scalar);\n    const pointBytes = point.toRawBytes();\n    return { head, prefix, scalar, point, pointBytes };\n}\nlet _sha512Sync;\nfunction sha512s(...m) {\n    if (typeof _sha512Sync !== 'function')\n        throw new Error('utils.sha512Sync must be set to use sync methods');\n    return _sha512Sync(...m);\n}\nasync function getExtendedPublicKey(key) {\n    return getKeyFromHash(await utils.sha512(checkPrivateKey(key)));\n}\nfunction getExtendedPublicKeySync(key) {\n    return getKeyFromHash(sha512s(checkPrivateKey(key)));\n}\nexport async function getPublicKey(privateKey) {\n    return (await getExtendedPublicKey(privateKey)).pointBytes;\n}\nfunction getPublicKeySync(privateKey) {\n    return getExtendedPublicKeySync(privateKey).pointBytes;\n}\nexport async function sign(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = await getExtendedPublicKey(privateKey);\n    const r = modlLE(await utils.sha512(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(await utils.sha512(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction signSync(message, privateKey) {\n    message = ensureBytes(message);\n    const { prefix, scalar, pointBytes } = getExtendedPublicKeySync(privateKey);\n    const r = modlLE(sha512s(prefix, message));\n    const R = Point.BASE.multiply(r);\n    const k = modlLE(sha512s(R.toRawBytes(), pointBytes, message));\n    const s = mod(r + k * scalar, CURVE.l);\n    return new Signature(R, s).toRawBytes();\n}\nfunction prepareVerification(sig, message, publicKey) {\n    message = ensureBytes(message);\n    if (!(publicKey instanceof Point))\n        publicKey = Point.fromHex(publicKey, false);\n    const { r, s } = sig instanceof Signature ? sig.assertValidity() : Signature.fromHex(sig);\n    const SB = ExtendedPoint.BASE.multiplyUnsafe(s);\n    return { r, s, SB, pub: publicKey, msg: message };\n}\nfunction finishVerification(publicKey, r, SB, hashed) {\n    const k = modlLE(hashed);\n    const kA = ExtendedPoint.fromAffine(publicKey).multiplyUnsafe(k);\n    const RkA = ExtendedPoint.fromAffine(r).add(kA);\n    return RkA.subtract(SB).multiplyUnsafe(CURVE.h).equals(ExtendedPoint.ZERO);\n}\nexport async function verify(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = await utils.sha512(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nfunction verifySync(sig, message, publicKey) {\n    const { r, SB, msg, pub } = prepareVerification(sig, message, publicKey);\n    const hashed = sha512s(r.toRawBytes(), pub.toRawBytes(), msg);\n    return finishVerification(pub, r, SB, hashed);\n}\nexport const sync = {\n    getExtendedPublicKey: getExtendedPublicKeySync,\n    getPublicKey: getPublicKeySync,\n    sign: signSync,\n    verify: verifySync,\n};\nexport async function getSharedSecret(privateKey, publicKey) {\n    const { head } = await getExtendedPublicKey(privateKey);\n    const u = Point.fromHex(publicKey).toX25519();\n    return curve25519.scalarMult(head, u);\n}\nPoint.BASE._setWindowSize(8);\nfunction cswap(swap, x_2, x_3) {\n    const dummy = mod(swap * (x_2 - x_3));\n    x_2 = mod(x_2 - dummy);\n    x_3 = mod(x_3 + dummy);\n    return [x_2, x_3];\n}\nfunction montgomeryLadder(pointU, scalar) {\n    const { P } = CURVE;\n    const u = normalizeScalar(pointU, P);\n    const k = normalizeScalar(scalar, P);\n    const a24 = BigInt(121665);\n    const x_1 = u;\n    let x_2 = _1n;\n    let z_2 = _0n;\n    let x_3 = u;\n    let z_3 = _1n;\n    let swap = _0n;\n    let sw;\n    for (let t = BigInt(255 - 1); t >= _0n; t--) {\n        const k_t = (k >> t) & _1n;\n        swap ^= k_t;\n        sw = cswap(swap, x_2, x_3);\n        x_2 = sw[0];\n        x_3 = sw[1];\n        sw = cswap(swap, z_2, z_3);\n        z_2 = sw[0];\n        z_3 = sw[1];\n        swap = k_t;\n        const A = x_2 + z_2;\n        const AA = mod(A * A);\n        const B = x_2 - z_2;\n        const BB = mod(B * B);\n        const E = AA - BB;\n        const C = x_3 + z_3;\n        const D = x_3 - z_3;\n        const DA = mod(D * A);\n        const CB = mod(C * B);\n        const dacb = DA + CB;\n        const da_cb = DA - CB;\n        x_3 = mod(dacb * dacb);\n        z_3 = mod(x_1 * mod(da_cb * da_cb));\n        x_2 = mod(AA * BB);\n        z_2 = mod(E * (AA + mod(a24 * E)));\n    }\n    sw = cswap(swap, x_2, x_3);\n    x_2 = sw[0];\n    x_3 = sw[1];\n    sw = cswap(swap, z_2, z_3);\n    z_2 = sw[0];\n    z_3 = sw[1];\n    const { pow_p_5_8, b2 } = pow_2_252_3(z_2);\n    const xp2 = mod(pow2(pow_p_5_8, BigInt(3)) * b2);\n    return mod(x_2 * xp2);\n}\nfunction encodeUCoordinate(u) {\n    return numberTo32BytesLE(mod(u, CURVE.P));\n}\nfunction decodeUCoordinate(uEnc) {\n    const u = ensureBytes(uEnc, 32);\n    u[31] &= 127;\n    return bytesToNumberLE(u);\n}\nexport const curve25519 = {\n    BASE_POINT_U: '0900000000000000000000000000000000000000000000000000000000000000',\n    scalarMult(privateKey, publicKey) {\n        const u = decodeUCoordinate(publicKey);\n        const p = decodeScalar25519(privateKey);\n        const pu = montgomeryLadder(u, p);\n        if (pu === _0n)\n            throw new Error('Invalid private or public key received');\n        return encodeUCoordinate(pu);\n    },\n    scalarMultBase(privateKey) {\n        return curve25519.scalarMult(privateKey, curve25519.BASE_POINT_U);\n    },\n};\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    getExtendedPublicKey,\n    mod,\n    invert,\n    TORSION_SUBGROUP: [\n        '0100000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac037a',\n        '0000000000000000000000000000000000000000000000000000000000000080',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc05',\n        'ecffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f',\n        '26e8958fc2b227b045c3f489f2ef98f0d5dfac05d3c63339b13802886d53fc85',\n        '0000000000000000000000000000000000000000000000000000000000000000',\n        'c7176a703d4dd84fba3c0b760d10670f2a2053fa2c39ccc64ec7fd7792ac03fa',\n    ],\n    hashToPrivateScalar: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        return mod(bytesToNumberLE(hash), CURVE.l - _1n) + _1n;\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return new Uint8Array(randomBytes(bytesLength).buffer);\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.randomBytes(32);\n    },\n    sha512: async (...messages) => {\n        const message = concatBytes(...messages);\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-512', message.buffer);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            return Uint8Array.from(crypto.node.createHash('sha512').update(message).digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha512 function\");\n        }\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point.equals(Point.BASE) ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_2n);\n        return cached;\n    },\n    sha512Sync: undefined,\n};\nObject.defineProperties(utils, {\n    sha512Sync: {\n        configurable: false,\n        get() {\n            return _sha512Sync;\n        },\n        set(val) {\n            if (!_sha512Sync)\n                _sha512Sync = val;\n        },\n    },\n});\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n// Choice: a ? b : c\nconst Chi = (a, b, c) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = new Uint32Array([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = new Uint32Array([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = new Uint32Array(64);\nclass SHA256 extends SHA2 {\n    constructor() {\n        super(64, 32, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = IV[0] | 0;\n        this.B = IV[1] | 0;\n        this.C = IV[2] | 0;\n        this.D = IV[3] | 0;\n        this.E = IV[4] | 0;\n        this.F = IV[5] | 0;\n        this.G = IV[6] | 0;\n        this.H = IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        SHA256_W.fill(0);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        this.buffer.fill(0);\n    }\n}\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = wrapConstructor(() => new SHA256());\n","import { Struct, Infer, Result, Context, Describe } from './struct'\nimport { Failure } from './error'\n\n/**\n * Check if a value is an iterator.\n */\n\nfunction isIterable<T>(x: unknown): x is Iterable<T> {\n  return isObject(x) && typeof x[Symbol.iterator] === 'function'\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isObject(x: unknown): x is object {\n  return typeof x === 'object' && x != null\n}\n\n/**\n * Check if a value is a plain object.\n */\n\nexport function isPlainObject(x: unknown): x is { [key: string]: any } {\n  if (Object.prototype.toString.call(x) !== '[object Object]') {\n    return false\n  }\n\n  const prototype = Object.getPrototypeOf(x)\n  return prototype === null || prototype === Object.prototype\n}\n\n/**\n * Return a value as a printable string.\n */\n\nexport function print(value: any): string {\n  return typeof value === 'string' ? JSON.stringify(value) : `${value}`\n}\n\n/**\n * Shifts (removes and returns) the first value from the `input` iterator.\n * Like `Array.prototype.shift()` but for an `Iterator`.\n */\n\nexport function shiftIterator<T>(input: Iterator<T>): T | undefined {\n  const { done, value } = input.next()\n  return done ? undefined : value\n}\n\n/**\n * Convert a single validation result to a failure.\n */\n\nexport function toFailure<T, S>(\n  result: string | boolean | Partial<Failure>,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): Failure | undefined {\n  if (result === true) {\n    return\n  } else if (result === false) {\n    result = {}\n  } else if (typeof result === 'string') {\n    result = { message: result }\n  }\n\n  const { path, branch } = context\n  const { type } = struct\n  const {\n    refinement,\n    message = `Expected a value of type \\`${type}\\`${\n      refinement ? ` with refinement \\`${refinement}\\`` : ''\n    }, but received: \\`${print(value)}\\``,\n  } = result\n\n  return {\n    value,\n    type,\n    refinement,\n    key: path[path.length - 1],\n    path,\n    branch,\n    ...result,\n    message,\n  }\n}\n\n/**\n * Convert a validation result to an iterable of failures.\n */\n\nexport function* toFailures<T, S>(\n  result: Result,\n  context: Context,\n  struct: Struct<T, S>,\n  value: any\n): IterableIterator<Failure> {\n  if (!isIterable(result)) {\n    result = [result]\n  }\n\n  for (const r of result) {\n    const failure = toFailure(r, context, struct, value)\n\n    if (failure) {\n      yield failure\n    }\n  }\n}\n\n/**\n * Check a value against a struct, traversing deeply into nested values, and\n * returning an iterator of failures or success.\n */\n\nexport function* run<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    path?: any[]\n    branch?: any[]\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): IterableIterator<[Failure, undefined] | [undefined, T]> {\n  const { path = [], branch = [value], coerce = false, mask = false } = options\n  const ctx: Context = { path, branch }\n\n  if (coerce) {\n    value = struct.coercer(value, ctx)\n\n    if (\n      mask &&\n      struct.type !== 'type' &&\n      isObject(struct.schema) &&\n      isObject(value) &&\n      !Array.isArray(value)\n    ) {\n      for (const key in value) {\n        if (struct.schema[key] === undefined) {\n          delete value[key]\n        }\n      }\n    }\n  }\n\n  let valid = true\n\n  for (const failure of struct.validator(value, ctx)) {\n    valid = false\n    yield [failure, undefined]\n  }\n\n  for (let [k, v, s] of struct.entries(value, ctx)) {\n    const ts = run(v, s as Struct, {\n      path: k === undefined ? path : [...path, k],\n      branch: k === undefined ? branch : [...branch, v],\n      coerce,\n      mask,\n    })\n\n    for (const t of ts) {\n      if (t[0]) {\n        valid = false\n        yield [t[0], undefined]\n      } else if (coerce) {\n        v = t[1]\n\n        if (k === undefined) {\n          value = v\n        } else if (value instanceof Map) {\n          value.set(k, v)\n        } else if (value instanceof Set) {\n          value.add(v)\n        } else if (isObject(value)) {\n          value[k] = v\n        }\n      }\n    }\n  }\n\n  if (valid) {\n    for (const failure of struct.refiner(value as T, ctx)) {\n      valid = false\n      yield [failure, undefined]\n    }\n  }\n\n  if (valid) {\n    yield [undefined, value as T]\n  }\n}\n\n/**\n * Assign properties from one type to another, overwriting existing.\n */\n\nexport type Assign<T, U> = Simplify<U & Omit<T, keyof U>>\n\n/**\n * A schema for enum structs.\n */\n\nexport type EnumSchema<T extends string | number> = { [K in T]: K }\n\n/**\n * Check if a type is an exact match.\n */\n\nexport type IsMatch<T, G> = T extends G ? (G extends T ? T : never) : never\n\n/**\n * Check if a type is a record type.\n */\n\nexport type IsRecord<T> = T extends object\n  ? string extends keyof T\n    ? T\n    : never\n  : never\n/**\n * Check if a type is a tuple.\n */\n\nexport type IsTuple<T> = T extends [any]\n  ? T\n  : T extends [any, any]\n  ? T\n  : T extends [any, any, any]\n  ? T\n  : T extends [any, any, any, any]\n  ? T\n  : T extends [any, any, any, any, any]\n  ? T\n  : never\n\n/**\n * Check if a type is a union.\n */\n\nexport type IsUnion<T, U extends T = T> = (\n  T extends any ? (U extends T ? false : true) : false\n) extends false\n  ? never\n  : T\n\n/**\n * A schema for object structs.\n */\n\nexport type ObjectSchema = Record<string, Struct<any, any>>\n\n/**\n * Infer a type from an object struct schema.\n */\n\nexport type ObjectType<S extends ObjectSchema> = Simplify<\n  Optionalize<{ [K in keyof S]: Infer<S[K]> }>\n>\n\n/**\n * Omit properties from a type that extend from a specific type.\n */\n\nexport type OmitBy<T, V> = Omit<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Normalize properties of a type that allow `undefined` to make them optional.\n */\n\nexport type Optionalize<S extends object> = OmitBy<S, undefined> &\n  Partial<PickBy<S, undefined>>\n\n/**\n * Transform an object schema type to represent a partial.\n */\n\nexport type PartialObjectSchema<S extends ObjectSchema> = {\n  [K in keyof S]: Struct<Infer<S[K]> | undefined>\n}\n\n/**\n * Pick properties from a type that extend from a specific type.\n */\n\nexport type PickBy<T, V> = Pick<\n  T,\n  { [K in keyof T]: V extends Extract<T[K], V> ? K : never }[keyof T]\n>\n\n/**\n * Simplifies a type definition to its most basic representation.\n */\n\nexport type Simplify<T> = T extends any[] | Date\n  ? T\n  : { [K in keyof T]: T[K] } & {}\n\nexport type If<B extends Boolean, Then, Else> = B extends true ? Then : Else\n\n/**\n * A schema for any type of struct.\n */\n\nexport type StructSchema<T> = [T] extends [string]\n  ? [T] extends [IsMatch<T, string>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [number]\n  ? [T] extends [IsMatch<T, number>]\n    ? null\n    : [T] extends [IsUnion<T>]\n    ? EnumSchema<T>\n    : T\n  : [T] extends [boolean]\n  ? [T] extends [IsMatch<T, boolean>]\n    ? null\n    : T\n  : T extends\n      | bigint\n      | symbol\n      | undefined\n      | null\n      | Function\n      | Date\n      | Error\n      | RegExp\n      | Map<any, any>\n      | WeakMap<any, any>\n      | Set<any>\n      | WeakSet<any>\n      | Promise<any>\n  ? null\n  : T extends Array<infer E>\n  ? T extends IsTuple<T>\n    ? null\n    : Struct<E>\n  : T extends object\n  ? T extends IsRecord<T>\n    ? null\n    : { [K in keyof T]: Describe<T[K]> }\n  : null\n\n/**\n * A schema for tuple structs.\n */\n\nexport type TupleSchema<T> = { [K in keyof T]: Struct<T[K]> }\n","/**\n * A `StructFailure` represents a single specific failure in validation.\n */\n\nexport type Failure = {\n  value: any\n  key: any\n  type: string\n  refinement: string | undefined\n  message: string\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * `StructError` objects are thrown (or returned) when validation fails.\n *\n * Validation logic is design to exit early for maximum performance. The error\n * represents the first error encountered during validation. For more detail,\n * the `error.failures` property is a generator function that can be run to\n * continue validation and receive all the failures in the data.\n */\n\nexport class StructError extends TypeError {\n  value: any\n  key!: any\n  type!: string\n  refinement!: string | undefined\n  path!: Array<any>\n  branch!: Array<any>\n  failures: () => Array<Failure>;\n  [x: string]: any\n\n  constructor(failure: Failure, failures: () => Generator<Failure>) {\n    let cached: Array<Failure> | undefined\n    const { message, ...rest } = failure\n    const { path } = failure\n    const msg =\n      path.length === 0 ? message : `At path: ${path.join('.')} -- ${message}`\n    super(msg)\n    Object.assign(this, rest)\n    this.name = this.constructor.name\n    this.failures = () => {\n      return (cached ??= [failure, ...failures()])\n    }\n  }\n}\n","import { toFailures, shiftIterator, StructSchema, run } from './utils'\nimport { StructError, Failure } from './error'\n\n/**\n * `Struct` objects encapsulate the validation logic for a specific type of\n * values. Once constructed, you use the `assert`, `is` or `validate` helpers to\n * validate unknown input data against the struct.\n */\n\nexport class Struct<T = unknown, S = unknown> {\n  readonly TYPE!: T\n  type: string\n  schema: S\n  coercer: (value: unknown, context: Context) => unknown\n  validator: (value: unknown, context: Context) => Iterable<Failure>\n  refiner: (value: T, context: Context) => Iterable<Failure>\n  entries: (\n    value: unknown,\n    context: Context\n  ) => Iterable<[string | number, unknown, Struct<any> | Struct<never>]>\n\n  constructor(props: {\n    type: string\n    schema: S\n    coercer?: Coercer\n    validator?: Validator\n    refiner?: Refiner<T>\n    entries?: Struct<T, S>['entries']\n  }) {\n    const {\n      type,\n      schema,\n      validator,\n      refiner,\n      coercer = (value: unknown) => value,\n      entries = function* () {},\n    } = props\n\n    this.type = type\n    this.schema = schema\n    this.entries = entries\n    this.coercer = coercer\n\n    if (validator) {\n      this.validator = (value, context) => {\n        const result = validator(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.validator = () => []\n    }\n\n    if (refiner) {\n      this.refiner = (value, context) => {\n        const result = refiner(value, context)\n        return toFailures(result, context, this, value)\n      }\n    } else {\n      this.refiner = () => []\n    }\n  }\n\n  /**\n   * Assert that a value passes the struct's validation, throwing if it doesn't.\n   */\n\n  assert(value: unknown): asserts value is T {\n    return assert(value, this)\n  }\n\n  /**\n   * Create a value with the struct's coercion logic, then validate it.\n   */\n\n  create(value: unknown): T {\n    return create(value, this)\n  }\n\n  /**\n   * Check if a value passes the struct's validation.\n   */\n\n  is(value: unknown): value is T {\n    return is(value, this)\n  }\n\n  /**\n   * Mask a value, coercing and validating it, but returning only the subset of\n   * properties defined by the struct's schema.\n   */\n\n  mask(value: unknown): T {\n    return mask(value, this)\n  }\n\n  /**\n   * Validate a value with the struct's validation logic, returning a tuple\n   * representing the result.\n   *\n   * You may optionally pass `true` for the `withCoercion` argument to coerce\n   * the value before attempting to validate it. If you do, the result will\n   * contain the coerced result when successful.\n   */\n\n  validate(\n    value: unknown,\n    options: {\n      coerce?: boolean\n    } = {}\n  ): [StructError, undefined] | [undefined, T] {\n    return validate(value, this, options)\n  }\n}\n\n/**\n * Assert that a value passes a struct, throwing if it doesn't.\n */\n\nexport function assert<T, S>(\n  value: unknown,\n  struct: Struct<T, S>\n): asserts value is T {\n  const result = validate(value, struct)\n\n  if (result[0]) {\n    throw result[0]\n  }\n}\n\n/**\n * Create a value with the coercion logic of struct and validate it.\n */\n\nexport function create<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Mask a value, returning only the subset of properties defined by a struct.\n */\n\nexport function mask<T, S>(value: unknown, struct: Struct<T, S>): T {\n  const result = validate(value, struct, { coerce: true, mask: true })\n\n  if (result[0]) {\n    throw result[0]\n  } else {\n    return result[1]\n  }\n}\n\n/**\n * Check if a value passes a struct.\n */\n\nexport function is<T, S>(value: unknown, struct: Struct<T, S>): value is T {\n  const result = validate(value, struct)\n  return !result[0]\n}\n\n/**\n * Validate a value against a struct, returning an error if invalid, or the\n * value (with potential coercion) if valid.\n */\n\nexport function validate<T, S>(\n  value: unknown,\n  struct: Struct<T, S>,\n  options: {\n    coerce?: boolean\n    mask?: boolean\n  } = {}\n): [StructError, undefined] | [undefined, T] {\n  const tuples = run(value, struct, options)\n  const tuple = shiftIterator(tuples)!\n\n  if (tuple[0]) {\n    const error = new StructError(tuple[0], function* () {\n      for (const t of tuples) {\n        if (t[0]) {\n          yield t[0]\n        }\n      }\n    })\n\n    return [error, undefined]\n  } else {\n    const v = tuple[1]\n    return [undefined, v]\n  }\n}\n\n/**\n * A `Context` contains information about the current location of the\n * validation inside the initial input value.\n */\n\nexport type Context = {\n  branch: Array<any>\n  path: Array<any>\n}\n\n/**\n * A type utility to extract the type from a `Struct` class.\n */\n\nexport type Infer<T extends Struct<any, any>> = T['TYPE']\n\n/**\n * A type utility to describe that a struct represents a TypeScript type.\n */\n\nexport type Describe<T> = Struct<T, StructSchema<T>>\n\n/**\n * A `Result` is returned from validation functions.\n */\n\nexport type Result =\n  | boolean\n  | string\n  | Partial<Failure>\n  | Iterable<boolean | string | Partial<Failure>>\n\n/**\n * A `Coercer` takes an unknown value and optionally coerces it.\n */\n\nexport type Coercer<T = unknown> = (value: T, context: Context) => unknown\n\n/**\n * A `Validator` takes an unknown value and validates it.\n */\n\nexport type Validator = (value: unknown, context: Context) => Result\n\n/**\n * A `Refiner` takes a value of a known type and validates it against a further\n * constraint.\n */\n\nexport type Refiner<T> = (value: T, context: Context) => Result\n","import { Struct, Context, Validator } from '../struct'\nimport { object, optional } from './types'\nimport { ObjectSchema, Assign, ObjectType, PartialObjectSchema } from '../utils'\n\n/**\n * Create a new struct that combines the properties properties from multiple\n * object structs.\n *\n * Like JavaScript's `Object.assign` utility.\n */\n\nexport function assign<A extends ObjectSchema, B extends ObjectSchema>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>\n): Struct<ObjectType<Assign<A, B>>, Assign<A, B>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>\n): Struct<ObjectType<Assign<Assign<A, B>, C>>, Assign<Assign<A, B>, C>>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>\n): Struct<\n  ObjectType<Assign<Assign<Assign<A, B>, C>, D>>,\n  Assign<Assign<Assign<A, B>, C>, D>\n>\nexport function assign<\n  A extends ObjectSchema,\n  B extends ObjectSchema,\n  C extends ObjectSchema,\n  D extends ObjectSchema,\n  E extends ObjectSchema\n>(\n  A: Struct<ObjectType<A>, A>,\n  B: Struct<ObjectType<B>, B>,\n  C: Struct<ObjectType<C>, C>,\n  D: Struct<ObjectType<D>, D>,\n  E: Struct<ObjectType<E>, E>\n): Struct<\n  ObjectType<Assign<Assign<Assign<Assign<A, B>, C>, D>, E>>,\n  Assign<Assign<Assign<Assign<A, B>, C>, D>, E>\n>\nexport function assign(...Structs: Struct<any>[]): any {\n  const schemas = Structs.map((s) => s.schema)\n  const schema = Object.assign({}, ...schemas)\n  return object(schema)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n */\n\nexport function define<T>(name: string, validator: Validator): Struct<T, null> {\n  return new Struct({ type: name, schema: null, validator })\n}\n\n/**\n * Create a new struct based on an existing struct, but the value is allowed to\n * be `undefined`. `log` will be called if the value is not `undefined`.\n */\n\nexport function deprecated<T>(\n  struct: Struct<T>,\n  log: (value: unknown, ctx: Context) => void\n): Struct<T> {\n  return new Struct({\n    ...struct,\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n    validator(value, ctx) {\n      if (value === undefined) {\n        return true\n      } else {\n        log(value, ctx)\n        return struct.validator(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Create a struct with dynamic validation logic.\n *\n * The callback will receive the value currently being validated, and must\n * return a struct object to validate it with. This can be useful to model\n * validation logic that changes based on its input.\n */\n\nexport function dynamic<T>(\n  fn: (value: unknown, ctx: Context) => Struct<T, any>\n): Struct<T, null> {\n  return new Struct({\n    type: 'dynamic',\n    schema: null,\n    *entries(value, ctx) {\n      const struct = fn(value, ctx)\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      const struct = fn(value, ctx)\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a struct with lazily evaluated validation logic.\n *\n * The first time validation is run with the struct, the callback will be called\n * and must return a struct object to use. This is useful for cases where you\n * want to have self-referential structs for nested data structures to avoid a\n * circular definition problem.\n */\n\nexport function lazy<T>(fn: () => Struct<T, any>): Struct<T, null> {\n  let struct: Struct<T, any> | undefined\n  return new Struct({\n    type: 'lazy',\n    schema: null,\n    *entries(value, ctx) {\n      struct ??= fn()\n      yield* struct.entries(value, ctx)\n    },\n    validator(value, ctx) {\n      struct ??= fn()\n      return struct.validator(value, ctx)\n    },\n    coercer(value, ctx) {\n      struct ??= fn()\n      return struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Create a new struct based on an existing object struct, but excluding\n * specific properties.\n *\n * Like TypeScript's `Omit` utility.\n */\n\nexport function omit<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Omit<S, K>>, Omit<S, K>> {\n  const { schema } = struct\n  const subschema: any = { ...schema }\n\n  for (const key of keys) {\n    delete subschema[key]\n  }\n\n  return object(subschema as Omit<S, K>)\n}\n\n/**\n * Create a new struct based on an existing object struct, but with all of its\n * properties allowed to be `undefined`.\n *\n * Like TypeScript's `Partial` utility.\n */\n\nexport function partial<S extends ObjectSchema>(\n  struct: Struct<ObjectType<S>, S> | S\n): Struct<ObjectType<PartialObjectSchema<S>>, PartialObjectSchema<S>> {\n  const schema: any =\n    struct instanceof Struct ? { ...struct.schema } : { ...struct }\n\n  for (const key in schema) {\n    schema[key] = optional(schema[key])\n  }\n\n  return object(schema) as any\n}\n\n/**\n * Create a new struct based on an existing object struct, but only including\n * specific properties.\n *\n * Like TypeScript's `Pick` utility.\n */\n\nexport function pick<S extends ObjectSchema, K extends keyof S>(\n  struct: Struct<ObjectType<S>, S>,\n  keys: K[]\n): Struct<ObjectType<Pick<S, K>>, Pick<S, K>> {\n  const { schema } = struct\n  const subschema: any = {}\n\n  for (const key of keys) {\n    subschema[key] = schema[key]\n  }\n\n  return object(subschema as Pick<S, K>)\n}\n\n/**\n * Define a new struct type with a custom validation function.\n *\n * @deprecated This function has been renamed to `define`.\n */\n\nexport function struct<T>(name: string, validator: Validator): Struct<T, null> {\n  console.warn(\n    'superstruct@0.11 - The `struct` helper has been renamed to `define`.'\n  )\n\n  return define(name, validator)\n}\n","import { Infer, Struct } from '../struct'\nimport { define } from './utilities'\nimport {\n  TupleSchema,\n  ObjectSchema,\n  ObjectType,\n  print,\n  run,\n  isObject,\n} from '../utils'\n\n/**\n * Ensure that any value passes validation.\n */\n\nexport function any(): Struct<any, null> {\n  return define('any', () => true)\n}\n\n/**\n * Ensure that a value is an array and that its elements are of a specific type.\n *\n * Note: If you omit the element struct, the arrays elements will not be\n * iterated at all. This can be helpful for cases where performance is critical,\n * and it is preferred to using `array(any())`.\n */\n\nexport function array<T extends Struct<any>>(Element: T): Struct<Infer<T>[], T>\nexport function array(): Struct<unknown[], undefined>\nexport function array<T extends Struct<any>>(Element?: T): any {\n  return new Struct({\n    type: 'array',\n    schema: Element,\n    *entries(value) {\n      if (Element && Array.isArray(value)) {\n        for (const [i, v] of value.entries()) {\n          yield [i, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return Array.isArray(value) ? value.slice() : value\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array value, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a boolean.\n */\n\nexport function boolean(): Struct<boolean, null> {\n  return define('boolean', (value) => {\n    return typeof value === 'boolean'\n  })\n}\n\n/**\n * Ensure that a value is a valid `Date`.\n *\n * Note: this also ensures that the value is *not* an invalid `Date` object,\n * which can occur when parsing a date fails but still returns a `Date`.\n */\n\nexport function date(): Struct<Date, null> {\n  return define('date', (value) => {\n    return (\n      (value instanceof Date && !isNaN(value.getTime())) ||\n      `Expected a valid \\`Date\\` object, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is one of a set of potential values.\n *\n * Note: after creating the struct, you can access the definition of the\n * potential values as `struct.schema`.\n */\n\nexport function enums<T extends number>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends string>(\n  values: readonly T[]\n): Struct<T, { [K in T[][number]]: K }>\nexport function enums<T extends number | string>(values: readonly T[]): any {\n  const schema: any = {}\n  const description = values.map((v) => print(v)).join()\n\n  for (const key of values) {\n    schema[key] = key\n  }\n\n  return new Struct({\n    type: 'enums',\n    schema,\n    validator(value) {\n      return (\n        values.includes(value as any) ||\n        `Expected one of \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a function.\n */\n\nexport function func(): Struct<Function, null> {\n  return define('func', (value) => {\n    return (\n      typeof value === 'function' ||\n      `Expected a function, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an instance of a specific class.\n */\n\nexport function instance<T extends { new (...args: any): any }>(\n  Class: T\n): Struct<InstanceType<T>, null> {\n  return define('instance', (value) => {\n    return (\n      value instanceof Class ||\n      `Expected a \\`${Class.name}\\` instance, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an integer.\n */\n\nexport function integer(): Struct<number, null> {\n  return define('integer', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value) && Number.isInteger(value)) ||\n      `Expected an integer, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value matches all of a set of types.\n */\n\nexport function intersection<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function intersection<A, B>(\n  Structs: TupleSchema<[A, B]>\n): Struct<A & B, null>\nexport function intersection<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A & B & C, null>\nexport function intersection<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A & B & C & D, null>\nexport function intersection<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A & B & C & D & E, null>\nexport function intersection<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A & B & C & D & E & F, null>\nexport function intersection<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A & B & C & D & E & F & G, null>\nexport function intersection<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A & B & C & D & E & F & G & H, null>\nexport function intersection<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A & B & C & D & E & F & G & H & I, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A & B & C & D & E & F & G & H & I & J, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P, null>\nexport function intersection<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A & B & C & D & E & F & G & H & I & J & K & L & M & N & O & P & Q,\n  null\n>\nexport function intersection(Structs: Array<Struct<any, any>>): any {\n  return new Struct({\n    type: 'intersection',\n    schema: null,\n    *entries(value, ctx) {\n      for (const S of Structs) {\n        yield* S.entries(value, ctx)\n      }\n    },\n    *validator(value, ctx) {\n      for (const S of Structs) {\n        yield* S.validator(value, ctx)\n      }\n    },\n    *refiner(value, ctx) {\n      for (const S of Structs) {\n        yield* S.refiner(value, ctx)\n      }\n    },\n  })\n}\n\n/**\n * Ensure that a value is an exact value, using `===` for comparison.\n */\n\nexport function literal<T extends boolean>(constant: T): Struct<T, T>\nexport function literal<T extends number>(constant: T): Struct<T, T>\nexport function literal<T extends string>(constant: T): Struct<T, T>\nexport function literal<T>(constant: T): Struct<T, null>\nexport function literal<T>(constant: T): any {\n  const description = print(constant)\n  const t = typeof constant\n  return new Struct({\n    type: 'literal',\n    schema:\n      t === 'string' || t === 'number' || t === 'boolean' ? constant : null,\n    validator(value) {\n      return (\n        value === constant ||\n        `Expected the literal \\`${description}\\`, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `Map` object, and that its keys and values are of\n * specific types.\n */\n\nexport function map(): Struct<Map<unknown, unknown>, null>\nexport function map<K, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Map<K, V>, null>\nexport function map<K, V>(Key?: Struct<K>, Value?: Struct<V>): any {\n  return new Struct({\n    type: 'map',\n    schema: null,\n    *entries(value) {\n      if (Key && Value && value instanceof Map) {\n        for (const [k, v] of value.entries()) {\n          yield [k as string, k, Key]\n          yield [k as string, v, Value]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Map ? new Map(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Map ||\n        `Expected a \\`Map\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that no value ever passes validation.\n */\n\nexport function never(): Struct<never, null> {\n  return define('never', () => false)\n}\n\n/**\n * Augment an existing struct to allow `null` values.\n */\n\nexport function nullable<T, S>(struct: Struct<T, S>): Struct<T | null, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) => value === null || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === null || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is a number.\n */\n\nexport function number(): Struct<number, null> {\n  return define('number', (value) => {\n    return (\n      (typeof value === 'number' && !isNaN(value)) ||\n      `Expected a number, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is an object, that is has a known set of properties,\n * and that its properties are of specific types.\n *\n * Note: Unrecognized properties will fail validation.\n */\n\nexport function object(): Struct<Record<string, unknown>, null>\nexport function object<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S>\nexport function object<S extends ObjectSchema>(schema?: S): any {\n  const knowns = schema ? Object.keys(schema) : []\n  const Never = never()\n  return new Struct({\n    type: 'object',\n    schema: schema ? schema : null,\n    *entries(value) {\n      if (schema && isObject(value)) {\n        const unknowns = new Set(Object.keys(value))\n\n        for (const key of knowns) {\n          unknowns.delete(key)\n          yield [key, value[key], schema[key]]\n        }\n\n        for (const key of unknowns) {\n          yield [key, value[key], Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n    coercer(value) {\n      return isObject(value) ? { ...value } : value\n    },\n  })\n}\n\n/**\n * Augment a struct to allow `undefined` values.\n */\n\nexport function optional<T, S>(struct: Struct<T, S>): Struct<T | undefined, S> {\n  return new Struct({\n    ...struct,\n    validator: (value, ctx) =>\n      value === undefined || struct.validator(value, ctx),\n    refiner: (value, ctx) => value === undefined || struct.refiner(value, ctx),\n  })\n}\n\n/**\n * Ensure that a value is an object with keys and values of specific types, but\n * without ensuring any specific shape of properties.\n *\n * Like TypeScript's `Record` utility.\n */\n\nexport function record<K extends string, V>(\n  Key: Struct<K>,\n  Value: Struct<V>\n): Struct<Record<K, V>, null> {\n  return new Struct({\n    type: 'record',\n    schema: null,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k in value) {\n          const v = value[k]\n          yield [k, k, Key]\n          yield [k, v, Value]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a `RegExp`.\n *\n * Note: this does not test the value against the regular expression! For that\n * you need to use the `pattern()` refinement.\n */\n\nexport function regexp(): Struct<RegExp, null> {\n  return define('regexp', (value) => {\n    return value instanceof RegExp\n  })\n}\n\n/**\n * Ensure that a value is a `Set` object, and that its elements are of a\n * specific type.\n */\n\nexport function set(): Struct<Set<unknown>, null>\nexport function set<T>(Element: Struct<T>): Struct<Set<T>, null>\nexport function set<T>(Element?: Struct<T>): any {\n  return new Struct({\n    type: 'set',\n    schema: null,\n    *entries(value) {\n      if (Element && value instanceof Set) {\n        for (const v of value) {\n          yield [v as string, v, Element]\n        }\n      }\n    },\n    coercer(value) {\n      return value instanceof Set ? new Set(value) : value\n    },\n    validator(value) {\n      return (\n        value instanceof Set ||\n        `Expected a \\`Set\\` object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value is a string.\n */\n\nexport function string(): Struct<string, null> {\n  return define('string', (value) => {\n    return (\n      typeof value === 'string' ||\n      `Expected a string, but received: ${print(value)}`\n    )\n  })\n}\n\n/**\n * Ensure that a value is a tuple of a specific length, and that each of its\n * elements is of a specific type.\n */\n\nexport function tuple<A>(Structs: TupleSchema<[A]>): Struct<[A], null>\nexport function tuple<A, B>(Structs: TupleSchema<[A, B]>): Struct<[A, B], null>\nexport function tuple<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<[A, B, C], null>\nexport function tuple<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<[A, B, C, D], null>\nexport function tuple<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<[A, B, C, D, E], null>\nexport function tuple<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<[A, B, C, D, E, F], null>\nexport function tuple<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<[A, B, C, D, E, F, G], null>\nexport function tuple<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<[A, B, C, D, E, F, G, H], null>\nexport function tuple<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<[A, B, C, D, E, F, G, H, I], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<[A, B, C, D, E, F, G, H, I, J], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P], null>\nexport function tuple<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q], null>\nexport function tuple(Elements: Struct<any>[]): any {\n  const Never = never()\n\n  return new Struct({\n    type: 'tuple',\n    schema: null,\n    *entries(value) {\n      if (Array.isArray(value)) {\n        const length = Math.max(Elements.length, value.length)\n\n        for (let i = 0; i < length; i++) {\n          yield [i, value[i], Elements[i] || Never]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        Array.isArray(value) ||\n        `Expected an array, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value has a set of known properties of specific types.\n *\n * Note: Unrecognized properties are allowed and untouched. This is similar to\n * how TypeScript's structural typing works.\n */\n\nexport function type<S extends ObjectSchema>(\n  schema: S\n): Struct<ObjectType<S>, S> {\n  const keys = Object.keys(schema)\n  return new Struct({\n    type: 'type',\n    schema,\n    *entries(value) {\n      if (isObject(value)) {\n        for (const k of keys) {\n          yield [k, value[k], schema[k]]\n        }\n      }\n    },\n    validator(value) {\n      return (\n        isObject(value) || `Expected an object, but received: ${print(value)}`\n      )\n    },\n  })\n}\n\n/**\n * Ensure that a value matches one of a set of types.\n */\n\nexport function union<A>(Structs: TupleSchema<[A]>): Struct<A, null>\nexport function union<A, B>(Structs: TupleSchema<[A, B]>): Struct<A | B, null>\nexport function union<A, B, C>(\n  Structs: TupleSchema<[A, B, C]>\n): Struct<A | B | C, null>\nexport function union<A, B, C, D>(\n  Structs: TupleSchema<[A, B, C, D]>\n): Struct<A | B | C | D, null>\nexport function union<A, B, C, D, E>(\n  Structs: TupleSchema<[A, B, C, D, E]>\n): Struct<A | B | C | D | E, null>\nexport function union<A, B, C, D, E, F>(\n  Structs: TupleSchema<[A, B, C, D, E, F]>\n): Struct<A | B | C | D | E | F, null>\nexport function union<A, B, C, D, E, F, G>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G]>\n): Struct<A | B | C | D | E | F | G, null>\nexport function union<A, B, C, D, E, F, G, H>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H]>\n): Struct<A | B | C | D | E | F | G | H, null>\nexport function union<A, B, C, D, E, F, G, H, I>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I]>\n): Struct<A | B | C | D | E | F | G | H | I, null>\nexport function union<A, B, C, D, E, F, G, H, I, J>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J]>\n): Struct<A | B | C | D | E | F | G | H | I | J, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P]>\n): Struct<A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P, null>\nexport function union<A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q>(\n  Structs: TupleSchema<[A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q]>\n): Struct<\n  A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q,\n  null\n>\nexport function union(Structs: Struct<any>[]): any {\n  const description = Structs.map((s) => s.type).join(' | ')\n  return new Struct({\n    type: 'union',\n    schema: null,\n    validator(value, ctx) {\n      const failures = []\n\n      for (const S of Structs) {\n        const [...tuples] = run(value, S, ctx)\n        const [first] = tuples\n\n        if (!first[0]) {\n          return []\n        } else {\n          for (const [failure] of tuples) {\n            if (failure) {\n              failures.push(failure)\n            }\n          }\n        }\n      }\n\n      return [\n        `Expected the value to satisfy a union of \\`${description}\\`, but received: ${print(\n          value\n        )}`,\n        ...failures,\n      ]\n    },\n  })\n}\n\n/**\n * Ensure that any value passes validation, without widening its type to `any`.\n */\n\nexport function unknown(): Struct<unknown, null> {\n  return define('unknown', () => true)\n}\n","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _toArray(arr) {\n  return arrayWithHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableRest();\n}","import { Struct, is, Coercer } from '../struct'\nimport { isPlainObject } from '../utils'\nimport { string, unknown } from './types'\n\n/**\n * Augment a `Struct` to add an additional coercion step to its input.\n *\n * This allows you to transform input data before validating it, to increase the\n * likelihood that it passes validation—for example for default values, parsing\n * different formats, etc.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function coerce<T, S, C>(\n  struct: Struct<T, S>,\n  condition: Struct<C, any>,\n  coercer: Coercer<C>\n): Struct<T, S> {\n  return new Struct({\n    ...struct,\n    coercer: (value, ctx) => {\n      return is(value, condition)\n        ? struct.coercer(coercer(value, ctx), ctx)\n        : struct.coercer(value, ctx)\n    },\n  })\n}\n\n/**\n * Augment a struct to replace `undefined` values with a default.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function defaulted<T, S>(\n  struct: Struct<T, S>,\n  fallback: any,\n  options: {\n    strict?: boolean\n  } = {}\n): Struct<T, S> {\n  return coerce(struct, unknown(), (x) => {\n    const f = typeof fallback === 'function' ? fallback() : fallback\n\n    if (x === undefined) {\n      return f\n    }\n\n    if (!options.strict && isPlainObject(x) && isPlainObject(f)) {\n      const ret = { ...x }\n      let changed = false\n\n      for (const key in f) {\n        if (ret[key] === undefined) {\n          ret[key] = f[key]\n          changed = true\n        }\n      }\n\n      if (changed) {\n        return ret\n      }\n    }\n\n    return x\n  })\n}\n\n/**\n * Augment a struct to trim string inputs.\n *\n * Note: You must use `create(value, Struct)` on the value to have the coercion\n * take effect! Using simply `assert()` or `is()` will not use coercion.\n */\n\nexport function trimmed<T, S>(struct: Struct<T, S>): Struct<T, S> {\n  return coerce(struct, string(), (x) => x.trim())\n}\n","import assert from './_assert.js';\nimport u64 from './_u64.js';\nimport { Hash, u32, toBytes, wrapConstructor, wrapConstructorWithOpts, } from './utils.js';\n// Various per round constants calculations\nconst [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _7n = BigInt(7);\nconst _256n = BigInt(256);\nconst _0x71n = BigInt(0x71);\nfor (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {\n    // Pi\n    [x, y] = [y, (2 * x + 3 * y) % 5];\n    SHA3_PI.push(2 * (5 * y + x));\n    // Rotational\n    SHA3_ROTL.push((((round + 1) * (round + 2)) / 2) % 64);\n    // Iota\n    let t = _0n;\n    for (let j = 0; j < 7; j++) {\n        R = ((R << _1n) ^ ((R >> _7n) * _0x71n)) % _256n;\n        if (R & _2n)\n            t ^= _1n << ((_1n << BigInt(j)) - _1n);\n    }\n    _SHA3_IOTA.push(t);\n}\nconst [SHA3_IOTA_H, SHA3_IOTA_L] = u64.split(_SHA3_IOTA, true);\n// Left rotation (without 0, 32, 64)\nconst rotlH = (h, l, s) => s > 32 ? u64.rotlBH(h, l, s) : u64.rotlSH(h, l, s);\nconst rotlL = (h, l, s) => s > 32 ? u64.rotlBL(h, l, s) : u64.rotlSL(h, l, s);\n// Same as keccakf1600, but allows to skip some rounds\nexport function keccakP(s, rounds = 24) {\n    const B = new Uint32Array(5 * 2);\n    // NOTE: all indices are x2 since we store state as u32 instead of u64 (bigints to slow in js)\n    for (let round = 24 - rounds; round < 24; round++) {\n        // Theta θ\n        for (let x = 0; x < 10; x++)\n            B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];\n        for (let x = 0; x < 10; x += 2) {\n            const idx1 = (x + 8) % 10;\n            const idx0 = (x + 2) % 10;\n            const B0 = B[idx0];\n            const B1 = B[idx0 + 1];\n            const Th = rotlH(B0, B1, 1) ^ B[idx1];\n            const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];\n            for (let y = 0; y < 50; y += 10) {\n                s[x + y] ^= Th;\n                s[x + y + 1] ^= Tl;\n            }\n        }\n        // Rho (ρ) and Pi (π)\n        let curH = s[2];\n        let curL = s[3];\n        for (let t = 0; t < 24; t++) {\n            const shift = SHA3_ROTL[t];\n            const Th = rotlH(curH, curL, shift);\n            const Tl = rotlL(curH, curL, shift);\n            const PI = SHA3_PI[t];\n            curH = s[PI];\n            curL = s[PI + 1];\n            s[PI] = Th;\n            s[PI + 1] = Tl;\n        }\n        // Chi (χ)\n        for (let y = 0; y < 50; y += 10) {\n            for (let x = 0; x < 10; x++)\n                B[x] = s[y + x];\n            for (let x = 0; x < 10; x++)\n                s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];\n        }\n        // Iota (ι)\n        s[0] ^= SHA3_IOTA_H[round];\n        s[1] ^= SHA3_IOTA_L[round];\n    }\n    B.fill(0);\n}\nexport class Keccak extends Hash {\n    // NOTE: we accept arguments in bytes instead of bits here.\n    constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {\n        super();\n        this.blockLen = blockLen;\n        this.suffix = suffix;\n        this.outputLen = outputLen;\n        this.enableXOF = enableXOF;\n        this.rounds = rounds;\n        this.pos = 0;\n        this.posOut = 0;\n        this.finished = false;\n        this.destroyed = false;\n        // Can be passed from user as dkLen\n        assert.number(outputLen);\n        // 1600 = 5x5 matrix of 64bit.  1600 bits === 200 bytes\n        if (0 >= this.blockLen || this.blockLen >= 200)\n            throw new Error('Sha3 supports only keccak-f1600 function');\n        this.state = new Uint8Array(200);\n        this.state32 = u32(this.state);\n    }\n    keccak() {\n        keccakP(this.state32, this.rounds);\n        this.posOut = 0;\n        this.pos = 0;\n    }\n    update(data) {\n        assert.exists(this);\n        const { blockLen, state } = this;\n        data = toBytes(data);\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            for (let i = 0; i < take; i++)\n                state[this.pos++] ^= data[pos++];\n            if (this.pos === blockLen)\n                this.keccak();\n        }\n        return this;\n    }\n    finish() {\n        if (this.finished)\n            return;\n        this.finished = true;\n        const { state, suffix, pos, blockLen } = this;\n        // Do the padding\n        state[pos] ^= suffix;\n        if ((suffix & 0x80) !== 0 && pos === blockLen - 1)\n            this.keccak();\n        state[blockLen - 1] ^= 0x80;\n        this.keccak();\n    }\n    writeInto(out) {\n        assert.exists(this, false);\n        assert.bytes(out);\n        this.finish();\n        const bufferOut = this.state;\n        const { blockLen } = this;\n        for (let pos = 0, len = out.length; pos < len;) {\n            if (this.posOut >= blockLen)\n                this.keccak();\n            const take = Math.min(blockLen - this.posOut, len - pos);\n            out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);\n            this.posOut += take;\n            pos += take;\n        }\n        return out;\n    }\n    xofInto(out) {\n        // Sha3/Keccak usage with XOF is probably mistake, only SHAKE instances can do XOF\n        if (!this.enableXOF)\n            throw new Error('XOF is not possible for this instance');\n        return this.writeInto(out);\n    }\n    xof(bytes) {\n        assert.number(bytes);\n        return this.xofInto(new Uint8Array(bytes));\n    }\n    digestInto(out) {\n        assert.output(out, this);\n        if (this.finished)\n            throw new Error('digest() was already called');\n        this.writeInto(out);\n        this.destroy();\n        return out;\n    }\n    digest() {\n        return this.digestInto(new Uint8Array(this.outputLen));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.state.fill(0);\n    }\n    _cloneInto(to) {\n        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;\n        to || (to = new Keccak(blockLen, suffix, outputLen, enableXOF, rounds));\n        to.state32.set(this.state32);\n        to.pos = this.pos;\n        to.posOut = this.posOut;\n        to.finished = this.finished;\n        to.rounds = rounds;\n        // Suffix can change in cSHAKE\n        to.suffix = suffix;\n        to.outputLen = outputLen;\n        to.enableXOF = enableXOF;\n        to.destroyed = this.destroyed;\n        return to;\n    }\n}\nconst gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));\nexport const sha3_224 = gen(0x06, 144, 224 / 8);\n/**\n * SHA3-256 hash function\n * @param message - that would be hashed\n */\nexport const sha3_256 = gen(0x06, 136, 256 / 8);\nexport const sha3_384 = gen(0x06, 104, 384 / 8);\nexport const sha3_512 = gen(0x06, 72, 512 / 8);\nexport const keccak_224 = gen(0x01, 144, 224 / 8);\n/**\n * keccak-256 hash function. Different from SHA3-256.\n * @param message - that would be hashed\n */\nexport const keccak_256 = gen(0x01, 136, 256 / 8);\nexport const keccak_384 = gen(0x01, 104, 384 / 8);\nexport const keccak_512 = gen(0x01, 72, 512 / 8);\nconst genShake = (suffix, blockLen, outputLen) => wrapConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === undefined ? outputLen : opts.dkLen, true));\nexport const shake128 = genShake(0x1f, 168, 128 / 8);\nexport const shake256 = genShake(0x1f, 136, 256 / 8);\n","import assert from './_assert.js';\nimport { Hash, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC extends Hash {\n    constructor(hash, _key) {\n        super();\n        this.finished = false;\n        this.destroyed = false;\n        assert.hash(hash);\n        const key = toBytes(_key);\n        this.iHash = hash.create();\n        if (typeof this.iHash.update !== 'function')\n            throw new TypeError('Expected instance of class which extends utils.Hash');\n        this.blockLen = this.iHash.blockLen;\n        this.outputLen = this.iHash.outputLen;\n        const blockLen = this.blockLen;\n        const pad = new Uint8Array(blockLen);\n        // blockLen can be bigger than outputLen\n        pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36;\n        this.iHash.update(pad);\n        // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n        this.oHash = hash.create();\n        // Undo internal XOR && apply outer XOR\n        for (let i = 0; i < pad.length; i++)\n            pad[i] ^= 0x36 ^ 0x5c;\n        this.oHash.update(pad);\n        pad.fill(0);\n    }\n    update(buf) {\n        assert.exists(this);\n        this.iHash.update(buf);\n        return this;\n    }\n    digestInto(out) {\n        assert.exists(this);\n        assert.bytes(out, this.outputLen);\n        this.finished = true;\n        this.iHash.digestInto(out);\n        this.oHash.update(out);\n        this.oHash.digestInto(out);\n        this.destroy();\n    }\n    digest() {\n        const out = new Uint8Array(this.oHash.outputLen);\n        this.digestInto(out);\n        return out;\n    }\n    _cloneInto(to) {\n        // Create new instance without calling constructor since key already in state and we don't know it.\n        to || (to = Object.create(Object.getPrototypeOf(this), {}));\n        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n        to = to;\n        to.finished = finished;\n        to.destroyed = destroyed;\n        to.blockLen = blockLen;\n        to.outputLen = outputLen;\n        to.oHash = oHash._cloneInto(to.oHash);\n        to.iHash = iHash._cloneInto(to.iHash);\n        return to;\n    }\n    destroy() {\n        this.destroyed = true;\n        this.oHash.destroy();\n        this.iHash.destroy();\n    }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nhmac.create = (hash, key) => new HMAC(hash, key);\n","/*! noble-secp256k1 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\nimport * as nodeCrypto from 'crypto';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst _3n = BigInt(3);\nconst _8n = BigInt(8);\nconst CURVE = Object.freeze({\n    a: _0n,\n    b: BigInt(7),\n    P: BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f'),\n    n: BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141'),\n    h: _1n,\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n});\nexport { CURVE };\nfunction weistrass(x) {\n    const { a, b } = CURVE;\n    const x2 = mod(x * x);\n    const x3 = mod(x2 * x);\n    return mod(x3 + a * x + b);\n}\nconst USE_ENDOMORPHISM = CURVE.a === _0n;\nclass ShaError extends Error {\n    constructor(message) {\n        super(message);\n    }\n}\nclass JacobianPoint {\n    constructor(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    static fromAffine(p) {\n        if (!(p instanceof Point)) {\n            throw new TypeError('JacobianPoint#fromAffine: expected Point');\n        }\n        return new JacobianPoint(p.x, p.y, _1n);\n    }\n    static toAffineBatch(points) {\n        const toInv = invertBatch(points.map((p) => p.z));\n        return points.map((p, i) => p.toAffine(toInv[i]));\n    }\n    static normalizeZ(points) {\n        return JacobianPoint.toAffineBatch(points).map(JacobianPoint.fromAffine);\n    }\n    equals(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        return U1 === U2 && S1 === S2;\n    }\n    negate() {\n        return new JacobianPoint(this.x, mod(-this.y), this.z);\n    }\n    double() {\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const A = mod(X1 * X1);\n        const B = mod(Y1 * Y1);\n        const C = mod(B * B);\n        const x1b = X1 + B;\n        const D = mod(_2n * (mod(x1b * x1b) - A - C));\n        const E = mod(_3n * A);\n        const F = mod(E * E);\n        const X3 = mod(F - _2n * D);\n        const Y3 = mod(E * (D - X3) - _8n * C);\n        const Z3 = mod(_2n * Y1 * Z1);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    add(other) {\n        if (!(other instanceof JacobianPoint))\n            throw new TypeError('JacobianPoint expected');\n        const { x: X1, y: Y1, z: Z1 } = this;\n        const { x: X2, y: Y2, z: Z2 } = other;\n        if (X2 === _0n || Y2 === _0n)\n            return this;\n        if (X1 === _0n || Y1 === _0n)\n            return other;\n        const Z1Z1 = mod(Z1 * Z1);\n        const Z2Z2 = mod(Z2 * Z2);\n        const U1 = mod(X1 * Z2Z2);\n        const U2 = mod(X2 * Z1Z1);\n        const S1 = mod(mod(Y1 * Z2) * Z2Z2);\n        const S2 = mod(mod(Y2 * Z1) * Z1Z1);\n        const H = mod(U2 - U1);\n        const r = mod(S2 - S1);\n        if (H === _0n) {\n            if (r === _0n) {\n                return this.double();\n            }\n            else {\n                return JacobianPoint.ZERO;\n            }\n        }\n        const HH = mod(H * H);\n        const HHH = mod(H * HH);\n        const V = mod(U1 * HH);\n        const X3 = mod(r * r - HHH - _2n * V);\n        const Y3 = mod(r * (V - X3) - S1 * HHH);\n        const Z3 = mod(Z1 * Z2 * H);\n        return new JacobianPoint(X3, Y3, Z3);\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiplyUnsafe(scalar) {\n        const P0 = JacobianPoint.ZERO;\n        if (typeof scalar === 'bigint' && scalar === _0n)\n            return P0;\n        let n = normalizeScalar(scalar);\n        if (n === _1n)\n            return this;\n        if (!USE_ENDOMORPHISM) {\n            let p = P0;\n            let d = this;\n            while (n > _0n) {\n                if (n & _1n)\n                    p = p.add(d);\n                d = d.double();\n                n >>= _1n;\n            }\n            return p;\n        }\n        let { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n        let k1p = P0;\n        let k2p = P0;\n        let d = this;\n        while (k1 > _0n || k2 > _0n) {\n            if (k1 & _1n)\n                k1p = k1p.add(d);\n            if (k2 & _1n)\n                k2p = k2p.add(d);\n            d = d.double();\n            k1 >>= _1n;\n            k2 >>= _1n;\n        }\n        if (k1neg)\n            k1p = k1p.negate();\n        if (k2neg)\n            k2p = k2p.negate();\n        k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n        return k1p.add(k2p);\n    }\n    precomputeWindow(W) {\n        const windows = USE_ENDOMORPHISM ? 128 / W + 1 : 256 / W + 1;\n        const points = [];\n        let p = this;\n        let base = p;\n        for (let window = 0; window < windows; window++) {\n            base = p;\n            points.push(base);\n            for (let i = 1; i < 2 ** (W - 1); i++) {\n                base = base.add(p);\n                points.push(base);\n            }\n            p = base.double();\n        }\n        return points;\n    }\n    wNAF(n, affinePoint) {\n        if (!affinePoint && this.equals(JacobianPoint.BASE))\n            affinePoint = Point.BASE;\n        const W = (affinePoint && affinePoint._WINDOW_SIZE) || 1;\n        if (256 % W) {\n            throw new Error('Point#wNAF: Invalid precomputation window, must be power of 2');\n        }\n        let precomputes = affinePoint && pointPrecomputes.get(affinePoint);\n        if (!precomputes) {\n            precomputes = this.precomputeWindow(W);\n            if (affinePoint && W !== 1) {\n                precomputes = JacobianPoint.normalizeZ(precomputes);\n                pointPrecomputes.set(affinePoint, precomputes);\n            }\n        }\n        let p = JacobianPoint.ZERO;\n        let f = JacobianPoint.ZERO;\n        const windows = 1 + (USE_ENDOMORPHISM ? 128 / W : 256 / W);\n        const windowSize = 2 ** (W - 1);\n        const mask = BigInt(2 ** W - 1);\n        const maxNumber = 2 ** W;\n        const shiftBy = BigInt(W);\n        for (let window = 0; window < windows; window++) {\n            const offset = window * windowSize;\n            let wbits = Number(n & mask);\n            n >>= shiftBy;\n            if (wbits > windowSize) {\n                wbits -= maxNumber;\n                n += _1n;\n            }\n            if (wbits === 0) {\n                let pr = precomputes[offset];\n                if (window % 2)\n                    pr = pr.negate();\n                f = f.add(pr);\n            }\n            else {\n                let cached = precomputes[offset + Math.abs(wbits) - 1];\n                if (wbits < 0)\n                    cached = cached.negate();\n                p = p.add(cached);\n            }\n        }\n        return { p, f };\n    }\n    multiply(scalar, affinePoint) {\n        let n = normalizeScalar(scalar);\n        let point;\n        let fake;\n        if (USE_ENDOMORPHISM) {\n            const { k1neg, k1, k2neg, k2 } = splitScalarEndo(n);\n            let { p: k1p, f: f1p } = this.wNAF(k1, affinePoint);\n            let { p: k2p, f: f2p } = this.wNAF(k2, affinePoint);\n            if (k1neg)\n                k1p = k1p.negate();\n            if (k2neg)\n                k2p = k2p.negate();\n            k2p = new JacobianPoint(mod(k2p.x * CURVE.beta), k2p.y, k2p.z);\n            point = k1p.add(k2p);\n            fake = f1p.add(f2p);\n        }\n        else {\n            const { p, f } = this.wNAF(n, affinePoint);\n            point = p;\n            fake = f;\n        }\n        return JacobianPoint.normalizeZ([point, fake])[0];\n    }\n    toAffine(invZ = invert(this.z)) {\n        const { x, y, z } = this;\n        const iz1 = invZ;\n        const iz2 = mod(iz1 * iz1);\n        const iz3 = mod(iz2 * iz1);\n        const ax = mod(x * iz2);\n        const ay = mod(y * iz3);\n        const zz = mod(z * iz1);\n        if (zz !== _1n)\n            throw new Error('invZ was invalid');\n        return new Point(ax, ay);\n    }\n}\nJacobianPoint.BASE = new JacobianPoint(CURVE.Gx, CURVE.Gy, _1n);\nJacobianPoint.ZERO = new JacobianPoint(_0n, _1n, _0n);\nconst pointPrecomputes = new WeakMap();\nexport class Point {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n    }\n    hasEvenY() {\n        return this.y % _2n === _0n;\n    }\n    static fromCompressedHex(bytes) {\n        const isShort = bytes.length === 32;\n        const x = bytesToNumber(isShort ? bytes : bytes.subarray(1));\n        if (!isValidFieldElement(x))\n            throw new Error('Point is not on curve');\n        const y2 = weistrass(x);\n        let y = sqrtMod(y2);\n        const isYOdd = (y & _1n) === _1n;\n        if (isShort) {\n            if (isYOdd)\n                y = mod(-y);\n        }\n        else {\n            const isFirstByteOdd = (bytes[0] & 1) === 1;\n            if (isFirstByteOdd !== isYOdd)\n                y = mod(-y);\n        }\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromUncompressedHex(bytes) {\n        const x = bytesToNumber(bytes.subarray(1, 33));\n        const y = bytesToNumber(bytes.subarray(33, 65));\n        const point = new Point(x, y);\n        point.assertValidity();\n        return point;\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        const len = bytes.length;\n        const header = bytes[0];\n        if (len === 32 || (len === 33 && (header === 0x02 || header === 0x03))) {\n            return this.fromCompressedHex(bytes);\n        }\n        if (len === 65 && header === 0x04)\n            return this.fromUncompressedHex(bytes);\n        throw new Error(`Point.fromHex: received invalid point. Expected 32-33 compressed bytes or 65 uncompressed bytes, not ${len}`);\n    }\n    static fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normalizePrivateKey(privateKey));\n    }\n    static fromSignature(msgHash, signature, recovery) {\n        msgHash = ensureBytes(msgHash);\n        const h = truncateHash(msgHash);\n        const { r, s } = normalizeSignature(signature);\n        if (recovery !== 0 && recovery !== 1) {\n            throw new Error('Cannot recover signature: invalid recovery bit');\n        }\n        const prefix = recovery & 1 ? '03' : '02';\n        const R = Point.fromHex(prefix + numTo32bStr(r));\n        const { n } = CURVE;\n        const rinv = invert(r, n);\n        const u1 = mod(-h * rinv, n);\n        const u2 = mod(s * rinv, n);\n        const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2);\n        if (!Q)\n            throw new Error('Cannot recover signature: point at infinify');\n        Q.assertValidity();\n        return Q;\n    }\n    toRawBytes(isCompressed = false) {\n        return hexToBytes(this.toHex(isCompressed));\n    }\n    toHex(isCompressed = false) {\n        const x = numTo32bStr(this.x);\n        if (isCompressed) {\n            const prefix = this.hasEvenY() ? '02' : '03';\n            return `${prefix}${x}`;\n        }\n        else {\n            return `04${x}${numTo32bStr(this.y)}`;\n        }\n    }\n    toHexX() {\n        return this.toHex(true).slice(2);\n    }\n    toRawX() {\n        return this.toRawBytes(true).slice(1);\n    }\n    assertValidity() {\n        const msg = 'Point is not on elliptic curve';\n        const { x, y } = this;\n        if (!isValidFieldElement(x) || !isValidFieldElement(y))\n            throw new Error(msg);\n        const left = mod(y * y);\n        const right = weistrass(x);\n        if (mod(left - right) !== _0n)\n            throw new Error(msg);\n    }\n    equals(other) {\n        return this.x === other.x && this.y === other.y;\n    }\n    negate() {\n        return new Point(this.x, mod(-this.y));\n    }\n    double() {\n        return JacobianPoint.fromAffine(this).double().toAffine();\n    }\n    add(other) {\n        return JacobianPoint.fromAffine(this).add(JacobianPoint.fromAffine(other)).toAffine();\n    }\n    subtract(other) {\n        return this.add(other.negate());\n    }\n    multiply(scalar) {\n        return JacobianPoint.fromAffine(this).multiply(scalar, this).toAffine();\n    }\n    multiplyAndAddUnsafe(Q, a, b) {\n        const P = JacobianPoint.fromAffine(this);\n        const aP = a === _0n || a === _1n || this !== Point.BASE ? P.multiplyUnsafe(a) : P.multiply(a);\n        const bQ = JacobianPoint.fromAffine(Q).multiplyUnsafe(b);\n        const sum = aP.add(bQ);\n        return sum.equals(JacobianPoint.ZERO) ? undefined : sum.toAffine();\n    }\n}\nPoint.BASE = new Point(CURVE.Gx, CURVE.Gy);\nPoint.ZERO = new Point(_0n, _0n);\nfunction sliceDER(s) {\n    return Number.parseInt(s[0], 16) >= 8 ? '00' + s : s;\n}\nfunction parseDERInt(data) {\n    if (data.length < 2 || data[0] !== 0x02) {\n        throw new Error(`Invalid signature integer tag: ${bytesToHex(data)}`);\n    }\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) {\n        throw new Error(`Invalid signature integer: wrong length`);\n    }\n    if (res[0] === 0x00 && res[1] <= 0x7f) {\n        throw new Error('Invalid signature integer: trailing length');\n    }\n    return { data: bytesToNumber(res), left: data.subarray(len + 2) };\n}\nfunction parseDERSignature(data) {\n    if (data.length < 2 || data[0] != 0x30) {\n        throw new Error(`Invalid signature tag: ${bytesToHex(data)}`);\n    }\n    if (data[1] !== data.length - 2) {\n        throw new Error('Invalid signature: incorrect length');\n    }\n    const { data: r, left: sBytes } = parseDERInt(data.subarray(2));\n    const { data: s, left: rBytesLeft } = parseDERInt(sBytes);\n    if (rBytesLeft.length) {\n        throw new Error(`Invalid signature: left bytes after parsing: ${bytesToHex(rBytesLeft)}`);\n    }\n    return { r, s };\n}\nexport class Signature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromCompact(hex) {\n        const arr = hex instanceof Uint8Array;\n        const name = 'Signature.fromCompact';\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`${name}: Expected string or Uint8Array`);\n        const str = arr ? bytesToHex(hex) : hex;\n        if (str.length !== 128)\n            throw new Error(`${name}: Expected 64-byte hex`);\n        return new Signature(hexToNumber(str.slice(0, 64)), hexToNumber(str.slice(64, 128)));\n    }\n    static fromDER(hex) {\n        const arr = hex instanceof Uint8Array;\n        if (typeof hex !== 'string' && !arr)\n            throw new TypeError(`Signature.fromDER: Expected string or Uint8Array`);\n        const { r, s } = parseDERSignature(arr ? hex : hexToBytes(hex));\n        return new Signature(r, s);\n    }\n    static fromHex(hex) {\n        return this.fromDER(hex);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isWithinCurveOrder(r))\n            throw new Error('Invalid Signature: r must be 0 < r < n');\n        if (!isWithinCurveOrder(s))\n            throw new Error('Invalid Signature: s must be 0 < s < n');\n    }\n    hasHighS() {\n        const HALF = CURVE.n >> _1n;\n        return this.s > HALF;\n    }\n    normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, CURVE.n - this.s) : this;\n    }\n    toDERRawBytes(isCompressed = false) {\n        return hexToBytes(this.toDERHex(isCompressed));\n    }\n    toDERHex(isCompressed = false) {\n        const sHex = sliceDER(numberToHexUnpadded(this.s));\n        if (isCompressed)\n            return sHex;\n        const rHex = sliceDER(numberToHexUnpadded(this.r));\n        const rLen = numberToHexUnpadded(rHex.length / 2);\n        const sLen = numberToHexUnpadded(sHex.length / 2);\n        const length = numberToHexUnpadded(rHex.length / 2 + sHex.length / 2 + 4);\n        return `30${length}02${rLen}${rHex}02${sLen}${sHex}`;\n    }\n    toRawBytes() {\n        return this.toDERRawBytes();\n    }\n    toHex() {\n        return this.toDERHex();\n    }\n    toCompactRawBytes() {\n        return hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n}\nfunction concatBytes(...arrays) {\n    if (!arrays.every((b) => b instanceof Uint8Array))\n        throw new Error('Uint8Array list expected');\n    if (arrays.length === 1)\n        return arrays[0];\n    const length = arrays.reduce((a, arr) => a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nconst hexes = Array.from({ length: 256 }, (v, i) => i.toString(16).padStart(2, '0'));\nfunction bytesToHex(uint8a) {\n    if (!(uint8a instanceof Uint8Array))\n        throw new Error('Expected Uint8Array');\n    let hex = '';\n    for (let i = 0; i < uint8a.length; i++) {\n        hex += hexes[uint8a[i]];\n    }\n    return hex;\n}\nconst POW_2_256 = BigInt('0x10000000000000000000000000000000000000000000000000000000000000000');\nfunction numTo32bStr(num) {\n    if (typeof num !== 'bigint')\n        throw new Error('Expected bigint');\n    if (!(_0n <= num && num < POW_2_256))\n        throw new Error('Expected number < 2^256');\n    return num.toString(16).padStart(64, '0');\n}\nfunction numTo32b(num) {\n    const b = hexToBytes(numTo32bStr(num));\n    if (b.length !== 32)\n        throw new Error('Error: expected 32 bytes');\n    return b;\n}\nfunction numberToHexUnpadded(num) {\n    const hex = num.toString(16);\n    return hex.length & 1 ? `0${hex}` : hex;\n}\nfunction hexToNumber(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToNumber: expected string, got ' + typeof hex);\n    }\n    return BigInt(`0x${hex}`);\n}\nfunction hexToBytes(hex) {\n    if (typeof hex !== 'string') {\n        throw new TypeError('hexToBytes: expected string, got ' + typeof hex);\n    }\n    if (hex.length % 2)\n        throw new Error('hexToBytes: received invalid unpadded hex' + hex.length);\n    const array = new Uint8Array(hex.length / 2);\n    for (let i = 0; i < array.length; i++) {\n        const j = i * 2;\n        const hexByte = hex.slice(j, j + 2);\n        const byte = Number.parseInt(hexByte, 16);\n        if (Number.isNaN(byte) || byte < 0)\n            throw new Error('Invalid byte sequence');\n        array[i] = byte;\n    }\n    return array;\n}\nfunction bytesToNumber(bytes) {\n    return hexToNumber(bytesToHex(bytes));\n}\nfunction ensureBytes(hex) {\n    return hex instanceof Uint8Array ? Uint8Array.from(hex) : hexToBytes(hex);\n}\nfunction normalizeScalar(num) {\n    if (typeof num === 'number' && Number.isSafeInteger(num) && num > 0)\n        return BigInt(num);\n    if (typeof num === 'bigint' && isWithinCurveOrder(num))\n        return num;\n    throw new TypeError('Expected valid private scalar: 0 < scalar < curve.n');\n}\nfunction mod(a, b = CURVE.P) {\n    const result = a % b;\n    return result >= _0n ? result : b + result;\n}\nfunction pow2(x, power) {\n    const { P } = CURVE;\n    let res = x;\n    while (power-- > _0n) {\n        res *= res;\n        res %= P;\n    }\n    return res;\n}\nfunction sqrtMod(x) {\n    const { P } = CURVE;\n    const _6n = BigInt(6);\n    const _11n = BigInt(11);\n    const _22n = BigInt(22);\n    const _23n = BigInt(23);\n    const _44n = BigInt(44);\n    const _88n = BigInt(88);\n    const b2 = (x * x * x) % P;\n    const b3 = (b2 * b2 * x) % P;\n    const b6 = (pow2(b3, _3n) * b3) % P;\n    const b9 = (pow2(b6, _3n) * b3) % P;\n    const b11 = (pow2(b9, _2n) * b2) % P;\n    const b22 = (pow2(b11, _11n) * b11) % P;\n    const b44 = (pow2(b22, _22n) * b22) % P;\n    const b88 = (pow2(b44, _44n) * b44) % P;\n    const b176 = (pow2(b88, _88n) * b88) % P;\n    const b220 = (pow2(b176, _44n) * b44) % P;\n    const b223 = (pow2(b220, _3n) * b3) % P;\n    const t1 = (pow2(b223, _23n) * b22) % P;\n    const t2 = (pow2(t1, _6n) * b2) % P;\n    return pow2(t2, _2n);\n}\nfunction invert(number, modulo = CURVE.P) {\n    if (number === _0n || modulo <= _0n) {\n        throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n    }\n    let a = mod(number, modulo);\n    let b = modulo;\n    let x = _0n, y = _1n, u = _1n, v = _0n;\n    while (a !== _0n) {\n        const q = b / a;\n        const r = b % a;\n        const m = x - u * q;\n        const n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    const gcd = b;\n    if (gcd !== _1n)\n        throw new Error('invert: does not exist');\n    return mod(x, modulo);\n}\nfunction invertBatch(nums, p = CURVE.P) {\n    const scratch = new Array(nums.length);\n    const lastMultiplied = nums.reduce((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = acc;\n        return mod(acc * num, p);\n    }, _1n);\n    const inverted = invert(lastMultiplied, p);\n    nums.reduceRight((acc, num, i) => {\n        if (num === _0n)\n            return acc;\n        scratch[i] = mod(acc * scratch[i], p);\n        return mod(acc * num, p);\n    }, inverted);\n    return scratch;\n}\nconst divNearest = (a, b) => (a + b / _2n) / b;\nconst ENDO = {\n    a1: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    b1: -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3'),\n    a2: BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8'),\n    b2: BigInt('0x3086d221a7d46bcde86c90e49284eb15'),\n    POW_2_128: BigInt('0x100000000000000000000000000000000'),\n};\nfunction splitScalarEndo(k) {\n    const { n } = CURVE;\n    const { a1, b1, a2, b2, POW_2_128 } = ENDO;\n    const c1 = divNearest(b2 * k, n);\n    const c2 = divNearest(-b1 * k, n);\n    let k1 = mod(k - c1 * a1 - c2 * a2, n);\n    let k2 = mod(-c1 * b1 - c2 * b2, n);\n    const k1neg = k1 > POW_2_128;\n    const k2neg = k2 > POW_2_128;\n    if (k1neg)\n        k1 = n - k1;\n    if (k2neg)\n        k2 = n - k2;\n    if (k1 > POW_2_128 || k2 > POW_2_128) {\n        throw new Error('splitScalarEndo: Endomorphism failed, k=' + k);\n    }\n    return { k1neg, k1, k2neg, k2 };\n}\nfunction truncateHash(hash) {\n    const { n } = CURVE;\n    const byteLength = hash.length;\n    const delta = byteLength * 8 - 256;\n    let h = bytesToNumber(hash);\n    if (delta > 0)\n        h = h >> BigInt(delta);\n    if (h >= n)\n        h -= n;\n    return h;\n}\nlet _sha256Sync;\nlet _hmacSha256Sync;\nclass HmacDrbg {\n    constructor() {\n        this.v = new Uint8Array(32).fill(1);\n        this.k = new Uint8Array(32).fill(0);\n        this.counter = 0;\n    }\n    hmac(...values) {\n        return utils.hmacSha256(this.k, ...values);\n    }\n    hmacSync(...values) {\n        return _hmacSha256Sync(this.k, ...values);\n    }\n    checkSync() {\n        if (typeof _hmacSha256Sync !== 'function')\n            throw new ShaError('hmacSha256Sync needs to be set');\n    }\n    incr() {\n        if (this.counter >= 1000)\n            throw new Error('Tried 1,000 k values for sign(), all were invalid');\n        this.counter += 1;\n    }\n    async reseed(seed = new Uint8Array()) {\n        this.k = await this.hmac(this.v, Uint8Array.from([0x00]), seed);\n        this.v = await this.hmac(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = await this.hmac(this.v, Uint8Array.from([0x01]), seed);\n        this.v = await this.hmac(this.v);\n    }\n    reseedSync(seed = new Uint8Array()) {\n        this.checkSync();\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x00]), seed);\n        this.v = this.hmacSync(this.v);\n        if (seed.length === 0)\n            return;\n        this.k = this.hmacSync(this.v, Uint8Array.from([0x01]), seed);\n        this.v = this.hmacSync(this.v);\n    }\n    async generate() {\n        this.incr();\n        this.v = await this.hmac(this.v);\n        return this.v;\n    }\n    generateSync() {\n        this.checkSync();\n        this.incr();\n        this.v = this.hmacSync(this.v);\n        return this.v;\n    }\n}\nfunction isWithinCurveOrder(num) {\n    return _0n < num && num < CURVE.n;\n}\nfunction isValidFieldElement(num) {\n    return _0n < num && num < CURVE.P;\n}\nfunction kmdToSig(kBytes, m, d) {\n    const k = bytesToNumber(kBytes);\n    if (!isWithinCurveOrder(k))\n        return;\n    const { n } = CURVE;\n    const q = Point.BASE.multiply(k);\n    const r = mod(q.x, n);\n    if (r === _0n)\n        return;\n    const s = mod(invert(k, n) * mod(m + d * r, n), n);\n    if (s === _0n)\n        return;\n    const sig = new Signature(r, s);\n    const recovery = (q.x === sig.r ? 0 : 2) | Number(q.y & _1n);\n    return { sig, recovery };\n}\nfunction normalizePrivateKey(key) {\n    let num;\n    if (typeof key === 'bigint') {\n        num = key;\n    }\n    else if (typeof key === 'number' && Number.isSafeInteger(key) && key > 0) {\n        num = BigInt(key);\n    }\n    else if (typeof key === 'string') {\n        if (key.length !== 64)\n            throw new Error('Expected 32 bytes of private key');\n        num = hexToNumber(key);\n    }\n    else if (key instanceof Uint8Array) {\n        if (key.length !== 32)\n            throw new Error('Expected 32 bytes of private key');\n        num = bytesToNumber(key);\n    }\n    else {\n        throw new TypeError('Expected valid private key');\n    }\n    if (!isWithinCurveOrder(num))\n        throw new Error('Expected private key: 0 < key < n');\n    return num;\n}\nfunction normalizePublicKey(publicKey) {\n    if (publicKey instanceof Point) {\n        publicKey.assertValidity();\n        return publicKey;\n    }\n    else {\n        return Point.fromHex(publicKey);\n    }\n}\nfunction normalizeSignature(signature) {\n    if (signature instanceof Signature) {\n        signature.assertValidity();\n        return signature;\n    }\n    try {\n        return Signature.fromDER(signature);\n    }\n    catch (error) {\n        return Signature.fromCompact(signature);\n    }\n}\nexport function getPublicKey(privateKey, isCompressed = false) {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n}\nexport function recoverPublicKey(msgHash, signature, recovery, isCompressed = false) {\n    return Point.fromSignature(msgHash, signature, recovery).toRawBytes(isCompressed);\n}\nfunction isProbPub(item) {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && item.length;\n    if (arr)\n        return len === 33 || len === 65;\n    if (str)\n        return len === 66 || len === 130;\n    if (item instanceof Point)\n        return true;\n    return false;\n}\nexport function getSharedSecret(privateA, publicB, isCompressed = false) {\n    if (isProbPub(privateA))\n        throw new TypeError('getSharedSecret: first arg must be private key');\n    if (!isProbPub(publicB))\n        throw new TypeError('getSharedSecret: second arg must be public key');\n    const b = normalizePublicKey(publicB);\n    b.assertValidity();\n    return b.multiply(normalizePrivateKey(privateA)).toRawBytes(isCompressed);\n}\nfunction bits2int(bytes) {\n    const slice = bytes.length > 32 ? bytes.slice(0, 32) : bytes;\n    return bytesToNumber(slice);\n}\nfunction bits2octets(bytes) {\n    const z1 = bits2int(bytes);\n    const z2 = mod(z1, CURVE.n);\n    return int2octets(z2 < _0n ? z1 : z2);\n}\nfunction int2octets(num) {\n    return numTo32b(num);\n}\nfunction initSigArgs(msgHash, privateKey, extraEntropy) {\n    if (msgHash == null)\n        throw new Error(`sign: expected valid message hash, not \"${msgHash}\"`);\n    const h1 = ensureBytes(msgHash);\n    const d = normalizePrivateKey(privateKey);\n    const seedArgs = [int2octets(d), bits2octets(h1)];\n    if (extraEntropy != null) {\n        if (extraEntropy === true)\n            extraEntropy = utils.randomBytes(32);\n        const e = ensureBytes(extraEntropy);\n        if (e.length !== 32)\n            throw new Error('sign: Expected 32 bytes of extra data');\n        seedArgs.push(e);\n    }\n    const seed = concatBytes(...seedArgs);\n    const m = bits2int(h1);\n    return { seed, m, d };\n}\nfunction finalizeSig(recSig, opts) {\n    let { sig, recovery } = recSig;\n    const { canonical, der, recovered } = Object.assign({ canonical: true, der: true }, opts);\n    if (canonical && sig.hasHighS()) {\n        sig = sig.normalizeS();\n        recovery ^= 1;\n    }\n    const hashed = der ? sig.toDERRawBytes() : sig.toCompactRawBytes();\n    return recovered ? [hashed, recovery] : hashed;\n}\nasync function sign(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    await drbg.reseed(seed);\n    while (!(sig = kmdToSig(await drbg.generate(), m, d)))\n        await drbg.reseed();\n    return finalizeSig(sig, opts);\n}\nfunction signSync(msgHash, privKey, opts = {}) {\n    const { seed, m, d } = initSigArgs(msgHash, privKey, opts.extraEntropy);\n    let sig;\n    const drbg = new HmacDrbg();\n    drbg.reseedSync(seed);\n    while (!(sig = kmdToSig(drbg.generateSync(), m, d)))\n        drbg.reseedSync();\n    return finalizeSig(sig, opts);\n}\nexport { sign, signSync };\nconst vopts = { strict: true };\nexport function verify(signature, msgHash, publicKey, opts = vopts) {\n    let sig;\n    try {\n        sig = normalizeSignature(signature);\n        msgHash = ensureBytes(msgHash);\n    }\n    catch (error) {\n        return false;\n    }\n    const { r, s } = sig;\n    if (opts.strict && sig.hasHighS())\n        return false;\n    const h = truncateHash(msgHash);\n    let P;\n    try {\n        P = normalizePublicKey(publicKey);\n    }\n    catch (error) {\n        return false;\n    }\n    const { n } = CURVE;\n    const sinv = invert(s, n);\n    const u1 = mod(h * sinv, n);\n    const u2 = mod(r * sinv, n);\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2);\n    if (!R)\n        return false;\n    const v = mod(R.x, n);\n    return v === r;\n}\nfunction schnorrChallengeFinalize(ch) {\n    return mod(bytesToNumber(ch), CURVE.n);\n}\nclass SchnorrSignature {\n    constructor(r, s) {\n        this.r = r;\n        this.s = s;\n        this.assertValidity();\n    }\n    static fromHex(hex) {\n        const bytes = ensureBytes(hex);\n        if (bytes.length !== 64)\n            throw new TypeError(`SchnorrSignature.fromHex: expected 64 bytes, not ${bytes.length}`);\n        const r = bytesToNumber(bytes.subarray(0, 32));\n        const s = bytesToNumber(bytes.subarray(32, 64));\n        return new SchnorrSignature(r, s);\n    }\n    assertValidity() {\n        const { r, s } = this;\n        if (!isValidFieldElement(r) || !isWithinCurveOrder(s))\n            throw new Error('Invalid signature');\n    }\n    toHex() {\n        return numTo32bStr(this.r) + numTo32bStr(this.s);\n    }\n    toRawBytes() {\n        return hexToBytes(this.toHex());\n    }\n}\nfunction schnorrGetPublicKey(privateKey) {\n    return Point.fromPrivateKey(privateKey).toRawX();\n}\nclass InternalSchnorrSignature {\n    constructor(message, privateKey, auxRand = utils.randomBytes()) {\n        if (message == null)\n            throw new TypeError(`sign: Expected valid message, not \"${message}\"`);\n        this.m = ensureBytes(message);\n        const { x, scalar } = this.getScalar(normalizePrivateKey(privateKey));\n        this.px = x;\n        this.d = scalar;\n        this.rand = ensureBytes(auxRand);\n        if (this.rand.length !== 32)\n            throw new TypeError('sign: Expected 32 bytes of aux randomness');\n    }\n    getScalar(priv) {\n        const point = Point.fromPrivateKey(priv);\n        const scalar = point.hasEvenY() ? priv : CURVE.n - priv;\n        return { point, scalar, x: point.toRawX() };\n    }\n    initNonce(d, t0h) {\n        return numTo32b(d ^ bytesToNumber(t0h));\n    }\n    finalizeNonce(k0h) {\n        const k0 = mod(bytesToNumber(k0h), CURVE.n);\n        if (k0 === _0n)\n            throw new Error('sign: Creation of signature failed. k is zero');\n        const { point: R, x: rx, scalar: k } = this.getScalar(k0);\n        return { R, rx, k };\n    }\n    finalizeSig(R, k, e, d) {\n        return new SchnorrSignature(R.x, mod(k + e * d, CURVE.n)).toRawBytes();\n    }\n    error() {\n        throw new Error('sign: Invalid signature produced');\n    }\n    async calc() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHash;\n        const t = this.initNonce(d, await tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(await tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(await tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!(await schnorrVerify(sig, m, px)))\n            this.error();\n        return sig;\n    }\n    calcSync() {\n        const { m, d, px, rand } = this;\n        const tag = utils.taggedHashSync;\n        const t = this.initNonce(d, tag(TAGS.aux, rand));\n        const { R, rx, k } = this.finalizeNonce(tag(TAGS.nonce, t, px, m));\n        const e = schnorrChallengeFinalize(tag(TAGS.challenge, rx, px, m));\n        const sig = this.finalizeSig(R, k, e, d);\n        if (!schnorrVerifySync(sig, m, px))\n            this.error();\n        return sig;\n    }\n}\nasync function schnorrSign(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calc();\n}\nfunction schnorrSignSync(msg, privKey, auxRand) {\n    return new InternalSchnorrSignature(msg, privKey, auxRand).calcSync();\n}\nfunction initSchnorrVerify(signature, message, publicKey) {\n    const raw = signature instanceof SchnorrSignature;\n    const sig = raw ? signature : SchnorrSignature.fromHex(signature);\n    if (raw)\n        sig.assertValidity();\n    return {\n        ...sig,\n        m: ensureBytes(message),\n        P: normalizePublicKey(publicKey),\n    };\n}\nfunction finalizeSchnorrVerify(r, P, s, e) {\n    const R = Point.BASE.multiplyAndAddUnsafe(P, normalizePrivateKey(s), mod(-e, CURVE.n));\n    if (!R || !R.hasEvenY() || R.x !== r)\n        return false;\n    return true;\n}\nasync function schnorrVerify(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(await utils.taggedHash(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        return false;\n    }\n}\nfunction schnorrVerifySync(signature, message, publicKey) {\n    try {\n        const { r, s, m, P } = initSchnorrVerify(signature, message, publicKey);\n        const e = schnorrChallengeFinalize(utils.taggedHashSync(TAGS.challenge, numTo32b(r), P.toRawX(), m));\n        return finalizeSchnorrVerify(r, P, s, e);\n    }\n    catch (error) {\n        if (error instanceof ShaError)\n            throw error;\n        return false;\n    }\n}\nexport const schnorr = {\n    Signature: SchnorrSignature,\n    getPublicKey: schnorrGetPublicKey,\n    sign: schnorrSign,\n    verify: schnorrVerify,\n    signSync: schnorrSignSync,\n    verifySync: schnorrVerifySync,\n};\nPoint.BASE._setWindowSize(8);\nconst crypto = {\n    node: nodeCrypto,\n    web: typeof self === 'object' && 'crypto' in self ? self.crypto : undefined,\n};\nconst TAGS = {\n    challenge: 'BIP0340/challenge',\n    aux: 'BIP0340/aux',\n    nonce: 'BIP0340/nonce',\n};\nconst TAGGED_HASH_PREFIXES = {};\nexport const utils = {\n    bytesToHex,\n    hexToBytes,\n    concatBytes,\n    mod,\n    invert,\n    isValidPrivateKey(privateKey) {\n        try {\n            normalizePrivateKey(privateKey);\n            return true;\n        }\n        catch (error) {\n            return false;\n        }\n    },\n    _bigintTo32Bytes: numTo32b,\n    _normalizePrivateKey: normalizePrivateKey,\n    hashToPrivateKey: (hash) => {\n        hash = ensureBytes(hash);\n        if (hash.length < 40 || hash.length > 1024)\n            throw new Error('Expected 40-1024 bytes of private key as per FIPS 186');\n        const num = mod(bytesToNumber(hash), CURVE.n - _1n) + _1n;\n        return numTo32b(num);\n    },\n    randomBytes: (bytesLength = 32) => {\n        if (crypto.web) {\n            return crypto.web.getRandomValues(new Uint8Array(bytesLength));\n        }\n        else if (crypto.node) {\n            const { randomBytes } = crypto.node;\n            return Uint8Array.from(randomBytes(bytesLength));\n        }\n        else {\n            throw new Error(\"The environment doesn't have randomBytes function\");\n        }\n    },\n    randomPrivateKey: () => {\n        return utils.hashToPrivateKey(utils.randomBytes(40));\n    },\n    sha256: async (...messages) => {\n        if (crypto.web) {\n            const buffer = await crypto.web.subtle.digest('SHA-256', concatBytes(...messages));\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHash } = crypto.node;\n            const hash = createHash('sha256');\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have sha256 function\");\n        }\n    },\n    hmacSha256: async (key, ...messages) => {\n        if (crypto.web) {\n            const ckey = await crypto.web.subtle.importKey('raw', key, { name: 'HMAC', hash: { name: 'SHA-256' } }, false, ['sign']);\n            const message = concatBytes(...messages);\n            const buffer = await crypto.web.subtle.sign('HMAC', ckey, message);\n            return new Uint8Array(buffer);\n        }\n        else if (crypto.node) {\n            const { createHmac } = crypto.node;\n            const hash = createHmac('sha256', key);\n            messages.forEach((m) => hash.update(m));\n            return Uint8Array.from(hash.digest());\n        }\n        else {\n            throw new Error(\"The environment doesn't have hmac-sha256 function\");\n        }\n    },\n    sha256Sync: undefined,\n    hmacSha256Sync: undefined,\n    taggedHash: async (tag, ...messages) => {\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = await utils.sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return utils.sha256(tagP, ...messages);\n    },\n    taggedHashSync: (tag, ...messages) => {\n        if (typeof _sha256Sync !== 'function')\n            throw new ShaError('sha256Sync is undefined, you need to set it');\n        let tagP = TAGGED_HASH_PREFIXES[tag];\n        if (tagP === undefined) {\n            const tagH = _sha256Sync(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n            tagP = concatBytes(tagH, tagH);\n            TAGGED_HASH_PREFIXES[tag] = tagP;\n        }\n        return _sha256Sync(tagP, ...messages);\n    },\n    precompute(windowSize = 8, point = Point.BASE) {\n        const cached = point === Point.BASE ? point : new Point(point.x, point.y);\n        cached._setWindowSize(windowSize);\n        cached.multiply(_3n);\n        return cached;\n    },\n};\nObject.defineProperties(utils, {\n    sha256Sync: {\n        configurable: false,\n        get() {\n            return _sha256Sync;\n        },\n        set(val) {\n            if (!_sha256Sync)\n                _sha256Sync = val;\n        },\n    },\n    hmacSha256Sync: {\n        configurable: false,\n        get() {\n            return _hmacSha256Sync;\n        },\n        set(val) {\n            if (!_hmacSha256Sync)\n                _hmacSha256Sync = val;\n        },\n    },\n});\n","import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using acounter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n        source: optional(\n          union([literal('transaction'), literal('lookupTable')]),\n        ),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration++;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <https://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nconst base64 = require('base64-js')\nconst ieee754 = require('ieee754')\nconst customInspectSymbol =\n  (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation\n    ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation\n    : null\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\nconst K_MAX_LENGTH = 0x7fffffff\nexports.kMaxLength = K_MAX_LENGTH\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n *               implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * We report that the browser does not support typed arrays if the are not subclassable\n * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n * for __proto__ and has a buggy typed array implementation.\n */\nBuffer.TYPED_ARRAY_SUPPORT = typedArraySupport()\n\nif (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&\n    typeof console.error === 'function') {\n  console.error(\n    'This browser lacks typed array (Uint8Array) support which is required by ' +\n    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'\n  )\n}\n\nfunction typedArraySupport () {\n  // Can typed array instances can be augmented?\n  try {\n    const arr = new Uint8Array(1)\n    const proto = { foo: function () { return 42 } }\n    Object.setPrototypeOf(proto, Uint8Array.prototype)\n    Object.setPrototypeOf(arr, proto)\n    return arr.foo() === 42\n  } catch (e) {\n    return false\n  }\n}\n\nObject.defineProperty(Buffer.prototype, 'parent', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.buffer\n  }\n})\n\nObject.defineProperty(Buffer.prototype, 'offset', {\n  enumerable: true,\n  get: function () {\n    if (!Buffer.isBuffer(this)) return undefined\n    return this.byteOffset\n  }\n})\n\nfunction createBuffer (length) {\n  if (length > K_MAX_LENGTH) {\n    throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"')\n  }\n  // Return an augmented `Uint8Array` instance\n  const buf = new Uint8Array(length)\n  Object.setPrototypeOf(buf, Buffer.prototype)\n  return buf\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new TypeError(\n        'The \"string\" argument must be of type string. Received type number'\n      )\n    }\n    return allocUnsafe(arg)\n  }\n  return from(arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\nfunction from (value, encodingOrOffset, length) {\n  if (typeof value === 'string') {\n    return fromString(value, encodingOrOffset)\n  }\n\n  if (ArrayBuffer.isView(value)) {\n    return fromArrayView(value)\n  }\n\n  if (value == null) {\n    throw new TypeError(\n      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n      'or Array-like Object. Received type ' + (typeof value)\n    )\n  }\n\n  if (isInstance(value, ArrayBuffer) ||\n      (value && isInstance(value.buffer, ArrayBuffer))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof SharedArrayBuffer !== 'undefined' &&\n      (isInstance(value, SharedArrayBuffer) ||\n      (value && isInstance(value.buffer, SharedArrayBuffer)))) {\n    return fromArrayBuffer(value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'number') {\n    throw new TypeError(\n      'The \"value\" argument must not be of type number. Received type number'\n    )\n  }\n\n  const valueOf = value.valueOf && value.valueOf()\n  if (valueOf != null && valueOf !== value) {\n    return Buffer.from(valueOf, encodingOrOffset, length)\n  }\n\n  const b = fromObject(value)\n  if (b) return b\n\n  if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&\n      typeof value[Symbol.toPrimitive] === 'function') {\n    return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length)\n  }\n\n  throw new TypeError(\n    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +\n    'or Array-like Object. Received type ' + (typeof value)\n  )\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(value, encodingOrOffset, length)\n}\n\n// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n// https://github.com/feross/buffer/pull/148\nObject.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)\nObject.setPrototypeOf(Buffer, Uint8Array)\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be of type number')\n  } else if (size < 0) {\n    throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n  }\n}\n\nfunction alloc (size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpreted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(size).fill(fill, encoding)\n      : createBuffer(size).fill(fill)\n  }\n  return createBuffer(size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  assertSize(size)\n  return createBuffer(size < 0 ? 0 : checked(size) | 0)\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(size)\n}\n\nfunction fromString (string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('Unknown encoding: ' + encoding)\n  }\n\n  const length = byteLength(string, encoding) | 0\n  let buf = createBuffer(length)\n\n  const actual = buf.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    buf = buf.slice(0, actual)\n  }\n\n  return buf\n}\n\nfunction fromArrayLike (array) {\n  const length = array.length < 0 ? 0 : checked(array.length) | 0\n  const buf = createBuffer(length)\n  for (let i = 0; i < length; i += 1) {\n    buf[i] = array[i] & 255\n  }\n  return buf\n}\n\nfunction fromArrayView (arrayView) {\n  if (isInstance(arrayView, Uint8Array)) {\n    const copy = new Uint8Array(arrayView)\n    return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)\n  }\n  return fromArrayLike(arrayView)\n}\n\nfunction fromArrayBuffer (array, byteOffset, length) {\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\"offset\" is outside of buffer bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\"length\" is outside of buffer bounds')\n  }\n\n  let buf\n  if (byteOffset === undefined && length === undefined) {\n    buf = new Uint8Array(array)\n  } else if (length === undefined) {\n    buf = new Uint8Array(array, byteOffset)\n  } else {\n    buf = new Uint8Array(array, byteOffset, length)\n  }\n\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(buf, Buffer.prototype)\n\n  return buf\n}\n\nfunction fromObject (obj) {\n  if (Buffer.isBuffer(obj)) {\n    const len = checked(obj.length) | 0\n    const buf = createBuffer(len)\n\n    if (buf.length === 0) {\n      return buf\n    }\n\n    obj.copy(buf, 0, 0, len)\n    return buf\n  }\n\n  if (obj.length !== undefined) {\n    if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n      return createBuffer(0)\n    }\n    return fromArrayLike(obj)\n  }\n\n  if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n    return fromArrayLike(obj.data)\n  }\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= K_MAX_LENGTH) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return b != null && b._isBuffer === true &&\n    b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false\n}\n\nBuffer.compare = function compare (a, b) {\n  if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)\n  if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError(\n      'The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array'\n    )\n  }\n\n  if (a === b) return 0\n\n  let x = a.length\n  let y = b.length\n\n  for (let i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!Array.isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  let i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  const buffer = Buffer.allocUnsafe(length)\n  let pos = 0\n  for (i = 0; i < list.length; ++i) {\n    let buf = list[i]\n    if (isInstance(buf, Uint8Array)) {\n      if (pos + buf.length > buffer.length) {\n        if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf)\n        buf.copy(buffer, pos)\n      } else {\n        Uint8Array.prototype.set.call(\n          buffer,\n          buf,\n          pos\n        )\n      }\n    } else if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    } else {\n      buf.copy(buffer, pos)\n    }\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    throw new TypeError(\n      'The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' +\n      'Received type ' + typeof string\n    )\n  }\n\n  const len = string.length\n  const mustMatch = (arguments.length > 2 && arguments[2] === true)\n  if (!mustMatch && len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) {\n          return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8\n        }\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  let loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coercion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n// to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n// reliably in a browserify context because there could be multiple different\n// copies of the 'buffer' package in use. This method works even for Buffer\n// instances that were created from another copy of the `buffer` package.\n// See: https://github.com/feross/buffer/issues/154\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  const i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  const len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (let i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  const len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (let i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  const len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (let i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  const length = this.length\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.toLocaleString = Buffer.prototype.toString\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  let str = ''\n  const max = exports.INSPECT_MAX_BYTES\n  str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()\n  if (this.length > max) str += ' ... '\n  return '<Buffer ' + str + '>'\n}\nif (customInspectSymbol) {\n  Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (isInstance(target, Uint8Array)) {\n    target = Buffer.from(target, target.offset, target.byteLength)\n  }\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError(\n      'The \"target\" argument must be one of type Buffer or Uint8Array. ' +\n      'Received type ' + (typeof target)\n    )\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  let x = thisEnd - thisStart\n  let y = end - start\n  const len = Math.min(x, y)\n\n  const thisCopy = this.slice(thisStart, thisEnd)\n  const targetCopy = target.slice(start, end)\n\n  for (let i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset // Coerce to Number.\n  if (numberIsNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  let indexSize = 1\n  let arrLength = arr.length\n  let valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  let i\n  if (dir) {\n    let foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      let found = true\n      for (let j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  const remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  const strLen = string.length\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  let i\n  for (i = 0; i < length; ++i) {\n    const parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (numberIsNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset >>> 0\n    if (isFinite(length)) {\n      length = length >>> 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  const remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  let loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return asciiWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  const res = []\n\n  let i = start\n  while (i < end) {\n    const firstByte = buf[i]\n    let codePoint = null\n    let bytesPerSequence = (firstByte > 0xEF)\n      ? 4\n      : (firstByte > 0xDF)\n          ? 3\n          : (firstByte > 0xBF)\n              ? 2\n              : 1\n\n    if (i + bytesPerSequence <= end) {\n      let secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nconst MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  const len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  let res = ''\n  let i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  let ret = ''\n  end = Math.min(buf.length, end)\n\n  for (let i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  const len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  let out = ''\n  for (let i = start; i < end; ++i) {\n    out += hexSliceLookupTable[buf[i]]\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  const bytes = buf.slice(start, end)\n  let res = ''\n  // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)\n  for (let i = 0; i < bytes.length - 1; i += 2) {\n    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  const len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  const newBuf = this.subarray(start, end)\n  // Return an augmented `Uint8Array` instance\n  Object.setPrototypeOf(newBuf, Buffer.prototype)\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUintLE =\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUintBE =\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  let val = this[offset + --byteLength]\n  let mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUint8 =\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUint16LE =\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUint16BE =\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUint32LE =\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUint32BE =\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const lo = first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24\n\n  const hi = this[++offset] +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    last * 2 ** 24\n\n  return BigInt(lo) + (BigInt(hi) << BigInt(32))\n})\n\nBuffer.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const hi = first * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  const lo = this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last\n\n  return (BigInt(hi) << BigInt(32)) + BigInt(lo)\n})\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let val = this[offset]\n  let mul = 1\n  let i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  let i = byteLength\n  let mul = 1\n  let val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  const val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = this[offset + 4] +\n    this[offset + 5] * 2 ** 8 +\n    this[offset + 6] * 2 ** 16 +\n    (last << 24) // Overflow\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(first +\n    this[++offset] * 2 ** 8 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 24)\n})\n\nBuffer.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE (offset) {\n  offset = offset >>> 0\n  validateNumber(offset, 'offset')\n  const first = this[offset]\n  const last = this[offset + 7]\n  if (first === undefined || last === undefined) {\n    boundsError(offset, this.length - 8)\n  }\n\n  const val = (first << 24) + // Overflow\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    this[++offset]\n\n  return (BigInt(val) << BigInt(32)) +\n    BigInt(this[++offset] * 2 ** 24 +\n    this[++offset] * 2 ** 16 +\n    this[++offset] * 2 ** 8 +\n    last)\n})\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  offset = offset >>> 0\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUintLE =\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let mul = 1\n  let i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUintBE =\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  byteLength = byteLength >>> 0\n  if (!noAssert) {\n    const maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUint8 =\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeUint16LE =\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint16BE =\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeUint32LE =\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset + 3] = (value >>> 24)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 1] = (value >>> 8)\n  this[offset] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeUint32BE =\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nfunction wrtBigUInt64LE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  lo = lo >> 8\n  buf[offset++] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  hi = hi >> 8\n  buf[offset++] = hi\n  return offset\n}\n\nfunction wrtBigUInt64BE (buf, value, offset, min, max) {\n  checkIntBI(value, min, max, buf, offset, 7)\n\n  let lo = Number(value & BigInt(0xffffffff))\n  buf[offset + 7] = lo\n  lo = lo >> 8\n  buf[offset + 6] = lo\n  lo = lo >> 8\n  buf[offset + 5] = lo\n  lo = lo >> 8\n  buf[offset + 4] = lo\n  let hi = Number(value >> BigInt(32) & BigInt(0xffffffff))\n  buf[offset + 3] = hi\n  hi = hi >> 8\n  buf[offset + 2] = hi\n  hi = hi >> 8\n  buf[offset + 1] = hi\n  hi = hi >> 8\n  buf[offset] = hi\n  return offset + 8\n}\n\nBuffer.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt('0xffffffffffffffff'))\n})\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = 0\n  let mul = 1\n  let sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    const limit = Math.pow(2, (8 * byteLength) - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  let i = byteLength - 1\n  let mul = 1\n  let sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  this[offset] = (value >>> 8)\n  this[offset + 1] = (value & 0xff)\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  this[offset] = (value & 0xff)\n  this[offset + 1] = (value >>> 8)\n  this[offset + 2] = (value >>> 16)\n  this[offset + 3] = (value >>> 24)\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  this[offset] = (value >>> 24)\n  this[offset + 1] = (value >>> 16)\n  this[offset + 2] = (value >>> 8)\n  this[offset + 3] = (value & 0xff)\n  return offset + 4\n}\n\nBuffer.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE (value, offset = 0) {\n  return wrtBigUInt64LE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nBuffer.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE (value, offset = 0) {\n  return wrtBigUInt64BE(this, value, offset, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'))\n})\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  value = +value\n  offset = offset >>> 0\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('Index out of range')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  const len = end - start\n\n  if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n    // Use built-in when available, missing from IE11\n    this.copyWithin(targetStart, start, end)\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, end),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n    if (val.length === 1) {\n      const code = val.charCodeAt(0)\n      if ((encoding === 'utf8' && code < 128) ||\n          encoding === 'latin1') {\n        // Fast path: If `val` fits into a single byte, use that numeric value.\n        val = code\n      }\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  } else if (typeof val === 'boolean') {\n    val = Number(val)\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  let i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    const bytes = Buffer.isBuffer(val)\n      ? val\n      : Buffer.from(val, encoding)\n    const len = bytes.length\n    if (len === 0) {\n      throw new TypeError('The value \"' + val +\n        '\" is invalid for argument \"value\"')\n    }\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// CUSTOM ERRORS\n// =============\n\n// Simplified versions from Node, changed for Buffer-only usage\nconst errors = {}\nfunction E (sym, getMessage, Base) {\n  errors[sym] = class NodeError extends Base {\n    constructor () {\n      super()\n\n      Object.defineProperty(this, 'message', {\n        value: getMessage.apply(this, arguments),\n        writable: true,\n        configurable: true\n      })\n\n      // Add the error code to the name to include it in the stack trace.\n      this.name = `${this.name} [${sym}]`\n      // Access the stack to generate the error message including the error code\n      // from the name.\n      this.stack // eslint-disable-line no-unused-expressions\n      // Reset the name to the actual name.\n      delete this.name\n    }\n\n    get code () {\n      return sym\n    }\n\n    set code (value) {\n      Object.defineProperty(this, 'code', {\n        configurable: true,\n        enumerable: true,\n        value,\n        writable: true\n      })\n    }\n\n    toString () {\n      return `${this.name} [${sym}]: ${this.message}`\n    }\n  }\n}\n\nE('ERR_BUFFER_OUT_OF_BOUNDS',\n  function (name) {\n    if (name) {\n      return `${name} is outside of buffer bounds`\n    }\n\n    return 'Attempt to access memory outside buffer bounds'\n  }, RangeError)\nE('ERR_INVALID_ARG_TYPE',\n  function (name, actual) {\n    return `The \"${name}\" argument must be of type number. Received type ${typeof actual}`\n  }, TypeError)\nE('ERR_OUT_OF_RANGE',\n  function (str, range, input) {\n    let msg = `The value of \"${str}\" is out of range.`\n    let received = input\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    }\n    msg += ` It must be ${range}. Received ${received}`\n    return msg\n  }, RangeError)\n\nfunction addNumericalSeparator (val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\n\n// CHECK FUNCTIONS\n// ===============\n\nfunction checkBounds (buf, offset, byteLength) {\n  validateNumber(offset, 'offset')\n  if (buf[offset] === undefined || buf[offset + byteLength] === undefined) {\n    boundsError(offset, buf.length - (byteLength + 1))\n  }\n}\n\nfunction checkIntBI (value, min, max, buf, offset, byteLength) {\n  if (value > max || value < min) {\n    const n = typeof min === 'bigint' ? 'n' : ''\n    let range\n    if (byteLength > 3) {\n      if (min === 0 || min === BigInt(0)) {\n        range = `>= 0${n} and < 2${n} ** ${(byteLength + 1) * 8}${n}`\n      } else {\n        range = `>= -(2${n} ** ${(byteLength + 1) * 8 - 1}${n}) and < 2 ** ` +\n                `${(byteLength + 1) * 8 - 1}${n}`\n      }\n    } else {\n      range = `>= ${min}${n} and <= ${max}${n}`\n    }\n    throw new errors.ERR_OUT_OF_RANGE('value', range, value)\n  }\n  checkBounds(buf, offset, byteLength)\n}\n\nfunction validateNumber (value, name) {\n  if (typeof value !== 'number') {\n    throw new errors.ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n}\n\nfunction boundsError (value, length, type) {\n  if (Math.floor(value) !== value) {\n    validateNumber(value, type)\n    throw new errors.ERR_OUT_OF_RANGE(type || 'offset', 'an integer', value)\n  }\n\n  if (length < 0) {\n    throw new errors.ERR_BUFFER_OUT_OF_BOUNDS()\n  }\n\n  throw new errors.ERR_OUT_OF_RANGE(type || 'offset',\n                                    `>= ${type ? 1 : 0} and <= ${length}`,\n                                    value)\n}\n\n// HELPER FUNCTIONS\n// ================\n\nconst INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node takes equal signs as end of the Base64 encoding\n  str = str.split('=')[0]\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = str.trim().replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  let codePoint\n  const length = string.length\n  let leadSurrogate = null\n  const bytes = []\n\n  for (let i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  let c, hi, lo\n  const byteArray = []\n  for (let i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  let i\n  for (i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\n// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n// the `instanceof` check but they should be treated as of that type.\n// See: https://github.com/feross/buffer/issues/166\nfunction isInstance (obj, type) {\n  return obj instanceof type ||\n    (obj != null && obj.constructor != null && obj.constructor.name != null &&\n      obj.constructor.name === type.name)\n}\nfunction numberIsNaN (obj) {\n  // For IE11 support\n  return obj !== obj // eslint-disable-line no-self-compare\n}\n\n// Create lookup table for `toString('hex')`\n// See: https://github.com/feross/buffer/issues/219\nconst hexSliceLookupTable = (function () {\n  const alphabet = '0123456789abcdef'\n  const table = new Array(256)\n  for (let i = 0; i < 16; ++i) {\n    const i16 = i * 16\n    for (let j = 0; j < 16; ++j) {\n      table[i16 + j] = alphabet[i] + alphabet[j]\n    }\n  }\n  return table\n})()\n\n// Return not function with Error if BigInt not supported\nfunction defineBigIntMethod (fn) {\n  return typeof BigInt === 'undefined' ? BufferBigIntNotDefined : fn\n}\n\nfunction BufferBigIntNotDefined () {\n  throw new Error('BigInt not supported')\n}\n","import { createFetchMiddleware } from \"@toruslabs/base-controllers\";\nimport { JRPCEngineEndCallback, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig } from \"@web3auth/base\";\n\nexport function createChainIdMiddleware(chainId: string): JRPCMiddleware<unknown, unknown> {\n  return (req: JRPCRequest<unknown>, res: JRPCResponse<string>, next: JRPCEngineNextCallback, end: JRPCEngineEndCallback) => {\n    if (req.method === \"solana_chainId\") {\n      res.result = chainId;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createProviderConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  return (\n    req: JRPCRequest<unknown>,\n    res: JRPCResponse<Omit<CustomChainConfig, \"chainNamespace\">>,\n    next: JRPCEngineNextCallback,\n    end: JRPCEngineEndCallback\n  ) => {\n    if (req.method === \"solana_provider_config\") {\n      res.result = providerConfig;\n      return end();\n    }\n    return next();\n  };\n}\n\nexport function createConfigMiddleware(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): JRPCMiddleware<unknown, unknown> {\n  const { chainId } = providerConfig;\n\n  return mergeMiddleware([createChainIdMiddleware(chainId), createProviderConfigMiddleware(providerConfig)]);\n}\n\nexport function createJsonRpcClient(providerConfig: Omit<CustomChainConfig, \"chainNamespace\">): {\n  networkMiddleware: JRPCMiddleware<unknown, unknown>;\n  fetchMiddleware: JRPCMiddleware<unknown, unknown>;\n} {\n  const { rpcTarget } = providerConfig;\n  const fetchMiddleware = createFetchMiddleware({ rpcTarget });\n  const networkMiddleware = mergeMiddleware([createConfigMiddleware(providerConfig), fetchMiddleware]);\n  return { networkMiddleware, fetchMiddleware };\n}\n","import type { Transaction } from \"@solana/web3.js\";\nimport { createAsyncMiddleware, JRPCMiddleware, JRPCRequest, mergeMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nexport interface IProviderHandlers {\n  requestAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getAccounts: (req: JRPCRequest<unknown>) => Promise<string[]>;\n  getPrivateKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<Transaction>;\n  signAllTransactions: (req: JRPCRequest<{ message: Transaction[] }>) => Promise<Transaction[]>;\n  signAndSendTransaction: (req: JRPCRequest<{ message: Transaction }>) => Promise<{ signature: string }>;\n  getSecretKey: (req: JRPCRequest<unknown>) => Promise<string>;\n  signMessage: (req: JRPCRequest<{ message: Uint8Array; display?: string }>) => Promise<Uint8Array>;\n}\n\nexport function createGetAccountsMiddleware({ getAccounts }: { getAccounts: IProviderHandlers[\"getAccounts\"] }): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"getAccounts\") return next();\n\n    if (!getAccounts) throw new Error(\"WalletMiddleware - opts.getAccounts not provided\");\n    // This calls from the prefs controller\n    const accounts = await getAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createRequestAccountsMiddleware({\n  requestAccounts,\n}: {\n  requestAccounts: IProviderHandlers[\"requestAccounts\"];\n}): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (request, response, next) => {\n    const { method } = request;\n    if (method !== \"requestAccounts\") return next();\n\n    if (!requestAccounts) throw new Error(\"WalletMiddleware - opts.requestAccounts not provided\");\n    // This calls the UI login function\n    const accounts = await requestAccounts(request);\n    response.result = accounts;\n    return undefined;\n  });\n}\n\nexport function createGenericJRPCMiddleware<T, U>(\n  targetMethod: string,\n  handler: (req: JRPCRequest<T>) => Promise<U>\n): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware<T, unknown>(async (request, response, next) => {\n    const { method } = request;\n    if (method !== targetMethod) return next();\n\n    if (!handler) throw new Error(`WalletMiddleware - ${targetMethod} not provided`);\n\n    const result = await handler(request);\n\n    response.result = result;\n    return undefined;\n  });\n}\n\nexport function createSolanaMiddleware(providerHandlers: IProviderHandlers): JRPCMiddleware<unknown, unknown> {\n  const { getAccounts, requestAccounts, signTransaction, signAndSendTransaction, signAllTransactions, signMessage, getPrivateKey, getSecretKey } =\n    providerHandlers;\n\n  return mergeMiddleware([\n    createRequestAccountsMiddleware({ requestAccounts }),\n    createGetAccountsMiddleware({ getAccounts }),\n    createGenericJRPCMiddleware<{ message: Transaction }, Transaction>(\"signTransaction\", signTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction }, { signature: string }>(\"signAndSendTransaction\", signAndSendTransaction),\n    createGenericJRPCMiddleware<{ message: Transaction[] }, Transaction[]>(\"signAllTransactions\", signAllTransactions),\n    createGenericJRPCMiddleware<{ message: Uint8Array }, Uint8Array>(\"signMessage\", signMessage),\n    createGenericJRPCMiddleware<void, string>(\"solanaPrivateKey\", getPrivateKey),\n    createGenericJRPCMiddleware<void, string>(\"solanaSecretKey\", getSecretKey),\n  ]);\n}\nexport interface AddSolanaChainParameter {\n  chainId: string; // A 0x-prefixed hexadecimal string\n  chainName: string;\n  nativeCurrency: {\n    name: string;\n    symbol: string; // 2-6 characters long\n    decimals: 18;\n  };\n  rpcUrls: string[];\n  blockExplorerUrls?: string[];\n}\n\nexport interface IChainSwitchHandlers {\n  addNewChainConfig: (req: JRPCRequest<AddSolanaChainParameter>) => Promise<void>;\n  switchSolanaChain: (req: JRPCRequest<{ chainId: string }>) => Promise<void>;\n}\nexport function createChainSwitchMiddleware({ addNewChainConfig, switchSolanaChain }: IChainSwitchHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([\n    createGenericJRPCMiddleware<AddSolanaChainParameter, void>(\"addSolanaChain\", addNewChainConfig),\n    createGenericJRPCMiddleware<{ chainId: string }, void>(\"switchSolanaChain\", switchSolanaChain),\n  ]);\n}\n\nexport interface IAccountHandlers {\n  updatePrivatekey: (req: JRPCRequest<{ privateKey: string }>) => Promise<void>;\n}\nexport function createAccountMiddleware({ updatePrivatekey }: IAccountHandlers): JRPCMiddleware<unknown, unknown> {\n  return mergeMiddleware([createGenericJRPCMiddleware<{ privateKey: string }, void>(\"updateAccount\", updatePrivatekey)]);\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\n\nimport { createConfigMiddleware } from \"../../../rpc/JrpcClient\";\nimport { createSolanaMiddleware, IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport abstract class BaseInjectedProvider<P> extends BaseProvider<BaseProviderConfig, BaseProviderState, P> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: P): Promise<void> {\n    const engine = new JRPCEngine();\n\n    const providerHandlers = this.getProviderHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    engine.push(solanaMiddleware);\n\n    const configMiddleware = createConfigMiddleware(this.config.chainConfig as CustomChainConfig);\n    engine.push(configMiddleware);\n\n    const injectedProviderProxy = this.getInjectedProviderProxy(injectedProvider);\n    if (injectedProviderProxy) {\n      engine.push(injectedProviderProxy);\n    }\n\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    const { chainConfig } = this.config;\n    this.update({\n      chainId: chainConfig.chainId,\n    });\n    return chainConfig.chainId || \"\";\n  }\n\n  protected getInjectedProviderProxy(_: P): JRPCMiddleware<unknown, unknown> {\n    return undefined;\n  }\n\n  protected abstract getProviderHandlers(injectedProvider: P): IProviderHandlers;\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getBaseProviderHandlers = (injectedProvider: IBaseWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : [];\n    },\n    getAccounts: async () => (injectedProvider.publicKey ? [bs58.encode(injectedProvider.publicKey.toBytes())] : []),\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const transaction = await injectedProvider.signTransaction(req.params.message);\n      return transaction;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array; display?: \"utf8\" | \"hex\" }>): Promise<Uint8Array> => {\n      const sigData = await injectedProvider.signMessage(req.params.message, req.params.display);\n      return sigData.signature;\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = await injectedProvider.signAllTransactions(req.params.message);\n      return transaction;\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const txRes = await injectedProvider.signAndSendTransaction(req.params.message);\n      return { signature: txRes.signature };\n    },\n  };\n  return providerHandlers;\n};\n","import { createAsyncMiddleware, JRPCEngineNextCallback, JRPCMiddleware, JRPCRequest, JRPCResponse } from \"@toruslabs/openlogin-jrpc\";\n\nimport { InjectedProvider } from \"./interface\";\n\nexport function createInjectedProviderProxyMiddleware(provider: InjectedProvider): JRPCMiddleware<unknown, unknown> {\n  return createAsyncMiddleware(async (req: JRPCRequest<unknown[]>, res: JRPCResponse<unknown>, _next: JRPCEngineNextCallback) => {\n    const result = await provider.request({\n      ...req,\n    });\n    res.result = result;\n  });\n}\n","import { JRPCMiddleware } from \"@toruslabs/openlogin-jrpc\";\n\nimport { IPhantomWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\n\nexport class PhantomInjectedProvider extends BaseInjectedProvider<IPhantomWalletProvider> {\n  protected getProviderHandlers(injectedProvider: IPhantomWalletProvider): IProviderHandlers {\n    return getBaseProviderHandlers(injectedProvider);\n  }\n\n  protected getInjectedProviderProxy(injectedProvider: IPhantomWalletProvider): JRPCMiddleware<unknown, unknown> {\n    return createInjectedProviderProxyMiddleware(injectedProvider);\n  }\n}\n","import { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSlopeHandlers } from \"./providerHandlers\";\n\nexport class SlopeInjectedProxyProvider extends BaseInjectedProvider<ISlopeProvider> {\n  protected getProviderHandlers(injectedProvider: ISlopeProvider): IProviderHandlers {\n    return getSlopeHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, PublicKey, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ISlopeProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getSlopeHandlers = (injectedProvider: ISlopeProvider, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getAccounts: async () => {\n      const { data } = await injectedProvider.connect();\n      return [data.publicKey];\n    },\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      return txMessage;\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      const response = await injectedProvider.signMessage(req.params.message);\n      return bs58.decode(response.data.signature);\n    },\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      const provider = getProviderEngineProxy();\n      if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n      const txMessage = req.params.message;\n      if (!txMessage) throw ethErrors.rpc.invalidRequest({ message: \"Invalid transaction message\" });\n      const { data } = await injectedProvider.signTransaction(bs58.encode(txMessage.serializeMessage()));\n      if (!data.publicKey || !data.signature) throw new Error(\"Invalid signature from slope wallet\");\n      const publicKey = new PublicKey(data.publicKey);\n      const signature = bs58.decode(data.signature);\n      txMessage.addSignature(publicKey, signature);\n      const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n      const conn = new Connection(chainConfig.rpcTarget);\n      const res = await conn.sendRawTransaction(txMessage.serialize());\n      return { signature: res };\n    },\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const allTxns = req.params.message;\n      const { length } = allTxns;\n\n      const unsignedTx = [];\n\n      for (let i = 0; i < length; i++) {\n        unsignedTx.push(bs58.encode(req.params.message[i].serializeMessage()));\n      }\n      const { msg, data } = await injectedProvider.signAllTransactions(unsignedTx);\n\n      if (!data.publicKey || data.signatures?.length !== length) throw new Error(msg);\n\n      const publicKey = new PublicKey(data.publicKey);\n\n      for (let i = 0; i < length; i++) {\n        const signature = bs58.decode(data.signatures[i]);\n        allTxns[i].addSignature(publicKey, signature);\n      }\n\n      return allTxns;\n    },\n  };\n  return providerHandlers;\n};\n","import { SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolflareHandlers } from \"./providerHandlers\";\n\nexport class SolflareInjectedProvider extends BaseInjectedProvider<SolflareWallet> {\n  protected getProviderHandlers(injectedProvider: SolflareWallet): IProviderHandlers {\n    return getSolflareHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider, SolflareWallet } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolflareHandlers = (injectedProvider: SolflareWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const solflareProviderHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  solflareProviderHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return solflareProviderHandlers;\n};\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\n\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { BaseInjectedProvider } from \"../base/baseInjectedProvider\";\nimport { getSolletHandlers } from \"./providerHandlers\";\n\nexport class SolletInjectedProvider extends BaseInjectedProvider<SolletWallet> {\n  protected getProviderHandlers(injectedProvider: SolletWallet): IProviderHandlers {\n    return getSolletHandlers(injectedProvider, this.getProviderEngineProxy.bind(this));\n  }\n}\n","import type SolletWallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CustomChainConfig, SafeEventEmitterProvider } from \"@web3auth/base\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IBaseWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { getBaseProviderHandlers } from \"../base/providerHandlers\";\n\nexport const getSolletHandlers = (injectedProvider: SolletWallet, getProviderEngineProxy: () => SafeEventEmitterProvider): IProviderHandlers => {\n  const providerHandlers = getBaseProviderHandlers(injectedProvider as IBaseWalletProvider);\n  providerHandlers.signMessage = async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n    const { signature } = await injectedProvider.sign(req.params.message, \"utf8\");\n    return signature;\n  };\n  providerHandlers.signAndSendTransaction = async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n    const provider = getProviderEngineProxy();\n    if (!provider) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const transaction = await injectedProvider.signTransaction(req.params.message);\n    const chainConfig = (await provider.request<CustomChainConfig>({ method: \"solana_provider_config\", params: [] })) as CustomChainConfig;\n    const conn = new Connection(chainConfig.rpcTarget);\n    const res = await conn.sendRawTransaction(transaction.serialize());\n    return { signature: res };\n  };\n  return providerHandlers;\n};\n","import { Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { IProviderHandlers } from \"../../../rpc/solanaRpcMiddlewares\";\n\nexport const getTorusHandlers = (injectedProvider: ITorusWalletProvider): IProviderHandlers => {\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getAccounts: async () => {\n      const accounts = await injectedProvider.request<string[]>({\n        method: \"solana_requestAccounts\",\n        params: {},\n      });\n      return accounts;\n    },\n\n    getPrivateKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    getSecretKey: async () => {\n      throw ethErrors.rpc.methodNotSupported();\n    },\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const message = await injectedProvider.signMessage(req.params.message);\n      return message;\n    },\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.signTransaction(txMessage);\n      return response;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const txMessage = req.params.message;\n      const response = await injectedProvider.sendTransaction(txMessage);\n      return { signature: response };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transactions = req.params.message;\n      const response = await injectedProvider.signAllTransactions(transactions);\n      return response;\n    },\n  };\n  return providerHandlers;\n};\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, isHexStrict, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { ITorusWalletProvider } from \"../../../interface\";\nimport { createSolanaMiddleware } from \"../../../rpc/solanaRpcMiddlewares\";\nimport { createInjectedProviderProxyMiddleware } from \"../injectedProviderProxy\";\nimport { getTorusHandlers } from \"./providerHandlers\";\n\nexport class TorusInjectedProvider extends BaseProvider<BaseProviderConfig, BaseProviderState, ITorusWalletProvider> {\n  constructor({ config, state }: { config: BaseProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public async switchChain(_: { chainId: string }): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async setupProvider(injectedProvider: ITorusWalletProvider): Promise<void> {\n    this.handleInjectedProviderUpdate(injectedProvider);\n    await this.setupEngine(injectedProvider);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this.provider) throw ethErrors.provider.custom({ message: \"Torus solana provider is not initialized\", code: 4902 });\n    const { chainId } = this.config.chainConfig;\n\n    const connectedChainId = await this.provider.request<unknown, string>({\n      method: \"solana_chainId\",\n    });\n\n    const connectedHexChainId = isHexStrict(connectedChainId.toString()) ? connectedChainId : `0x${parseInt(connectedChainId, 10).toString(16)}`;\n    if (chainId !== connectedHexChainId)\n      throw WalletInitializationError.rpcConnectionError(`Invalid network, net_version is: ${connectedHexChainId}, expected: ${chainId}`);\n\n    this.update({ chainId: connectedHexChainId });\n    this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    this.provider.emit(\"chainChanged\", this.state.chainId);\n    return this.state.chainId;\n  }\n\n  private async setupEngine(injectedProvider: ITorusWalletProvider): Promise<void> {\n    const providerHandlers = getTorusHandlers(injectedProvider);\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n    const injectedProviderProxy = createInjectedProviderProxyMiddleware(injectedProvider);\n    const engine = new JRPCEngine();\n    engine.push(solanaMiddleware);\n    engine.push(injectedProviderProxy);\n    const provider = providerFromEngine(engine);\n    this.updateProviderEngineProxy(provider);\n    await this.lookupNetwork();\n  }\n\n  private async handleInjectedProviderUpdate(injectedProvider: ITorusWalletProvider): Promise<void> {\n    injectedProvider.on(\"accountsChanged\", async (accounts: string[]) => {\n      this.provider.emit(\"accountsChanged\", accounts);\n    });\n    injectedProvider.on(\"chainChanged\", async (chainId: string) => {\n      const connectedHexChainId = isHexStrict(chainId) ? chainId : `0x${parseInt(chainId, 10).toString(16)}`;\n      // Check if chainId changed and trigger event\n      this.configure({\n        chainConfig: { ...this.config.chainConfig, chainId: connectedHexChainId },\n      });\n      await this.setupProvider(injectedProvider);\n    });\n  }\n}\n","import { Keypair, Transaction } from \"@solana/web3.js\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport nacl from \"@toruslabs/tweetnacl-js\";\nimport { SafeEventEmitterProvider, WalletInitializationError } from \"@web3auth/base\";\nimport bs58 from \"bs58\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { IProviderHandlers } from \"../../rpc/solanaRpcMiddlewares\";\n\nexport async function getProviderHandlers({\n  privKey,\n  getProviderEngineProxy,\n}: {\n  privKey: string;\n  getProviderEngineProxy: () => SafeEventEmitterProvider | null;\n}): Promise<IProviderHandlers> {\n  const keyPairGenerator = (): Keypair => {\n    return Keypair.fromSecretKey(Buffer.from(privKey, \"hex\"));\n  };\n  if (typeof privKey !== \"string\") throw WalletInitializationError.invalidParams(\"privKey must be a string\");\n  const keyPair = keyPairGenerator();\n  const providerHandlers: IProviderHandlers = {\n    requestAccounts: async () => {\n      return [keyPair.publicKey.toBase58()];\n    },\n    getAccounts: async () => [keyPair.publicKey.toBase58()],\n\n    getPrivateKey: async () => privKey,\n    getSecretKey: async () => bs58.encode(keyPair.secretKey),\n\n    signTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<Transaction> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const transaction = req.params.message;\n      transaction.partialSign(keyPair);\n      return transaction;\n    },\n\n    signMessage: async (req: JRPCRequest<{ message: Uint8Array }>): Promise<Uint8Array> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const signedMsg = nacl.sign.detached(req.params.message, keyPair.secretKey);\n      return signedMsg;\n    },\n\n    signAndSendTransaction: async (req: JRPCRequest<{ message: Transaction }>): Promise<{ signature: string }> => {\n      if (!req.params?.message) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n      const _providerEngineProxy = getProviderEngineProxy();\n      if (!_providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n\n      const transaction = req.params.message;\n      transaction.sign(keyPair);\n\n      const sig = await _providerEngineProxy.request<string>({\n        method: \"sendTransaction\",\n        params: [bs58.encode(transaction.serialize())],\n      });\n      return { signature: sig };\n    },\n\n    signAllTransactions: async (req: JRPCRequest<{ message: Transaction[] }>): Promise<Transaction[]> => {\n      if (!req.params?.message || !req.params?.message.length) {\n        throw ethErrors.rpc.invalidParams(\"message\");\n      }\n\n      const txns = req.params?.message;\n      for (const tx of txns || []) {\n        const transaction = tx;\n        transaction.partialSign(keyPair);\n      }\n      return txns;\n    },\n  };\n\n  return providerHandlers;\n}\n","import { providerFromEngine } from \"@toruslabs/base-controllers\";\nimport { JRPCEngine, JRPCMiddleware, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { CHAIN_NAMESPACES, CustomChainConfig, WalletInitializationError } from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { ethErrors } from \"eth-rpc-errors\";\n\nimport { createJsonRpcClient } from \"../../rpc/JrpcClient\";\nimport {\n  AddSolanaChainParameter,\n  createAccountMiddleware,\n  createChainSwitchMiddleware,\n  createSolanaMiddleware,\n  IAccountHandlers,\n  IChainSwitchHandlers,\n} from \"../../rpc/solanaRpcMiddlewares\";\nimport { getProviderHandlers } from \"./solanaPrivateKeyUtils\";\n\nexport interface SolanaPrivKeyProviderConfig extends BaseProviderConfig {\n  chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n}\nexport interface SolanaPrivKeyProviderState extends BaseProviderState {\n  privateKey?: string;\n}\nexport class SolanaPrivateKeyProvider extends BaseProvider<BaseProviderConfig, SolanaPrivKeyProviderState, string> {\n  constructor({ config, state }: { config: SolanaPrivKeyProviderConfig; state?: BaseProviderState }) {\n    super({ config: { chainConfig: { ...config.chainConfig, chainNamespace: CHAIN_NAMESPACES.SOLANA } }, state });\n  }\n\n  public static getProviderInstance = async (params: {\n    privKey: string;\n    chainConfig: Omit<CustomChainConfig, \"chainNamespace\">;\n  }): Promise<SolanaPrivateKeyProvider> => {\n    const providerFactory = new SolanaPrivateKeyProvider({ config: { chainConfig: params.chainConfig } });\n    await providerFactory.setupProvider(params.privKey);\n    return providerFactory;\n  };\n\n  public async enable(): Promise<string[]> {\n    if (!this.state.privateKey)\n      throw ethErrors.provider.custom({ message: \"Private key is not found in state, plz pass it in constructor state param\", code: 4902 });\n    await this.setupProvider(this.state.privateKey);\n    return this._providerEngineProxy.request<unknown, string[]>({ method: \"eth_accounts\" });\n  }\n\n  public async setupProvider(privKey: string): Promise<void> {\n    const providerHandlers = await getProviderHandlers({ privKey, getProviderEngineProxy: this.getProviderEngineProxy.bind(this) });\n\n    const solanaMiddleware = createSolanaMiddleware(providerHandlers);\n\n    const engine = new JRPCEngine();\n    const { networkMiddleware } = createJsonRpcClient(this.config.chainConfig as CustomChainConfig);\n    engine.push(this.getChainSwitchMiddleware());\n    engine.push(this.getAccountMiddleware());\n    engine.push(solanaMiddleware);\n    engine.push(networkMiddleware);\n\n    const provider = providerFromEngine(engine);\n\n    this.updateProviderEngineProxy(provider);\n\n    await this.lookupNetwork();\n  }\n\n  public async updateAccount(params: { privateKey: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const existingKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    if (existingKey !== params.privateKey) {\n      await this.setupProvider(params.privateKey);\n      this._providerEngineProxy.emit(\"accountsChanged\", {\n        accounts: await this._providerEngineProxy.request<unknown, string[]>({ method: \"requestAccounts\" }),\n      });\n    }\n  }\n\n  public async switchChain(params: { chainId: string }): Promise<void> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const chainConfig = this.getChainConfig(params.chainId);\n    this.update({\n      chainId: \"loading\",\n    });\n    this.configure({ chainConfig });\n    const privKey = await this._providerEngineProxy.request<unknown, string>({ method: \"solanaPrivateKey\" });\n    await this.setupProvider(privKey);\n  }\n\n  protected async lookupNetwork(): Promise<string> {\n    if (!this._providerEngineProxy) throw ethErrors.provider.custom({ message: \"Provider is not initialized\", code: 4902 });\n    const health = await this._providerEngineProxy.request<unknown, string>({\n      method: \"getHealth\",\n      params: [],\n    });\n    const { chainConfig } = this.config;\n    if (health !== \"ok\")\n      throw WalletInitializationError.rpcConnectionError(`Failed to lookup network for following rpc target: ${chainConfig.rpcTarget}`);\n    this.update({ chainId: chainConfig.chainId });\n    if (this.state.chainId !== chainConfig.chainId) {\n      this.provider.emit(\"chainChanged\", this.state.chainId);\n      this.provider.emit(\"connect\", { chainId: this.state.chainId });\n    }\n    return this.state.chainId;\n  }\n\n  private getChainSwitchMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const chainSwitchHandlers: IChainSwitchHandlers = {\n      addNewChainConfig: async (req: JRPCRequest<AddSolanaChainParameter>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        const { chainId, chainName, rpcUrls, blockExplorerUrls, nativeCurrency } = req.params;\n\n        if (!chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId in chainParams\");\n        if (!rpcUrls || rpcUrls.length === 0) throw ethErrors.rpc.invalidParams(\"Missing rpcUrls in chainParams\");\n        if (!nativeCurrency) throw ethErrors.rpc.invalidParams(\"Missing nativeCurrency in chainParams\");\n        this.addChain({\n          chainNamespace: CHAIN_NAMESPACES.SOLANA,\n          chainId,\n          ticker: nativeCurrency?.symbol || \"SOL\",\n          tickerName: nativeCurrency?.name || \"Solana\",\n          displayName: chainName,\n          rpcTarget: rpcUrls[0],\n          blockExplorer: blockExplorerUrls?.[0] || \"\",\n        });\n      },\n      switchSolanaChain: async (req: JRPCRequest<{ chainId: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.chainId) throw ethErrors.rpc.invalidParams(\"Missing chainId\");\n        await this.switchChain(req.params);\n      },\n    };\n    const chainSwitchMiddleware = createChainSwitchMiddleware(chainSwitchHandlers);\n    return chainSwitchMiddleware;\n  }\n\n  private getAccountMiddleware(): JRPCMiddleware<unknown, unknown> {\n    const accountHandlers: IAccountHandlers = {\n      updatePrivatekey: async (req: JRPCRequest<{ privateKey: string }>): Promise<void> => {\n        if (!req.params) throw ethErrors.rpc.invalidParams(\"Missing request params\");\n        if (!req.params.privateKey) throw ethErrors.rpc.invalidParams(\"Missing privateKey\");\n        const { privateKey } = req.params;\n        await this.updateAccount({ privateKey });\n      },\n    };\n    return createAccountMiddleware(accountHandlers);\n  }\n}\n","import { Transaction } from \"@solana/web3.js\";\nimport { RequestArguments, SafeEventEmitterProvider } from \"@web3auth/base\";\n\nimport { ISolanaWallet } from \"./interface\";\n\nexport class SolanaWallet implements ISolanaWallet {\n  public provider: SafeEventEmitterProvider;\n\n  constructor(provider: SafeEventEmitterProvider) {\n    this.provider = provider;\n  }\n\n  public async requestAccounts(): Promise<string[]> {\n    const accounts = await this.provider.request<string[]>({\n      method: \"requestAccounts\",\n      params: {},\n    });\n    return accounts;\n  }\n\n  public async signAndSendTransaction(transaction: Transaction): Promise<{ signature: string }> {\n    const { signature } = await this.provider.request<{ signature: string }>({\n      method: \"signAndSendTransaction\",\n      params: {\n        message: transaction,\n      },\n    });\n    return { signature };\n  }\n\n  public async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const signedTransaction = (await this.provider.request({\n      method: \"signTransaction\",\n      params: {\n        message: transaction,\n      },\n    })) as Transaction;\n    return signedTransaction;\n  }\n\n  public async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const signedTransactions = (await this.provider.request({\n      method: \"signAllTransactions\",\n      params: {\n        message: transactions,\n      },\n    })) as Transaction[];\n    return signedTransactions;\n  }\n\n  public async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = await this.provider.request<Uint8Array>({\n      method: \"signMessage\",\n      params: {\n        message: data,\n      },\n    });\n    return response as Uint8Array;\n  }\n\n  public async request<T>(args: RequestArguments): Promise<T> {\n    const result = await this.provider.request<T>(args);\n    return result as T;\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", { value: true });\nlet converter;\n/**\n * Convert a little-endian buffer into a BigInt.\n * @param buf The little-endian buffer to convert\n * @returns A BigInt with the little-endian representation of buf.\n */\nfunction toBigIntLE(buf) {\n    {\n        const reversed = Buffer.from(buf);\n        reversed.reverse();\n        const hex = reversed.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, false);\n}\nexports.toBigIntLE = toBigIntLE;\n/**\n * Convert a big-endian buffer into a BigInt\n * @param buf The big-endian buffer to convert.\n * @returns A BigInt with the big-endian representation of buf.\n */\nfunction toBigIntBE(buf) {\n    {\n        const hex = buf.toString('hex');\n        if (hex.length === 0) {\n            return BigInt(0);\n        }\n        return BigInt(`0x${hex}`);\n    }\n    return converter.toBigInt(buf, true);\n}\nexports.toBigIntBE = toBigIntBE;\n/**\n * Convert a BigInt to a little-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A little-endian buffer representation of num.\n */\nfunction toBufferLE(num, width) {\n    {\n        const hex = num.toString(16);\n        const buffer = Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n        buffer.reverse();\n        return buffer;\n    }\n    // Allocation is done here, since it is slower using napi in C\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), false);\n}\nexports.toBufferLE = toBufferLE;\n/**\n * Convert a BigInt to a big-endian buffer.\n * @param num   The BigInt to convert.\n * @param width The number of bytes that the resulting buffer should be.\n * @returns A big-endian buffer representation of num.\n */\nfunction toBufferBE(num, width) {\n    {\n        const hex = num.toString(16);\n        return Buffer.from(hex.padStart(width * 2, '0').slice(0, width * 2), 'hex');\n    }\n    return converter.fromBigInt(num, Buffer.allocUnsafe(width), true);\n}\nexports.toBufferBE = toBufferBE;\n","\"use strict\";\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeUnchecked = exports.deserialize = exports.serialize = exports.BinaryReader = exports.BinaryWriter = exports.BorshError = exports.baseDecode = exports.baseEncode = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst bs58_1 = __importDefault(require(\"bs58\"));\n// TODO: Make sure this polyfill not included when not required\nconst encoding = __importStar(require(\"text-encoding-utf-8\"));\nconst ResolvedTextDecoder = typeof TextDecoder !== \"function\" ? encoding.TextDecoder : TextDecoder;\nconst textDecoder = new ResolvedTextDecoder(\"utf-8\", { fatal: true });\nfunction baseEncode(value) {\n    if (typeof value === \"string\") {\n        value = Buffer.from(value, \"utf8\");\n    }\n    return bs58_1.default.encode(Buffer.from(value));\n}\nexports.baseEncode = baseEncode;\nfunction baseDecode(value) {\n    return Buffer.from(bs58_1.default.decode(value));\n}\nexports.baseDecode = baseDecode;\nconst INITIAL_LENGTH = 1024;\nclass BorshError extends Error {\n    constructor(message) {\n        super(message);\n        this.fieldPath = [];\n        this.originalMessage = message;\n    }\n    addToFieldPath(fieldName) {\n        this.fieldPath.splice(0, 0, fieldName);\n        // NOTE: Modifying message directly as jest doesn't use .toString()\n        this.message = this.originalMessage + \": \" + this.fieldPath.join(\".\");\n    }\n}\nexports.BorshError = BorshError;\n/// Binary encoder.\nclass BinaryWriter {\n    constructor() {\n        this.buf = Buffer.alloc(INITIAL_LENGTH);\n        this.length = 0;\n    }\n    maybeResize() {\n        if (this.buf.length < 16 + this.length) {\n            this.buf = Buffer.concat([this.buf, Buffer.alloc(INITIAL_LENGTH)]);\n        }\n    }\n    writeU8(value) {\n        this.maybeResize();\n        this.buf.writeUInt8(value, this.length);\n        this.length += 1;\n    }\n    writeU16(value) {\n        this.maybeResize();\n        this.buf.writeUInt16LE(value, this.length);\n        this.length += 2;\n    }\n    writeU32(value) {\n        this.maybeResize();\n        this.buf.writeUInt32LE(value, this.length);\n        this.length += 4;\n    }\n    writeU64(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 8)));\n    }\n    writeU128(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 16)));\n    }\n    writeU256(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 32)));\n    }\n    writeU512(value) {\n        this.maybeResize();\n        this.writeBuffer(Buffer.from(new bn_js_1.default(value).toArray(\"le\", 64)));\n    }\n    writeBuffer(buffer) {\n        // Buffer.from is needed as this.buf.subarray can return plain Uint8Array in browser\n        this.buf = Buffer.concat([\n            Buffer.from(this.buf.subarray(0, this.length)),\n            buffer,\n            Buffer.alloc(INITIAL_LENGTH),\n        ]);\n        this.length += buffer.length;\n    }\n    writeString(str) {\n        this.maybeResize();\n        const b = Buffer.from(str, \"utf8\");\n        this.writeU32(b.length);\n        this.writeBuffer(b);\n    }\n    writeFixedArray(array) {\n        this.writeBuffer(Buffer.from(array));\n    }\n    writeArray(array, fn) {\n        this.maybeResize();\n        this.writeU32(array.length);\n        for (const elem of array) {\n            this.maybeResize();\n            fn(elem);\n        }\n    }\n    toArray() {\n        return this.buf.subarray(0, this.length);\n    }\n}\nexports.BinaryWriter = BinaryWriter;\nfunction handlingRangeError(target, propertyKey, propertyDescriptor) {\n    const originalMethod = propertyDescriptor.value;\n    propertyDescriptor.value = function (...args) {\n        try {\n            return originalMethod.apply(this, args);\n        }\n        catch (e) {\n            if (e instanceof RangeError) {\n                const code = e.code;\n                if ([\"ERR_BUFFER_OUT_OF_BOUNDS\", \"ERR_OUT_OF_RANGE\"].indexOf(code) >= 0) {\n                    throw new BorshError(\"Reached the end of buffer when deserializing\");\n                }\n            }\n            throw e;\n        }\n    };\n}\nclass BinaryReader {\n    constructor(buf) {\n        this.buf = buf;\n        this.offset = 0;\n    }\n    readU8() {\n        const value = this.buf.readUInt8(this.offset);\n        this.offset += 1;\n        return value;\n    }\n    readU16() {\n        const value = this.buf.readUInt16LE(this.offset);\n        this.offset += 2;\n        return value;\n    }\n    readU32() {\n        const value = this.buf.readUInt32LE(this.offset);\n        this.offset += 4;\n        return value;\n    }\n    readU64() {\n        const buf = this.readBuffer(8);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU128() {\n        const buf = this.readBuffer(16);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU256() {\n        const buf = this.readBuffer(32);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readU512() {\n        const buf = this.readBuffer(64);\n        return new bn_js_1.default(buf, \"le\");\n    }\n    readBuffer(len) {\n        if (this.offset + len > this.buf.length) {\n            throw new BorshError(`Expected buffer length ${len} isn't within bounds`);\n        }\n        const result = this.buf.slice(this.offset, this.offset + len);\n        this.offset += len;\n        return result;\n    }\n    readString() {\n        const len = this.readU32();\n        const buf = this.readBuffer(len);\n        try {\n            // NOTE: Using TextDecoder to fail on invalid UTF-8\n            return textDecoder.decode(buf);\n        }\n        catch (e) {\n            throw new BorshError(`Error decoding UTF-8 string: ${e}`);\n        }\n    }\n    readFixedArray(len) {\n        return new Uint8Array(this.readBuffer(len));\n    }\n    readArray(fn) {\n        const len = this.readU32();\n        const result = Array();\n        for (let i = 0; i < len; ++i) {\n            result.push(fn());\n        }\n        return result;\n    }\n}\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU8\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU16\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU32\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU64\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU128\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU256\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readU512\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readString\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readFixedArray\", null);\n__decorate([\n    handlingRangeError\n], BinaryReader.prototype, \"readArray\", null);\nexports.BinaryReader = BinaryReader;\nfunction capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\nfunction serializeField(schema, fieldName, value, fieldType, writer) {\n    try {\n        // TODO: Handle missing values properly (make sure they never result in just skipped write)\n        if (typeof fieldType === \"string\") {\n            writer[`write${capitalizeFirstLetter(fieldType)}`](value);\n        }\n        else if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                if (value.length !== fieldType[0]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[0]}, but got ${value.length} bytes`);\n                }\n                writer.writeFixedArray(value);\n            }\n            else if (fieldType.length === 2 && typeof fieldType[1] === \"number\") {\n                if (value.length !== fieldType[1]) {\n                    throw new BorshError(`Expecting byte array of length ${fieldType[1]}, but got ${value.length} bytes`);\n                }\n                for (let i = 0; i < fieldType[1]; i++) {\n                    serializeField(schema, null, value[i], fieldType[0], writer);\n                }\n            }\n            else {\n                writer.writeArray(value, (item) => {\n                    serializeField(schema, fieldName, item, fieldType[0], writer);\n                });\n            }\n        }\n        else if (fieldType.kind !== undefined) {\n            switch (fieldType.kind) {\n                case \"option\": {\n                    if (value === null || value === undefined) {\n                        writer.writeU8(0);\n                    }\n                    else {\n                        writer.writeU8(1);\n                        serializeField(schema, fieldName, value, fieldType.type, writer);\n                    }\n                    break;\n                }\n                case \"map\": {\n                    writer.writeU32(value.size);\n                    value.forEach((val, key) => {\n                        serializeField(schema, fieldName, key, fieldType.key, writer);\n                        serializeField(schema, fieldName, val, fieldType.value, writer);\n                    });\n                    break;\n                }\n                default:\n                    throw new BorshError(`FieldType ${fieldType} unrecognized`);\n            }\n        }\n        else {\n            serializeStruct(schema, value, writer);\n        }\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction serializeStruct(schema, obj, writer) {\n    if (typeof obj.borshSerialize === \"function\") {\n        obj.borshSerialize(writer);\n        return;\n    }\n    const structSchema = schema.get(obj.constructor);\n    if (!structSchema) {\n        throw new BorshError(`Class ${obj.constructor.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        structSchema.fields.map(([fieldName, fieldType]) => {\n            serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n        });\n    }\n    else if (structSchema.kind === \"enum\") {\n        const name = obj[structSchema.field];\n        for (let idx = 0; idx < structSchema.values.length; ++idx) {\n            const [fieldName, fieldType] = structSchema.values[idx];\n            if (fieldName === name) {\n                writer.writeU8(idx);\n                serializeField(schema, fieldName, obj[fieldName], fieldType, writer);\n                break;\n            }\n        }\n    }\n    else {\n        throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${obj.constructor.name}`);\n    }\n}\n/// Serialize given object using schema of the form:\n/// { class_name -> [ [field_name, field_type], .. ], .. }\nfunction serialize(schema, obj, Writer = BinaryWriter) {\n    const writer = new Writer();\n    serializeStruct(schema, obj, writer);\n    return writer.toArray();\n}\nexports.serialize = serialize;\nfunction deserializeField(schema, fieldName, fieldType, reader) {\n    try {\n        if (typeof fieldType === \"string\") {\n            return reader[`read${capitalizeFirstLetter(fieldType)}`]();\n        }\n        if (fieldType instanceof Array) {\n            if (typeof fieldType[0] === \"number\") {\n                return reader.readFixedArray(fieldType[0]);\n            }\n            else if (typeof fieldType[1] === \"number\") {\n                const arr = [];\n                for (let i = 0; i < fieldType[1]; i++) {\n                    arr.push(deserializeField(schema, null, fieldType[0], reader));\n                }\n                return arr;\n            }\n            else {\n                return reader.readArray(() => deserializeField(schema, fieldName, fieldType[0], reader));\n            }\n        }\n        if (fieldType.kind === \"option\") {\n            const option = reader.readU8();\n            if (option) {\n                return deserializeField(schema, fieldName, fieldType.type, reader);\n            }\n            return undefined;\n        }\n        if (fieldType.kind === \"map\") {\n            let map = new Map();\n            const length = reader.readU32();\n            for (let i = 0; i < length; i++) {\n                const key = deserializeField(schema, fieldName, fieldType.key, reader);\n                const val = deserializeField(schema, fieldName, fieldType.value, reader);\n                map.set(key, val);\n            }\n            return map;\n        }\n        return deserializeStruct(schema, fieldType, reader);\n    }\n    catch (error) {\n        if (error instanceof BorshError) {\n            error.addToFieldPath(fieldName);\n        }\n        throw error;\n    }\n}\nfunction deserializeStruct(schema, classType, reader) {\n    if (typeof classType.borshDeserialize === \"function\") {\n        return classType.borshDeserialize(reader);\n    }\n    const structSchema = schema.get(classType);\n    if (!structSchema) {\n        throw new BorshError(`Class ${classType.name} is missing in schema`);\n    }\n    if (structSchema.kind === \"struct\") {\n        const result = {};\n        for (const [fieldName, fieldType] of schema.get(classType).fields) {\n            result[fieldName] = deserializeField(schema, fieldName, fieldType, reader);\n        }\n        return new classType(result);\n    }\n    if (structSchema.kind === \"enum\") {\n        const idx = reader.readU8();\n        if (idx >= structSchema.values.length) {\n            throw new BorshError(`Enum index: ${idx} is out of range`);\n        }\n        const [fieldName, fieldType] = structSchema.values[idx];\n        const fieldValue = deserializeField(schema, fieldName, fieldType, reader);\n        return new classType({ [fieldName]: fieldValue });\n    }\n    throw new BorshError(`Unexpected schema kind: ${structSchema.kind} for ${classType.constructor.name}`);\n}\n/// Deserializes object from bytes using schema.\nfunction deserialize(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    const result = deserializeStruct(schema, classType, reader);\n    if (reader.offset < buffer.length) {\n        throw new BorshError(`Unexpected ${buffer.length - reader.offset} bytes after deserialized data`);\n    }\n    return result;\n}\nexports.deserialize = deserialize;\n/// Deserializes object from bytes using schema, without checking the length read\nfunction deserializeUnchecked(schema, classType, buffer, Reader = BinaryReader) {\n    const reader = new Reader(buffer);\n    return deserializeStruct(schema, classType, reader);\n}\nexports.deserializeUnchecked = deserializeUnchecked;\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n// @ts-ignore\nvar _Buffer = require('safe-buffer').Buffer\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (Array.isArray(source) || source instanceof Uint8Array) { source = _Buffer.from(source) }\n    if (!_Buffer.isBuffer(source)) { throw new TypeError('Expected Buffer') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return _Buffer.alloc(0) }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = _Buffer.allocUnsafe(zeroes + (size - it4))\n    vch.fill(0x00, 0, zeroes)\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","var basex = require('base-x')\nvar ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\nvar has = Object.prototype.hasOwnProperty\n  , prefix = '~';\n\n/**\n * Constructor to create a storage for our `EE` objects.\n * An `Events` instance is a plain object whose properties are event names.\n *\n * @constructor\n * @private\n */\nfunction Events() {}\n\n//\n// We try to not inherit from `Object.prototype`. In some engines creating an\n// instance in this way is faster than calling `Object.create(null)` directly.\n// If `Object.create(null)` is not supported we prefix the event names with a\n// character to make sure that the built-in object properties are not\n// overridden or used as an attack vector.\n//\nif (Object.create) {\n  Events.prototype = Object.create(null);\n\n  //\n  // This hack is needed because the `__proto__` property is still inherited in\n  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.\n  //\n  if (!new Events().__proto__) prefix = false;\n}\n\n/**\n * Representation of a single event listener.\n *\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} [once=false] Specify if the listener is a one-time listener.\n * @constructor\n * @private\n */\nfunction EE(fn, context, once) {\n  this.fn = fn;\n  this.context = context;\n  this.once = once || false;\n}\n\n/**\n * Add a listener for a given event.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} context The context to invoke the listener with.\n * @param {Boolean} once Specify if the listener is a one-time listener.\n * @returns {EventEmitter}\n * @private\n */\nfunction addListener(emitter, event, fn, context, once) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('The listener must be a function');\n  }\n\n  var listener = new EE(fn, context || emitter, once)\n    , evt = prefix ? prefix + event : event;\n\n  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;\n  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);\n  else emitter._events[evt] = [emitter._events[evt], listener];\n\n  return emitter;\n}\n\n/**\n * Clear event by name.\n *\n * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.\n * @param {(String|Symbol)} evt The Event name.\n * @private\n */\nfunction clearEvent(emitter, evt) {\n  if (--emitter._eventsCount === 0) emitter._events = new Events();\n  else delete emitter._events[evt];\n}\n\n/**\n * Minimal `EventEmitter` interface that is molded against the Node.js\n * `EventEmitter` interface.\n *\n * @constructor\n * @public\n */\nfunction EventEmitter() {\n  this._events = new Events();\n  this._eventsCount = 0;\n}\n\n/**\n * Return an array listing the events for which the emitter has registered\n * listeners.\n *\n * @returns {Array}\n * @public\n */\nEventEmitter.prototype.eventNames = function eventNames() {\n  var names = []\n    , events\n    , name;\n\n  if (this._eventsCount === 0) return names;\n\n  for (name in (events = this._events)) {\n    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);\n  }\n\n  if (Object.getOwnPropertySymbols) {\n    return names.concat(Object.getOwnPropertySymbols(events));\n  }\n\n  return names;\n};\n\n/**\n * Return the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Array} The registered listeners.\n * @public\n */\nEventEmitter.prototype.listeners = function listeners(event) {\n  var evt = prefix ? prefix + event : event\n    , handlers = this._events[evt];\n\n  if (!handlers) return [];\n  if (handlers.fn) return [handlers.fn];\n\n  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {\n    ee[i] = handlers[i].fn;\n  }\n\n  return ee;\n};\n\n/**\n * Return the number of listeners listening to a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Number} The number of listeners.\n * @public\n */\nEventEmitter.prototype.listenerCount = function listenerCount(event) {\n  var evt = prefix ? prefix + event : event\n    , listeners = this._events[evt];\n\n  if (!listeners) return 0;\n  if (listeners.fn) return 1;\n  return listeners.length;\n};\n\n/**\n * Calls each of the listeners registered for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @returns {Boolean} `true` if the event had listeners, else `false`.\n * @public\n */\nEventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return false;\n\n  var listeners = this._events[evt]\n    , len = arguments.length\n    , args\n    , i;\n\n  if (listeners.fn) {\n    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);\n\n    switch (len) {\n      case 1: return listeners.fn.call(listeners.context), true;\n      case 2: return listeners.fn.call(listeners.context, a1), true;\n      case 3: return listeners.fn.call(listeners.context, a1, a2), true;\n      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;\n      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;\n      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;\n    }\n\n    for (i = 1, args = new Array(len -1); i < len; i++) {\n      args[i - 1] = arguments[i];\n    }\n\n    listeners.fn.apply(listeners.context, args);\n  } else {\n    var length = listeners.length\n      , j;\n\n    for (i = 0; i < length; i++) {\n      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);\n\n      switch (len) {\n        case 1: listeners[i].fn.call(listeners[i].context); break;\n        case 2: listeners[i].fn.call(listeners[i].context, a1); break;\n        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;\n        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;\n        default:\n          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {\n            args[j - 1] = arguments[j];\n          }\n\n          listeners[i].fn.apply(listeners[i].context, args);\n      }\n    }\n  }\n\n  return true;\n};\n\n/**\n * Add a listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.on = function on(event, fn, context) {\n  return addListener(this, event, fn, context, false);\n};\n\n/**\n * Add a one-time listener for a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn The listener function.\n * @param {*} [context=this] The context to invoke the listener with.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.once = function once(event, fn, context) {\n  return addListener(this, event, fn, context, true);\n};\n\n/**\n * Remove the listeners of a given event.\n *\n * @param {(String|Symbol)} event The event name.\n * @param {Function} fn Only remove the listeners that match this function.\n * @param {*} context Only remove the listeners that have this context.\n * @param {Boolean} once Only remove one-time listeners.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {\n  var evt = prefix ? prefix + event : event;\n\n  if (!this._events[evt]) return this;\n  if (!fn) {\n    clearEvent(this, evt);\n    return this;\n  }\n\n  var listeners = this._events[evt];\n\n  if (listeners.fn) {\n    if (\n      listeners.fn === fn &&\n      (!once || listeners.once) &&\n      (!context || listeners.context === context)\n    ) {\n      clearEvent(this, evt);\n    }\n  } else {\n    for (var i = 0, events = [], length = listeners.length; i < length; i++) {\n      if (\n        listeners[i].fn !== fn ||\n        (once && !listeners[i].once) ||\n        (context && listeners[i].context !== context)\n      ) {\n        events.push(listeners[i]);\n      }\n    }\n\n    //\n    // Reset the array, or remove it completely if we have no more listeners.\n    //\n    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;\n    else clearEvent(this, evt);\n  }\n\n  return this;\n};\n\n/**\n * Remove all listeners, or those of the specified event.\n *\n * @param {(String|Symbol)} [event] The event name.\n * @returns {EventEmitter} `this`.\n * @public\n */\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {\n  var evt;\n\n  if (event) {\n    evt = prefix ? prefix + event : event;\n    if (this._events[evt]) clearEvent(this, evt);\n  } else {\n    this._events = new Events();\n    this._eventsCount = 0;\n  }\n\n  return this;\n};\n\n//\n// Alias methods names because people roll like that.\n//\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n//\n// Expose the prefix.\n//\nEventEmitter.prefixed = prefix;\n\n//\n// Allow `EventEmitter` to be imported as module namespace.\n//\nEventEmitter.EventEmitter = EventEmitter;\n\n//\n// Expose the module.\n//\nif ('undefined' !== typeof module) {\n  module.exports = EventEmitter;\n}\n","'use strict';\n\nconst uuid = require('uuid').v4;\nconst generateRequest = require('../../generateRequest');\n\n/**\n * Constructor for a Jayson Browser Client that does not depend any node.js core libraries\n * @class ClientBrowser\n * @param {Function} callServer Method that calls the server, receives the stringified request and a regular node-style callback\n * @param {Object} [options]\n * @param {Function} [options.reviver] Reviver function for JSON\n * @param {Function} [options.replacer] Replacer function for JSON\n * @param {Number} [options.version=2] JSON-RPC version to use (1|2)\n * @param {Function} [options.generator] Function to use for generating request IDs\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n * @return {ClientBrowser}\n */\nconst ClientBrowser = function(callServer, options) {\n  if(!(this instanceof ClientBrowser)) {\n    return new ClientBrowser(callServer, options);\n  }\n\n  if (!options) {\n    options = {};\n  }\n\n  this.options = {\n    reviver: typeof options.reviver !== 'undefined' ? options.reviver : null,\n    replacer: typeof options.replacer !== 'undefined' ? options.replacer : null,\n    generator: typeof options.generator !== 'undefined' ? options.generator : function() { return uuid(); },\n    version: typeof options.version !== 'undefined' ? options.version : 2,\n    notificationIdNull: typeof options.notificationIdNull === 'boolean' ? options.notificationIdNull : false,\n  };\n\n  this.callServer = callServer;\n};\n\nmodule.exports = ClientBrowser;\n\n/**\n *  Creates a request and dispatches it if given a callback.\n *  @param {String|Array} method A batch request if passed an Array, or a method name if passed a String\n *  @param {Array|Object} [params] Parameters for the method\n *  @param {String|Number} [id] Optional id. If undefined an id will be generated. If null it creates a notification request\n *  @param {Function} [callback] Request callback. If specified, executes the request rather than only returning it.\n *  @throws {TypeError} Invalid parameters\n *  @return {Object} JSON-RPC 1.0 or 2.0 compatible request\n */\nClientBrowser.prototype.request = function(method, params, id, callback) {\n  const self = this;\n  let request = null;\n\n  // is this a batch request?\n  const isBatch = Array.isArray(method) && typeof params === 'function';\n\n  if (this.options.version === 1 && isBatch) {\n    throw new TypeError('JSON-RPC 1.0 does not support batching');\n  }\n\n  // is this a raw request?\n  const isRaw = !isBatch && method && typeof method === 'object' && typeof params === 'function';\n\n  if(isBatch || isRaw) {\n    callback = params;\n    request = method;\n  } else {\n    if(typeof id === 'function') {\n      callback = id;\n      // specifically undefined because \"null\" is a notification request\n      id = undefined;\n    }\n\n    const hasCallback = typeof callback === 'function';\n\n    try {\n      request = generateRequest(method, params, id, {\n        generator: this.options.generator,\n        version: this.options.version,\n        notificationIdNull: this.options.notificationIdNull,\n      });\n    } catch(err) {\n      if(hasCallback) {\n        return callback(err);\n      }\n      throw err;\n    }\n\n    // no callback means we should just return a raw request\n    if(!hasCallback) {\n      return request;\n    }\n\n  }\n\n  let message;\n  try {\n    message = JSON.stringify(request, this.options.replacer);\n  } catch(err) {\n    return callback(err);\n  }\n\n  this.callServer(message, function(err, response) {\n    self._parseResponse(err, response, callback);\n  });\n\n  // always return the raw request\n  return request;\n};\n\n/**\n * Parses a response from a server\n * @param {Object} err Error to pass on that is unrelated to the actual response\n * @param {String} responseText JSON-RPC 1.0 or 2.0 response\n * @param {Function} callback Callback that will receive different arguments depending on the amount of parameters\n * @private\n */\nClientBrowser.prototype._parseResponse = function(err, responseText, callback) {\n  if(err) {\n    callback(err);\n    return;\n  }\n\n  if(!responseText) {\n    // empty response text, assume that is correct because it could be a\n    // notification which jayson does not give any body for\n    return callback();\n  }\n\n  let response;\n  try {\n    response = JSON.parse(responseText, this.options.reviver);\n  } catch(err) {\n    return callback(err);\n  }\n\n  if(callback.length === 3) {\n    // if callback length is 3, we split callback arguments on error and response\n\n    // is batch response?\n    if(Array.isArray(response)) {\n\n      // neccesary to split strictly on validity according to spec here\n      const isError = function(res) {\n        return typeof res.error !== 'undefined';\n      };\n\n      const isNotError = function (res) {\n        return !isError(res);\n      };\n\n      return callback(null, response.filter(isError), response.filter(isNotError));\n    \n    } else {\n\n      // split regardless of validity\n      return callback(null, response.error, response.result);\n    \n    }\n  \n  }\n\n  callback(null, response);\n};\n","'use strict';\n\nconst uuid = require('uuid').v4;\n\n/**\n *  Generates a JSON-RPC 1.0 or 2.0 request\n *  @param {String} method Name of method to call\n *  @param {Array|Object} params Array of parameters passed to the method as specified, or an object of parameter names and corresponding value\n *  @param {String|Number|null} [id] Request ID can be a string, number, null for explicit notification or left out for automatic generation\n *  @param {Object} [options]\n *  @param {Number} [options.version=2] JSON-RPC version to use (1 or 2)\n *  @param {Boolean} [options.notificationIdNull=false] When true, version 2 requests will set id to null instead of omitting it\n *  @param {Function} [options.generator] Passed the request, and the options object and is expected to return a request ID\n *  @throws {TypeError} If any of the parameters are invalid\n *  @return {Object} A JSON-RPC 1.0 or 2.0 request\n *  @memberOf Utils\n */\nconst generateRequest = function(method, params, id, options) {\n  if(typeof method !== 'string') {\n    throw new TypeError(method + ' must be a string');\n  }\n\n  options = options || {};\n\n  // check valid version provided\n  const version = typeof options.version === 'number' ? options.version : 2;\n  if (version !== 1 && version !== 2) {\n    throw new TypeError(version + ' must be 1 or 2');\n  }\n\n  const request = {\n    method: method\n  };\n\n  if(version === 2) {\n    request.jsonrpc = '2.0';\n  }\n\n  if(params) {\n    // params given, but invalid?\n    if(typeof params !== 'object' && !Array.isArray(params)) {\n      throw new TypeError(params + ' must be an object, array or omitted');\n    }\n    request.params = params;\n  }\n\n  // if id was left out, generate one (null means explicit notification)\n  if(typeof(id) === 'undefined') {\n    const generator = typeof options.generator === 'function' ? options.generator : function() { return uuid(); };\n    request.id = generator(request, options);\n  } else if (version === 2 && id === null) {\n    // we have a version 2 notification\n    if (options.notificationIdNull) {\n      request.id = null; // id will not be set at all unless option provided\n    }\n  } else {\n    request.id = id;\n  }\n\n  return request;\n};\n\nmodule.exports = generateRequest;\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Client = void 0;\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _websocket = _interopRequireDefault(require(\"./lib/client/websocket.browser\"));\n\nvar _client = _interopRequireDefault(require(\"./lib/client\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar Client = /*#__PURE__*/function (_CommonClient) {\n  (0, _inherits2[\"default\"])(Client, _CommonClient);\n\n  var _super = _createSuper(Client);\n\n  function Client() {\n    var address = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"ws://localhost:8080\";\n\n    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref$autoconnect = _ref.autoconnect,\n        autoconnect = _ref$autoconnect === void 0 ? true : _ref$autoconnect,\n        _ref$reconnect = _ref.reconnect,\n        reconnect = _ref$reconnect === void 0 ? true : _ref$reconnect,\n        _ref$reconnect_interv = _ref.reconnect_interval,\n        reconnect_interval = _ref$reconnect_interv === void 0 ? 1000 : _ref$reconnect_interv,\n        _ref$max_reconnects = _ref.max_reconnects,\n        max_reconnects = _ref$max_reconnects === void 0 ? 5 : _ref$max_reconnects;\n\n    var generate_request_id = arguments.length > 2 ? arguments[2] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, Client);\n    return _super.call(this, _websocket[\"default\"], address, {\n      autoconnect: autoconnect,\n      reconnect: reconnect,\n      reconnect_interval: reconnect_interval,\n      max_reconnects: max_reconnects\n    }, generate_request_id);\n  }\n\n  return (0, _createClass2[\"default\"])(Client);\n}(_client[\"default\"]);\n\nexports.Client = Client;","/**\n * \"Client\" wraps \"ws\" or a browser-implemented \"WebSocket\" library\n * according to the environment providing JSON RPC 2.0 support on top.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar __rest = void 0 && (void 0).__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}; // @ts-ignore\n\n\nvar CommonClient = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(CommonClient, _EventEmitter);\n\n  var _super = _createSuper(CommonClient);\n\n  /**\n   * Instantiate a Client class.\n   * @constructor\n   * @param {webSocketFactory} webSocketFactory - factory method for WebSocket\n   * @param {String} address - url to a websocket server\n   * @param {Object} options - ws options object with reconnect parameters\n   * @param {Function} generate_request_id - custom generation request Id\n   * @return {CommonClient}\n   */\n  function CommonClient(webSocketFactory) {\n    var _this;\n\n    var address = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"ws://localhost:8080\";\n\n    var _a = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    var generate_request_id = arguments.length > 3 ? arguments[3] : undefined;\n    (0, _classCallCheck2[\"default\"])(this, CommonClient);\n\n    var _a$autoconnect = _a.autoconnect,\n        autoconnect = _a$autoconnect === void 0 ? true : _a$autoconnect,\n        _a$reconnect = _a.reconnect,\n        reconnect = _a$reconnect === void 0 ? true : _a$reconnect,\n        _a$reconnect_interval = _a.reconnect_interval,\n        reconnect_interval = _a$reconnect_interval === void 0 ? 1000 : _a$reconnect_interval,\n        _a$max_reconnects = _a.max_reconnects,\n        max_reconnects = _a$max_reconnects === void 0 ? 5 : _a$max_reconnects,\n        rest_options = __rest(_a, [\"autoconnect\", \"reconnect\", \"reconnect_interval\", \"max_reconnects\"]);\n\n    _this = _super.call(this);\n    _this.webSocketFactory = webSocketFactory;\n    _this.queue = {};\n    _this.rpc_id = 0;\n    _this.address = address;\n    _this.autoconnect = autoconnect;\n    _this.ready = false;\n    _this.reconnect = reconnect;\n    _this.reconnect_interval = reconnect_interval;\n    _this.max_reconnects = max_reconnects;\n    _this.rest_options = rest_options;\n    _this.current_reconnects = 0;\n\n    _this.generate_request_id = generate_request_id || function () {\n      return ++_this.rpc_id;\n    };\n\n    if (_this.autoconnect) _this._connect(_this.address, Object.assign({\n      autoconnect: _this.autoconnect,\n      reconnect: _this.reconnect,\n      reconnect_interval: _this.reconnect_interval,\n      max_reconnects: _this.max_reconnects\n    }, _this.rest_options));\n    return _this;\n  }\n  /**\n   * Connects to a defined server if not connected already.\n   * @method\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(CommonClient, [{\n    key: \"connect\",\n    value: function connect() {\n      if (this.socket) return;\n\n      this._connect(this.address, Object.assign({\n        autoconnect: this.autoconnect,\n        reconnect: this.reconnect,\n        reconnect_interval: this.reconnect_interval,\n        max_reconnects: this.max_reconnects\n      }, this.rest_options));\n    }\n    /**\n     * Calls a registered RPC method on server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object|Array} params - optional method parameters\n     * @param {Number} timeout - RPC reply timeout value\n     * @param {Object} ws_opts - options passed to ws\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"call\",\n    value: function call(method, params, timeout, ws_opts) {\n      var _this2 = this;\n\n      if (!ws_opts && \"object\" === (0, _typeof2[\"default\"])(timeout)) {\n        ws_opts = timeout;\n        timeout = null;\n      }\n\n      return new Promise(function (resolve, reject) {\n        if (!_this2.ready) return reject(new Error(\"socket not ready\"));\n\n        var rpc_id = _this2.generate_request_id(method, params);\n\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null,\n          id: rpc_id\n        };\n\n        _this2.socket.send(JSON.stringify(message), ws_opts, function (error) {\n          if (error) return reject(error);\n          _this2.queue[rpc_id] = {\n            promise: [resolve, reject]\n          };\n\n          if (timeout) {\n            _this2.queue[rpc_id].timeout = setTimeout(function () {\n              delete _this2.queue[rpc_id];\n              reject(new Error(\"reply timeout\"));\n            }, timeout);\n          }\n        });\n      });\n    }\n    /**\n     * Logins with the other side of the connection.\n     * @method\n     * @param {Object} params - Login credentials object\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"login\",\n    value: function () {\n      var _login = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee(params) {\n        var resp;\n        return _regenerator[\"default\"].wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.call(\"rpc.login\", params);\n\n              case 2:\n                resp = _context.sent;\n\n                if (resp) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error(\"authentication failed\");\n\n              case 5:\n                return _context.abrupt(\"return\", resp);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function login(_x) {\n        return _login.apply(this, arguments);\n      }\n\n      return login;\n    }()\n    /**\n     * Fetches a list of client's methods registered on server.\n     * @method\n     * @return {Array}\n     */\n\n  }, {\n    key: \"listMethods\",\n    value: function () {\n      var _listMethods = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee2() {\n        return _regenerator[\"default\"].wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return this.call(\"__listMethods\");\n\n              case 2:\n                return _context2.abrupt(\"return\", _context2.sent);\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function listMethods() {\n        return _listMethods.apply(this, arguments);\n      }\n\n      return listMethods;\n    }()\n    /**\n     * Sends a JSON-RPC 2.0 notification to server.\n     * @method\n     * @param {String} method - RPC method name\n     * @param {Object} params - optional method parameters\n     * @return {Promise}\n     */\n\n  }, {\n    key: \"notify\",\n    value: function notify(method, params) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        if (!_this3.ready) return reject(new Error(\"socket not ready\"));\n        var message = {\n          jsonrpc: \"2.0\",\n          method: method,\n          params: params || null\n        };\n\n        _this3.socket.send(JSON.stringify(message), function (error) {\n          if (error) return reject(error);\n          resolve();\n        });\n      });\n    }\n    /**\n     * Subscribes for a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function () {\n      var _subscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee3(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context3.next = 3;\n                return this.call(\"rpc.on\", event);\n\n              case 3:\n                result = _context3.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context3.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed subscribing to an event '\" + event + \"' with: \" + result[event]);\n\n              case 6:\n                return _context3.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function subscribe(_x2) {\n        return _subscribe.apply(this, arguments);\n      }\n\n      return subscribe;\n    }()\n    /**\n     * Unsubscribes from a defined event.\n     * @method\n     * @param {String|Array} event - event name\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"unsubscribe\",\n    value: function () {\n      var _unsubscribe = (0, _asyncToGenerator2[\"default\"])( /*#__PURE__*/_regenerator[\"default\"].mark(function _callee4(event) {\n        var result;\n        return _regenerator[\"default\"].wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (typeof event === \"string\") event = [event];\n                _context4.next = 3;\n                return this.call(\"rpc.off\", event);\n\n              case 3:\n                result = _context4.sent;\n\n                if (!(typeof event === \"string\" && result[event] !== \"ok\")) {\n                  _context4.next = 6;\n                  break;\n                }\n\n                throw new Error(\"Failed unsubscribing from an event with: \" + result);\n\n              case 6:\n                return _context4.abrupt(\"return\", result);\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function unsubscribe(_x3) {\n        return _unsubscribe.apply(this, arguments);\n      }\n\n      return unsubscribe;\n    }()\n    /**\n     * Closes a WebSocket connection gracefully.\n     * @method\n     * @param {Number} code - socket close code\n     * @param {String} data - optional data to be sent before closing\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, data) {\n      this.socket.close(code || 1000, data);\n    }\n    /**\n     * Connection/Message handler.\n     * @method\n     * @private\n     * @param {String} address - WebSocket API address\n     * @param {Object} options - ws options object\n     * @return {Undefined}\n     */\n\n  }, {\n    key: \"_connect\",\n    value: function _connect(address, options) {\n      var _this4 = this;\n\n      this.socket = this.webSocketFactory(address, options);\n      this.socket.addEventListener(\"open\", function () {\n        _this4.ready = true;\n\n        _this4.emit(\"open\");\n\n        _this4.current_reconnects = 0;\n      });\n      this.socket.addEventListener(\"message\", function (_ref) {\n        var message = _ref.data;\n        if (message instanceof ArrayBuffer) message = Buffer.from(message).toString();\n\n        try {\n          message = JSON.parse(message);\n        } catch (error) {\n          return;\n        } // check if any listeners are attached and forward event\n\n\n        if (message.notification && _this4.listeners(message.notification).length) {\n          if (!Object.keys(message.params).length) return _this4.emit(message.notification);\n          var args = [message.notification];\n          if (message.params.constructor === Object) args.push(message.params);else // using for-loop instead of unshift/spread because performance is better\n            for (var i = 0; i < message.params.length; i++) {\n              args.push(message.params[i]);\n            } // run as microtask so that pending queue messages are resolved first\n          // eslint-disable-next-line prefer-spread\n\n          return Promise.resolve().then(function () {\n            _this4.emit.apply(_this4, args);\n          });\n        }\n\n        if (!_this4.queue[message.id]) {\n          // general JSON RPC 2.0 events\n          if (message.method && message.params) {\n            // run as microtask so that pending queue messages are resolved first\n            return Promise.resolve().then(function () {\n              _this4.emit(message.method, message.params);\n            });\n          }\n\n          return;\n        } // reject early since server's response is invalid\n\n\n        if (\"error\" in message === \"result\" in message) _this4.queue[message.id].promise[1](new Error(\"Server response malformed. Response must include either \\\"result\\\"\" + \" or \\\"error\\\", but not both.\"));\n        if (_this4.queue[message.id].timeout) clearTimeout(_this4.queue[message.id].timeout);\n        if (message.error) _this4.queue[message.id].promise[1](message.error);else _this4.queue[message.id].promise[0](message.result);\n        delete _this4.queue[message.id];\n      });\n      this.socket.addEventListener(\"error\", function (error) {\n        return _this4.emit(\"error\", error);\n      });\n      this.socket.addEventListener(\"close\", function (_ref2) {\n        var code = _ref2.code,\n            reason = _ref2.reason;\n        if (_this4.ready) // Delay close event until internal state is updated\n          setTimeout(function () {\n            return _this4.emit(\"close\", code, reason);\n          }, 0);\n        _this4.ready = false;\n        _this4.socket = undefined;\n        if (code === 1000) return;\n        _this4.current_reconnects++;\n        if (_this4.reconnect && (_this4.max_reconnects > _this4.current_reconnects || _this4.max_reconnects === 0)) setTimeout(function () {\n          return _this4._connect(address, options);\n        }, _this4.reconnect_interval);\n      });\n    }\n  }]);\n  return CommonClient;\n}(_eventemitter.EventEmitter);\n\nexports[\"default\"] = CommonClient;","/**\n * WebSocket implements a browser-side WebSocket specification.\n * @module Client\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = _default;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _eventemitter = require(\"eventemitter3\");\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2[\"default\"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2[\"default\"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2[\"default\"])(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WebSocketBrowserImpl = /*#__PURE__*/function (_EventEmitter) {\n  (0, _inherits2[\"default\"])(WebSocketBrowserImpl, _EventEmitter);\n\n  var _super = _createSuper(WebSocketBrowserImpl);\n\n  /** Instantiate a WebSocket class\n   * @constructor\n   * @param {String} address - url to a websocket server\n   * @param {(Object)} options - websocket options\n   * @param {(String|Array)} protocols - a list of protocols\n   * @return {WebSocketBrowserImpl} - returns a WebSocket instance\n   */\n  function WebSocketBrowserImpl(address, options, protocols) {\n    var _this;\n\n    (0, _classCallCheck2[\"default\"])(this, WebSocketBrowserImpl);\n    _this = _super.call(this);\n    _this.socket = new window.WebSocket(address, protocols);\n\n    _this.socket.onopen = function () {\n      return _this.emit(\"open\");\n    };\n\n    _this.socket.onmessage = function (event) {\n      return _this.emit(\"message\", event.data);\n    };\n\n    _this.socket.onerror = function (error) {\n      return _this.emit(\"error\", error);\n    };\n\n    _this.socket.onclose = function (event) {\n      _this.emit(\"close\", event.code, event.reason);\n    };\n\n    return _this;\n  }\n  /**\n   * Sends data through a websocket connection\n   * @method\n   * @param {(String|Object)} data - data to be sent via websocket\n   * @param {Object} optionsOrCallback - ws options\n   * @param {Function} callback - a callback called once the data is sent\n   * @return {Undefined}\n   */\n\n\n  (0, _createClass2[\"default\"])(WebSocketBrowserImpl, [{\n    key: \"send\",\n    value: function send(data, optionsOrCallback, callback) {\n      var cb = callback || optionsOrCallback;\n\n      try {\n        this.socket.send(data);\n        cb();\n      } catch (error) {\n        cb(error);\n      }\n    }\n    /**\n     * Closes an underlying socket\n     * @method\n     * @param {Number} code - status code explaining why the connection is being closed\n     * @param {String} reason - a description why the connection is closing\n     * @return {Undefined}\n     * @throws {Error}\n     */\n\n  }, {\n    key: \"close\",\n    value: function close(code, reason) {\n      this.socket.close(code, reason);\n    }\n  }, {\n    key: \"addEventListener\",\n    value: function addEventListener(type, listener, options) {\n      this.socket.addEventListener(type, listener, options);\n    }\n  }]);\n  return WebSocketBrowserImpl;\n}(_eventemitter.EventEmitter);\n/**\n * factory method for common WebSocket instance\n * @method\n * @param {String} address - url to a websocket server\n * @param {(Object)} options - websocket options\n * @return {Undefined}\n */\n\n\nfunction _default(address, options) {\n  return new WebSocketBrowserImpl(address, options);\n}","// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nvar getRandomValues;\nvar rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation. Also,\n    // find the complete implementation of crypto (msCrypto) on IE11.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== 'undefined' && typeof msCrypto.getRandomValues === 'function' && msCrypto.getRandomValues.bind(msCrypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}","export default /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;","import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nvar byteToHex = [];\n\nfor (var i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction stringify(arr) {\n  var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;","import REGEX from './regex.js';\n\nfunction validate(uuid) {\n  return typeof uuid === 'string' && REGEX.test(uuid);\n}\n\nexport default validate;","import rng from './rng.js';\nimport stringify from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  options = options || {};\n  var rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (var i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return stringify(rnds);\n}\n\nexport default v4;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var superPropBase = require(\"./superPropBase.js\");\n\nfunction _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get.bind(), module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n  }\n\n  return _get.apply(this, arguments);\n}\n\nmodule.exports = _get, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","var getPrototypeOf = require(\"./getPrototypeOf.js\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n"],"names":["checkUint8Array","b","Uint8Array","TypeError","uint8ArrayToBuffer","buffer_1","from","buffer","byteOffset","length","Layout","span","property","Number","isInteger","offset","RangeError","rv","Object","create","constructor","prototype","assign","values","nameWithProperty","name","lo","ExternalLayout","Error","GreedyCount","elementSpan","rem","Math","floor","src","OffsetLayout","layout","UInt","UIntBE","decode","encode","readUIntLE","writeUIntLE","readUIntBE","writeUIntBE","Int","readIntLE","writeIntLE","IntBE","readIntBE","writeIntBE","V2E32","pow","divmodInt64","hi32","lo32","roundedInt64","NearUInt64","readUInt32LE","split","writeUInt32LE","NearUInt64BE","readUInt32BE","writeUInt32BE","NearInt64","readInt32LE","writeInt32LE","NearInt64BE","readInt32BE","writeInt32BE","Float","readFloatLE","writeFloatLE","FloatBE","readFloatBE","writeFloatBE","Double","readDoubleLE","writeDoubleLE","DoubleBE","readDoubleBE","writeDoubleBE","Sequence","elementLayout","count","isCount","idx","getSpan","i","push","elo","reduce","v","Structure","fields","decodePrefixes","Array","isArray","acc","undefined","fd","e","fsp","dest","makeDestinationObject","firstOffset","lastOffset","lastWrote","fv","shift","UnionDiscriminator","UnionLayoutDiscriminator","Union","discr","defaultLayout","discriminator","replicate","usesPrefixDiscriminator","registry","boundGetSourceVariant","defaultGetSourceVariant","bind","getSourceVariant","configGetSourceVariant","gsv","vlo","getVariant","hasOwnProperty","call","tag","dlo","clo","contentOffset","variant","VariantLayout","vb","union","fromArray","fixBitwiseResult","BitStructure","word","msb","value","_packedSetValue","_packedGetValue","bits","bf","BitField","Boolean","container","totalBits","usedBits","sum","valueMask","start","wordMask","wordValue","Blob","slice","srcBuffer","write","toString","CString","String","srcb","copy","UTF8","maxSpan","Constant","exports","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","apply","_objectSpread2","target","arguments","source","forEach","key","defineProperty","getOwnPropertyDescriptors","defineProperties","number","n","isSafeInteger","bytes","lengths","includes","assert","bool","hash","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","u32","self","crypto","arr","Uint32Array","byteLength","createView","DataView","rotr","padStart","toBytes","data","str","TextEncoder","utf8ToBytes","Hash","this","_cloneInto","wrapConstructor","hashConstructor","hashC","message","update","digest","tmp","SHA2","padOffset","isLE","pos","view","len","take","set","subarray","process","dataView","roundClean","fill","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","get","digestInto","res","destroy","to","U32_MASK64","fromBig","le","u64","lst","Ah","Al","toBig","shrSH","s","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","rotr32H","rotr32L","rotlSH","rotlSL","rotlBH","rotlBL","add","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5H","Eh","add5L","El","map","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","CHIl","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All","SHA512_256","SHA384","sha512","_0n","_1n","_2n","CU_O","CURVE","freeze","a","d","P","Gx","Gy","POW_2_256","SQRT_M1","SQRT_AD_MINUS_ONE","INVSQRT_A_MINUS_D","ONE_MINUS_D_SQ","D_MINUS_ONE_SQ","ExtendedPoint","x","y","z","t","other","assertExtPoint","X1","Y1","Z1","X2","Y2","Z2","X1Z2","mod","X2Z1","Y1Z2","Y2Z1","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","T1","T2","double","negate","W","windows","points","p","base","window","affinePoint","equals","BASE","Point","_WINDOW_SIZE","precomputes","pointPrecomputes","precomputeWindow","normalizeZ","ZERO","f","windowSize","mask","maxNumber","shiftBy","wbits","pr","cached","abs","scalar","wNAF","normalizeScalar","P0","multiplyUnsafe","invZ","invert","ax","ay","zz","legacyRist","toInv","nums","inverted","num","reduceRight","invertBatch","toAffine","toAffineBatch","fromAffine","assertRstPoint","RistrettoPoint","ep","u1","u2","u2sq","invsqrt","invertSqrt","D1","D2","zInv","edIsNegative","_x","_y","numberTo32BytesLE","bytesToHex","toRawBytes","toHex","one","two","subtract","multiply","r0","r","Ns","c","uvRatio","Ns_D_is_sq","isValid","s_","Nt","s2","W0","W1","W2","W3","hex","r1","bytes255ToNumberLE","ensureBytes","R1","calcElligatorRistrettoMap","r2","R2","emsg","b1","b2","equalBytes","u1_2","u2_2","I","Dx","Dy","WeakMap","delete","isTorsionFree","strict","normed","bytesToNumberLE","y2","u","isXOdd","isLastByteOdd","privateKey","getExtendedPublicKey","point","Signature","assertValidity","u8","fromHex","concatBytes","arrays","every","result","pad","hexes","uint8a","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","numberTo32BytesBE","reverse","_sha512Sync","MAX_255B","modulo","q","m","gcd","pow2","power","pow_2_252_3","_5n","_10n","_20n","_40n","_80n","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","v3","v7","vx2","root1","root2","useRoot1","useRoot2","noRoot","modlLE","expectedLength","max","adjustBytes25519","checkPrivateKey","getKeyFromHash","hashed","head","prefix","pointBytes","sha512s","utils","getExtendedPublicKeySync","prepareVerification","sig","publicKey","SB","pub","msg","finishVerification","k","kA","sync","getPublicKey","sign","R","verify","_setWindowSize","node","nodeCrypto","web","TORSION_SUBGROUP","hashToPrivateScalar","randomBytes","bytesLength","getRandomValues","randomPrivateKey","subtle","createHash","precompute","sha512Sync","configurable","val","Maj","SHA256_K","IV","SHA256_W","SHA256","W15","s0","s1","sha256","toFailures","run","StructError","failure","failures","rest","path","join","isIterable","isObject","Symbol","iterator","print","JSON","stringify","shiftIterator","input","next","done","toFailure","context","struct","branch","type","refinement","options","coerce","ctx","coercer","schema","valid","validator","entries","ts","Map","Set","refiner","Struct","props","validate","is","tuples","tuple","error","define","Element","boolean","Class","literal","constant","description","never","nullable","optional","record","Key","Value","string","Elements","Never","Structs","arrayWithHoles","iterableToArray","unsupportedIterableToArray","nonIterableRest","unknown","condition","SHA3_PI","SHA3_ROTL","_SHA3_IOTA","_7n","_256n","_0x71n","round","SHA3_IOTA_H","SHA3_IOTA_L","rotlH","rotlL","Keccak","suffix","enableXOF","rounds","posOut","state","state32","idx1","idx0","B0","B1","Th","Tl","curH","curL","PI","keccakP","keccak","finish","bufferOut","writeInto","xofInto","gen","keccak_256","genShake","hashCons","opts","wrapConstructorWithOpts","dkLen","HMAC","_key","iHash","oHash","buf","getPrototypeOf","hmac","_3n","_8n","beta","weistrass","x2","x3","USE_ENDOMORPHISM","ShaError","JacobianPoint","Z1Z1","Z2Z2","U1","U2","S1","S2","x1b","HH","HHH","V","splitScalarEndo","k1neg","k1","k2neg","k2","k1p","k2p","fake","f1p","f2p","iz1","iz2","iz3","scratch","isCompressed","numTo32bStr","hasEvenY","isValidFieldElement","left","Q","aP","bQ","isShort","bytesToNumber","_6n","_11n","_22n","_23n","_44n","_88n","b3","b6","b9","b11","b22","b44","b88","b176","b220","b223","t1","t2","sqrtMod","isYOdd","header","fromCompressedHex","fromUncompressedHex","normalizePrivateKey","msgHash","signature","recovery","truncateHash","normalizeSignature","rinv","multiplyAndAddUnsafe","sliceDER","parseDERInt","isWithinCurveOrder","HALF","hasHighS","toDERHex","sHex","numberToHexUnpadded","rHex","rLen","sLen","toDERRawBytes","toCompactHex","hexToNumber","rBytesLeft","parseDERSignature","fromDER","numTo32b","_sha256Sync","_hmacSha256Sync","divNearest","ENDO","a1","a2","POW_2_128","c1","c2","delta","HmacDrbg","counter","hmacSha256","seed","checkSync","hmacSync","incr","kmdToSig","kBytes","fromCompact","bits2int","bits2octets","z1","z2","int2octets","initSigArgs","extraEntropy","h1","seedArgs","finalizeSig","recSig","canonical","der","recovered","normalizeS","toCompactRawBytes","TAGGED_HASH_PREFIXES","isValidPrivateKey","_bigintTo32Bytes","_normalizePrivateKey","hashToPrivateKey","messages","importKey","ckey","createHmac","sha256Sync","hmacSha256Sync","taggedHash","tagP","charCodeAt","tagH","taggedHashSync","ed25519","generateKeypair","privateScalar","secretKey","isOnCurve","toBuffer","Buffer","properties","serialize","SOLANA_SCHEMA","deserialize","deserializeUnchecked","PUBLIC_KEY_LENGTH","uniquePublicKeyCounter","PublicKey","_bn","isPublicKeyData","decoded","bs58","BN","eq","toBase58","toJSON","toArrayLike","zeroPad","fromPublicKey","programId","publicKeyBytes","seeds","createProgramAddressSync","address","nonce","seedsWithNonce","concat","err","findProgramAddressSync","pubkeyData","default","kind","PACKET_DATA_SIZE","TransactionExpiredBlockheightExceededError","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","writable","readonly","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","pubkey","BufferLayout","rustString","rsl","_decode","_encode","rslShim","chars","alloc","getAlloc","getItemAlloc","item","field","decodeLength","size","elem","encodeLength","rem_len","TransactionStatus","CompiledKeys","payer","keyMetaMap","getMessageComponents","mapEntries","writableSigners","isSigner","isWritable","readonlySigners","writableNonSigners","readonlyNonSigners","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","extractTableLookup","lookupTable","drainKeysFoundInLookupTable","addresses","keyMeta","isInvoked","writableIndexes","drainedWritableKeys","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","getOrInsertDefault","payerKeyMeta","ix","accountMeta","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","accounts","getAccountKeys","isAccountSigner","isAccountWritable","numSignedAccounts","isProgramId","has","programIds","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","signDataLayout","transaction","signData","compile","payerKey","byteArray","accountCount","dataSlice","MessageV0","compiledInstructions","addressTableLookups","lookup","numAccountKeysFromLookups","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","tableLookup","tableAccount","find","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","serializedMessageLength","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","compiledKeys","lookupTableAccounts","extractResult","addressTableLookup","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","DEFAULT_SIGNATURE","TransactionInstruction","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","blockhash","nonceInstruction","signers","items","compileMessage","console","warn","accountMetas","uniqueMetas","pubkeyString","uniqueIndex","sort","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","pair","serializeMessage","connection","getFeeForMessage","setSigners","seen","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","confirmTransaction","status","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","nonceAccount","blob","encodeDecode","bigIntLayout","toBigIntLE","bigInt","toBufferLE","SYSTEM_INSTRUCTION_LAYOUTS","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","UpgradeNonceAccount","SystemProgram","params","lamports","space","fromPubkey","newAccountPubkey","basePubkey","toPubkey","accountPubkey","createAccountWithSeed","noncePubkey","createAccount","initParams","nonceInitialize","authorized","instructionData","newAuthorizedPubkey","Loader","ceil","chunkSize","program","getMinimumBalanceForRentExemption","balanceNeeded","getAccountInfo","programInfo","executable","allocate","owner","transfer","dataLayout","transactions","bytesLengthPadding","_rpcEndpoint","all","objToString","objKeys","obj","isArrayProp","propVal","toStr","isFinite","returnVal","trailingZeros","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","getSlotsInEpoch","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCError","customMessage","code","globalThis","fetch","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","typeIndex","decodeData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","PublicKeyFromString","RawAccountDataResult","BufferFromRawAccountData","extractCommitmentFromConfig","commitmentOrConfig","createRpcResult","pick","jsonrpc","id","UnknownRpcResult","jsonRpcResult","jsonRpcResultAndContext","notificationResultAndContext","versionedMessageFromResponse","version","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","GetLeaderScheduleResult","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","COMMON_HTTP_HEADERS","Connection","endpoint","wsEndpoint","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","client","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","confirmTransactionInitialTimeout","putativeUrl","test","assertEndpointUrl","matches","match","hostish","portWithColon","protocol","startsWith","startPort","websocketPort","makeWebsocketUrl","url","customFetch","fetchWithMiddleware","fetchImpl","info","init","reject","modifiedInfo","modifiedInit","modifiedFetchArgs","clientBrowser","RpcClient","request","callback","method","body","agent","headers","too_many_requests_retries","waitTime","log","statusText","text","ok","createRpcClient","requests","batch","methodName","createRpcBatchRequest","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","_buildArgs","unsafeRes","getBalanceAndContext","then","catch","configArg","tokenMintAddress","tokenAddress","ownerAddress","_args","arg","mintAddress","getAccountInfoAndContext","publicKeys","getMultipleAccountsInfoAndContext","configOrCommitment","encoding","configWithoutEncoding","strategy","rawSignature","decodedSignature","subscriptionCommitment","confirmationPromise","subscriptionId","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","timeoutId","TIMED_OUT","checkBlockHeight","getBlockHeight","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","race","outcome","clearTimeout","removeSignatureListener","startSlot","limit","getSignatureStatuses","getSupply","excludeNonCirculatingAccountsList","epochSchedule","wireMessage","getRecentBlockhashAndContext","getLatestBlockhashAndContext","rawConfig","_buildArgsAtLeastConfirmed","extra","block","endSlot","transactionDetails","getFirstAvailableBlock","firstAvailableBlock","getConfirmedBlockSignatures","until","getSlot","highestConfirmedRoot","before","getConfirmedSignaturesForAddress2","confirmedSignatureInfo","accountInfo","fromAccountData","getNonceAndContext","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getLatestBlockhash","MS_PER_SLOT","transactionOrMessage","configOrSigners","includeAccounts","encodedTransaction","originalTx","_blockhashWithExpiryBlockHeight","sigVerify","logTrace","traceIndent","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","onLogs","mentions","onSlotChange","onSlotUpdate","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","Keypair","keypair","_keypair","skipValidation","computedPublicKey","ii","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableProgram","recentSlot","lookupTableAddress","bumpSeed","addr","recipient","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","RequestUnits","RequestHeapFrame","SetComputeUnitLimit","SetComputeUnitPrice","ComputeBudgetProgram","microLamports","ED25519_INSTRUCTION_LAYOUT","Ed25519Program","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","fromSecretKey","createInstructionWithPublicKey","secp256k1","msgs","ecdsaSign","privKey","drbg","reseedSync","generateSync","publicKeyCreate","fromPrivateKey","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","recoveryId","createInstructionWithEthAddress","ethAddress","publicKeyToEthAddress","rawAddress","substr","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Lockup","unixTimestamp","custodian","STAKE_INSTRUCTION_LAYOUTS","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","Merge","AuthorizeWithSeed","StakeProgram","Staker","Withdrawer","stakePubkey","lockup","staker","withdrawer","initialize","stakeAuthorizationType","custodianPubkey","newAuthorized","authorityBase","authoritySeed","authorityOwner","splitStakePubkey","splitInstruction","sourceStakePubKey","VOTE_INSTRUCTION_LAYOUTS","InitializeAccount","VoteProgram","Voter","voteInit","authorizedVoter","authorizedWithdrawer","initializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyBasePubkey","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","voteAuthorizeWithSeedArgs","authorizedWithdrawerPubkey","currentVoteAccountBalance","rentExemptMinimum","withdraw","website","details","keybaseUsername","_Buffer","require","module","ALPHABET","BASE_MAP","charAt","xc","LEADER","FACTOR","iFACTOR","decodeUnsafe","psz","zeroes","b256","carry","it3","it4","vch","allocUnsafe","isBuffer","pbegin","pend","b58","it1","it2","repeat","basex","base64","ieee754","customInspectSymbol","K_MAX_LENGTH","createBuffer","setPrototypeOf","encodingOrOffset","isEncoding","actual","fromString","ArrayBuffer","isView","arrayView","isInstance","fromArrayBuffer","fromArrayLike","fromArrayView","SharedArrayBuffer","valueOf","checked","numberIsNaN","fromObject","toPrimitive","assertSize","mustMatch","loweredCase","base64ToBytes","toLowerCase","slowToString","end","hexSlice","utf8Slice","asciiSlice","latin1Slice","base64Slice","utf16leSlice","swap","bidirectionalIndexOf","dir","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","read","readUInt16BE","foundIndex","found","hexWrite","remaining","strLen","utf8Write","blitBuffer","asciiWrite","asciiToBytes","base64Write","ucs2Write","units","hi","utf16leToBytes","fromByteArray","firstByte","codePoint","bytesPerSequence","secondByte","thirdByte","fourthByte","tempCodePoint","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","decodeCodePointsArray","TYPED_ARRAY_SUPPORT","proto","foo","typedArraySupport","poolSize","allocUnsafeSlow","_isBuffer","compare","list","swap16","swap32","swap64","toLocaleString","inspect","replace","trim","thisStart","thisEnd","thisCopy","targetCopy","_arr","ret","hexSliceLookupTable","checkOffset","ext","checkInt","wrtBigUInt64LE","checkIntBI","wrtBigUInt64BE","checkIEEE754","writeFloat","littleEndian","noAssert","writeDouble","newBuf","readUintLE","mul","readUintBE","readUint8","readUInt8","readUint16LE","readUInt16LE","readUint16BE","readUint32LE","readUint32BE","readBigUInt64LE","defineBigIntMethod","validateNumber","first","last","boundsError","readBigUInt64BE","readInt8","readInt16LE","readInt16BE","readBigInt64LE","readBigInt64BE","writeUintLE","writeUintBE","writeUint8","writeUInt8","writeUint16LE","writeUInt16LE","writeUint16BE","writeUInt16BE","writeUint32LE","writeUint32BE","writeBigUInt64LE","writeBigUInt64BE","sub","writeInt8","writeInt16LE","writeInt16BE","writeBigInt64LE","writeBigInt64BE","targetStart","copyWithin","errors","getMessage","Base","stack","addNumericalSeparator","ERR_OUT_OF_RANGE","checkBounds","ERR_INVALID_ARG_TYPE","ERR_BUFFER_OUT_OF_BOUNDS","received","INVALID_BASE64_RE","leadSurrogate","toByteArray","base64clean","dst","alphabet","table","i16","fn","BufferBigIntNotDefined","createChainIdMiddleware","chainId","req","createProviderConfigMiddleware","providerConfig","createConfigMiddleware","mergeMiddleware","createJsonRpcClient","rpcTarget","createFetchMiddleware","networkMiddleware","createGetAccountsMiddleware","_ref","getAccounts","createAsyncMiddleware","_context","createRequestAccountsMiddleware","_ref3","requestAccounts","_context2","createGenericJRPCMiddleware","targetMethod","handler","_context3","createSolanaMiddleware","providerHandlers","signTransaction","signAndSendTransaction","signAllTransactions","signMessage","getPrivateKey","getSecretKey","BaseInjectedProvider","_inherits","_classCallCheck","_super","chainConfig","chainNamespace","CHAIN_NAMESPACES","_createClass","injectedProvider","engine","JRPCEngine","getProviderHandlers","solanaMiddleware","configMiddleware","injectedProviderProxy","getInjectedProviderProxy","provider","providerFromEngine","updateProviderEngineProxy","lookupNetwork","_lookupNetwork","BaseProvider","getBaseProviderHandlers","_requestAccounts","_getAccounts","_getPrivateKey","ethErrors","_getSecretKey","_context5","_context6","display","sigData","_req$params","_req$params2","_context7","_context8","txRes","createInjectedProviderProxyMiddleware","_next","PhantomInjectedProvider","SlopeInjectedProxyProvider","getProviderEngineProxy","_yield$injectedProvid","_yield$injectedProvid2","txMessage","_yield$injectedProvid3","_yield$injectedProvid4","conn","allTxns","unsignedTx","_yield$injectedProvid5","getSlopeHandlers","SolflareInjectedProvider","solflareProviderHandlers","getSolflareHandlers","SolletInjectedProvider","getSolletHandlers","getTorusHandlers","_req$params3","_req$params4","_req$params5","TorusInjectedProvider","handleInjectedProviderUpdate","setupEngine","connectedChainId","connectedHexChainId","isHexStrict","WalletInitializationError","emit","_context4","_this","configure","_objectSpread","setupProvider","_getProviderHandlers","keyPairGenerator","_context9","keyPair","signedMsg","nacl","_providerEngineProxy","txns","_req$params6","_iterator","tx","SolanaPrivateKeyProvider","_enable","_createJsonRpcClient","getChainSwitchMiddleware","getAccountMiddleware","getChainConfig","health","chainSwitchHandlers","addNewChainConfig","chainName","rpcUrls","blockExplorerUrls","nativeCurrency","addChain","ticker","symbol","tickerName","displayName","blockExplorer","switchSolanaChain","switchChain","_ref6","createChainSwitchMiddleware","accountHandlers","updatePrivatekey","_this2","updateAccount","_ref7","createAccountMiddleware","providerFactory","SolanaWallet","_defineProperty","_yield$this$provider$","signedTransaction","signedTransactions","reversed","width","__createBinding","o","__setModuleDefault","__decorate","decorators","desc","Reflect","decorate","__importStar","__esModule","__importDefault","BinaryReader","BinaryWriter","BorshError","baseDecode","baseEncode","bn_js_1","bs58_1","textDecoder","TextDecoder","fatal","INITIAL_LENGTH","fieldPath","originalMessage","fieldName","maybeResize","writeBuffer","toArray","writeU32","handlingRangeError","propertyKey","propertyDescriptor","originalMethod","readBuffer","readU32","capitalizeFirstLetter","toUpperCase","serializeField","fieldType","writer","writeFixedArray","writeArray","writeU8","serializeStruct","addToFieldPath","borshSerialize","structSchema","deserializeField","reader","readFixedArray","readArray","readU8","deserializeStruct","classType","borshDeserialize","fieldValue","Writer","Reader","Events","EE","once","addListener","emitter","event","listener","evt","_events","_eventsCount","clearEvent","EventEmitter","__proto__","eventNames","events","names","listeners","handlers","ee","listenerCount","a3","a4","a5","removeListener","removeAllListeners","off","prefixed","uuid","generateRequest","ClientBrowser","callServer","reviver","replacer","generator","notificationIdNull","isBatch","hasCallback","_parseResponse","responseText","parse","isError","_interopRequireDefault","_createClass2","_classCallCheck2","_inherits2","_possibleConstructorReturn2","_getPrototypeOf2","_websocket","_createSuper","Derived","hasNativeReflectConstruct","construct","sham","Proxy","_isNativeReflectConstruct","Super","NewTarget","Client","_CommonClient","_ref$autoconnect","_ref$reconnect","reconnect","_ref$reconnect_interv","reconnect_interval","_ref$max_reconnects","generate_request_id","_regenerator","_asyncToGenerator2","_typeof2","_eventemitter","__rest","propertyIsEnumerable","CommonClient","_EventEmitter","webSocketFactory","_a","_a$autoconnect","_a$reconnect","_a$reconnect_interval","_a$max_reconnects","rest_options","queue","rpc_id","ready","current_reconnects","_connect","socket","timeout","ws_opts","send","promise","_login","mark","_callee","resp","wrap","prev","sent","abrupt","stop","_listMethods","_callee2","_this3","_subscribe","_callee3","_x2","_unsubscribe","_callee4","_x3","_this4","addEventListener","_ref2","reason","WebSocketBrowserImpl","protocols","WebSocket","onopen","onmessage","onerror","onclose","optionsOrCallback","rnds8","rng","msCrypto","REGEX","byteToHex","rnds","random","asyncGeneratorStep","_throw","superPropBase","_get","receiver","_objectWithoutProperties","excluded","sourceKeys","sourceSymbolKeys","inRange","ToDictionary","Stream","tokens","endOfStream","prepend","token","pop","decoderError","opt_code_point","DEFAULT_ENCODING","_streaming","_BOMseen","_decoder","_fatal","_ignoreBOM","_encoder","_options","UTF8Decoder","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","stream","bite","code_point","UTF8Encoder","temp","input_stream","code_points","cp","codePointsToString","opt_string","stringToCodePoints"],"sourceRoot":""}