{"version":3,"file":"static/js/938.81424cfc.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts","../node_modules/base-x/src/index.js","../node_modules/bs58/index.js","../node_modules/fast-deep-equal/index.js","../node_modules/is-stream/index.js"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\" | \"discover\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface ThemeParams {\n  /**\n   * If true, enables dark mode\n   * Defaults to false\n   * @defaultValue false\n   */\n  isDark: boolean;\n  /**\n   * Colors object to customize colors in torus theme.\n   *\n   * Contact us for whitelabel. Example provided in `examples/vue-app`\n   */\n  colors: Record<string, string>;\n}\n\nexport interface WhiteLabelParams {\n  /**\n   * App name to display in the UI\n   */\n  name?: string;\n  /**\n   * App url\n   */\n  url?: string;\n  /**\n   * Whitelabel theme\n   */\n  theme: ThemeParams;\n  /**\n   * Language of whitelabel.\n   *\n   * order of preference: Whitelabel language \\> user language (in torus-website) \\> browser language\n   */\n  defaultLanguage?: string;\n  /**\n   * Logo Url to be used in light mode (dark logo)\n   */\n  logoDark: string;\n  /**\n   * Logo Url to be used in dark mode (light logo)\n   */\n  logoLight: string;\n  /**\n   * Shows/hides topup option in torus-website/widget.\n   * Defaults to false\n   * @defaultValue false\n   */\n  topupHide?: boolean;\n  /**\n   * Custom translations. See (examples/vue-app) to configure\n   */\n  customTranslations?: LocaleLinks<unknown>;\n}\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n  /**\n   * Params to enable whitelabelling of torus website and widget\n   */\n  whiteLabel?: WhiteLabelParams;\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://green-dark-sky.solana-mainnet.quiknode.pro/0b4b99540b7930cf590dc7fb0a2d1c9a906fd53c/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://spring-black-waterfall.solana-testnet.quiknode.pro/89830c37acd15df105b23742d37f33dc85b5eff8/\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { duplex as isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<{ windowId: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<{ windowId: string }, unknown>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<{ isIFrameFullScreen: boolean; rid: string }, unknown>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { PublicKey, SendOptions, SignaturePubkeyPair, Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst { version } = require(\"../package.json\");\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  isTopupHidden = false;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n    whiteLabel,\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.enableAll();\n    log.info(torusUrl, \"url loaded\");\n    log.info(`Solana Embed Version :${version}`);\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network,\n                dappMetadata,\n                extraParams,\n                whiteLabel,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async loginWithPrivateKey(loginParams: { privateKey: string; userInfo: UserInfo }): Promise<void> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    const { privateKey, userInfo } = loginParams;\n    const { success } = await this.communicationProvider.request<{ privateKey: string; userInfo: UserInfo }, { success: boolean }>({\n      method: \"login_with_private_key\",\n      params: {\n        privateKey,\n        userInfo,\n      },\n    });\n    if (!success) throw new Error(\"Login Failed\");\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<[], string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<[], UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<\n      { provider: PAYMENT_PROVIDER_TYPE; params: PaymentParams; windowId: string },\n      boolean\n    >({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async getAccounts() {\n    const response = (await this.provider.request({\n      method: \"getAccounts\",\n      params: [],\n    })) as string[];\n    return response;\n  }\n\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  // support sendOptions\n  async signAndSendTransaction(transaction: Transaction, options?: SendOptions): Promise<{ signature: string }> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\"), options },\n    })) as string;\n    return { signature: response };\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response: string = (await this.provider.request({\n      method: \"sign_transaction\",\n      params: { message: transaction.serializeMessage().toString(\"hex\"), messageOnly: true },\n    })) as string;\n\n    // reconstruct signature pair\n    const parsed = JSON.parse(response);\n    const signature: SignaturePubkeyPair = { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    transaction.addSignature(signature.publicKey, signature.signature);\n    return transaction;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedMessage: string[] = transactions.map((tx) => {\n      return tx.serializeMessage().toString(\"hex\");\n    });\n    const responses: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedMessage, messageOnly: true },\n    });\n\n    // reconstruct signature pairs\n    const signatures: SignaturePubkeyPair[] = responses.map((item) => {\n      const parsed = JSON.parse(item);\n      return { publicKey: new PublicKey(parsed.publicKey), signature: Buffer.from(parsed.signature, \"hex\") };\n    });\n\n    transactions.forEach((tx, idx) => {\n      tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n      return tx;\n    });\n    return transactions;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n}\n","'use strict'\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\nfunction base (ALPHABET) {\n  if (ALPHABET.length >= 255) { throw new TypeError('Alphabet too long') }\n  var BASE_MAP = new Uint8Array(256)\n  for (var j = 0; j < BASE_MAP.length; j++) {\n    BASE_MAP[j] = 255\n  }\n  for (var i = 0; i < ALPHABET.length; i++) {\n    var x = ALPHABET.charAt(i)\n    var xc = x.charCodeAt(0)\n    if (BASE_MAP[xc] !== 255) { throw new TypeError(x + ' is ambiguous') }\n    BASE_MAP[xc] = i\n  }\n  var BASE = ALPHABET.length\n  var LEADER = ALPHABET.charAt(0)\n  var FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  var iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n  function encode (source) {\n    if (source instanceof Uint8Array) {\n    } else if (ArrayBuffer.isView(source)) {\n      source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength)\n    } else if (Array.isArray(source)) {\n      source = Uint8Array.from(source)\n    }\n    if (!(source instanceof Uint8Array)) { throw new TypeError('Expected Uint8Array') }\n    if (source.length === 0) { return '' }\n        // Skip & count leading zeroes.\n    var zeroes = 0\n    var length = 0\n    var pbegin = 0\n    var pend = source.length\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n        // Allocate enough space in big-endian base58 representation.\n    var size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    var b58 = new Uint8Array(size)\n        // Process the bytes.\n    while (pbegin !== pend) {\n      var carry = source[pbegin]\n            // Apply \"b58 = b58 * 256 + ch\".\n      var i = 0\n      for (var it1 = size - 1; (carry !== 0 || i < length) && (it1 !== -1); it1--, i++) {\n        carry += (256 * b58[it1]) >>> 0\n        b58[it1] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      pbegin++\n    }\n        // Skip leading zeroes in base58 result.\n    var it2 = size - length\n    while (it2 !== size && b58[it2] === 0) {\n      it2++\n    }\n        // Translate the result into a string.\n    var str = LEADER.repeat(zeroes)\n    for (; it2 < size; ++it2) { str += ALPHABET.charAt(b58[it2]) }\n    return str\n  }\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') { throw new TypeError('Expected String') }\n    if (source.length === 0) { return new Uint8Array() }\n    var psz = 0\n        // Skip and count leading '1's.\n    var zeroes = 0\n    var length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n        // Allocate enough space in big-endian base256 representation.\n    var size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    var b256 = new Uint8Array(size)\n        // Process the characters.\n    while (source[psz]) {\n            // Decode character\n      var carry = BASE_MAP[source.charCodeAt(psz)]\n            // Invalid character\n      if (carry === 255) { return }\n      var i = 0\n      for (var it3 = size - 1; (carry !== 0 || i < length) && (it3 !== -1); it3--, i++) {\n        carry += (BASE * b256[it3]) >>> 0\n        b256[it3] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n      if (carry !== 0) { throw new Error('Non-zero carry') }\n      length = i\n      psz++\n    }\n        // Skip leading zeroes in b256.\n    var it4 = size - length\n    while (it4 !== size && b256[it4] === 0) {\n      it4++\n    }\n    var vch = new Uint8Array(zeroes + (size - it4))\n    var j = zeroes\n    while (it4 !== size) {\n      vch[j++] = b256[it4++]\n    }\n    return vch\n  }\n  function decode (string) {\n    var buffer = decodeUnsafe(string)\n    if (buffer) { return buffer }\n    throw new Error('Non-base' + BASE + ' character')\n  }\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\nmodule.exports = base\n","const basex = require('base-x')\nconst ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz'\n\nmodule.exports = basex(ALPHABET)\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","'use strict';\n\nconst isStream = stream =>\n\tstream !== null &&\n\ttypeof stream === 'object' &&\n\ttypeof stream.pipe === 'function';\n\nisStream.writable = stream =>\n\tisStream(stream) &&\n\tstream.writable !== false &&\n\ttypeof stream._write === 'function' &&\n\ttypeof stream._writableState === 'object';\n\nisStream.readable = stream =>\n\tisStream(stream) &&\n\tstream.readable !== false &&\n\ttypeof stream._read === 'function' &&\n\ttypeof stream._readableState === 'object';\n\nisStream.duplex = stream =>\n\tisStream.writable(stream) &&\n\tisStream.readable(stream);\n\nisStream.transform = stream =>\n\tisStream.duplex(stream) &&\n\ttypeof stream._transform === 'function';\n\nmodule.exports = isStream;\n"],"names":["BaseSolanaAdapter","_inherits","params","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","_this$chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","message","display","signedMessage","verifySignedChallenge","bs58","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","disconnected","permanentlyDisconnected","unsupportedSync","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","hostname","loglevel","getWindowId","getTorusUrl","buildEnv","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","_ref","w","h","dualScreenLeft","undefined","screenLeft","screenX","dualScreenTop","screenTop","screenY","innerWidth","document","documentElement","clientWidth","screen","innerHeight","clientHeight","left","abs","top","BaseProvider","constructor","connectionStream","jsonRpcStreamName","isDuplexStream","Error","messages","isTorus","setMaxListeners","_handleConnect","bind","_handleDisconnect","_handleStreamDisconnect","_rpcRequest","_initializeState","sendAsync","mux","ObjectMultiplex","pump","ignoreStream","jsonRpcConnection","createStreamMiddleware","stream","createStream","rpcEngine","JRPCEngine","push","createIdRemapMiddleware","req","res","next","error","ethErrors","data","done","log","createLoggerMiddleware","middleware","_rpcEngine","jsonRpcConnectionEvents","events","args","Array","isArray","Promise","resolve","reject","getRpcPromiseCallback","send","callback","streamName","remoteLabel","emitter","warningMsg","stack","warn","listenerCount","emit","logStreamDisconnectWarning","SafeEventEmitter","handleEvent","handle","eventName","handler","handlerArgs","arguments","handlerWrapper","removeEventListener","addEventListener","documentReady","readyState","htmlToElement","html","template","createElement","trimmedHtml","trim","innerHTML","content","firstChild","PopupHandler","url","target","features","windowTimer","iClosedWindow","_setupTimer","Number","setInterval","closed","clearInterval","open","focus","close","redirect","locationReplaceOnRedirect","replace","TorusCommunicationProvider","_state","_defaultState","dappStorageKey","languageTranslations","configuration","userLanguage","navigator","language","userLanguages","split","Object","prototype","hasOwnProperty","call","config","getUserLanguage","embedTranslations","windowRefs","on","isConnected","COMMUNICATION_NOTIFICATIONS","isFullScreen","rid","_displayIframe","isFull","windowId","_createPopupBlockAlert","_handleCloseWindow","currentLoginProvider","isLoggedIn","isIFrameFullScreen","torusAlertContainer","torusIframe","COMMUNICATION_JRPC_METHODS","info","initialized","_handleWindow","finalUrl","URL","concat","hash","handledWindow","once","style","right","bottom","torusWidgetVisibility","buttonPosition","assign","hideTorusButton","showTorusButton","cb","_payload","jsonrpc","tryWindowHandle","debug","isRecoverable","errorMessage","isPermanentlyDisconnected","EthereumRpcError","logoUrl","getLogoUrl","torusAlert","successAlert","btnContainer","appendChild","bindOnLoad","remove","children","attachOnLoad","hasEmittedConnection","TorusInPageProvider","selectedAddress","_handleAccountsChanged","_handleChainChanged","_handleUnlockStateChanged","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","isInternal","err","result","isEthAccounts","finalAccounts","account","dequal","imgExists","img","onload","onerror","src","e","getSiteName","siteName","querySelector","metaTitle","title","getSiteIcon","icon","from","querySelectorAll","find","_icon","Boolean","getSiteMetadata","require","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","type","storage","x","setItem","removeItem","code","storageAvailable","torusIframeHtml","crossOrigin","rel","relList","supports","head","Torus","modalZIndex","isInitialized","requestedLoginProvider","alertZIndex","communicationProvider","enableLogging","network","useLocalStorage","apiKey","extraParams","whiteLabel","setAPIKey","enableAll","setDefaultLevel","disableAll","handleDappStorageKey","torusIframeUrl","pathname","endsWith","hashParams","URLSearchParams","append","styleLink","handleSetup","body","dappMetadata","contentWindow","postMessage","_setupWeb3","topupHide","isTopupHidden","torus","loginProvider","login_hint","loginParams","privateKey","userInfo","success","logout","clearInit","isElement","element","Element","Document","contains","path","instanceId","finalPath","searchParams","keys","forEach","userInfoResponse","topupResponse","response","transaction","serialize","requireAllSignatures","options","signature","serializeMessage","messageOnly","parsed","JSON","parse","publicKey","PublicKey","Buffer","addSignature","transactions","map","tx","responses","signatures","item","idx","storedKey","localStorage","getItem","generatedKey","providerParams","providerStream","BasePostMessageStream","targetWindow","communicationStream","inPageProvider","includes","detectAccountRequestPrototypeModifier","m","originalMethod","self","login","then","catch","apply","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","all","SolanaWalletAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","torusWalletOptions","adapterSettings","initParams","loginSettings","get","solanaProvider","set","_","_get","blockExplorer","displayName","rpcTarget","ticker","tickerName","blockExplorerUrl","logo","getChainConfig","torusInstance","init","TorusInjectedProvider","ADAPTER_EVENTS","autoConnect","rehydrated","connect","_connect","WalletInitializationError","adapter","torusInpageProvider","sendTransaction","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","_this$chainConfig3","setProvider","reconnected","_args3","cleanup","_context3","_getUserInfo","_context4","getUserInfo","module","exports","ALPHABET","TypeError","BASE_MAP","Uint8Array","j","i","charAt","xc","charCodeAt","BASE","LEADER","FACTOR","iFACTOR","decodeUnsafe","source","psz","zeroes","size","b256","carry","it3","it4","vch","ArrayBuffer","isView","buffer","byteOffset","byteLength","pbegin","pend","b58","it1","it2","str","repeat","decode","string","basex","equal","a","b","RegExp","flags","valueOf","isStream","pipe","writable","_write","_writableState","readable","_read","_readableState","duplex","transform","_transform"],"sourceRoot":""}